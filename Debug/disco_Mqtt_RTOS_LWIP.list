
disco_Mqtt_RTOS_LWIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b970  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fa8  0800bb00  0800bb00  0001bb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800daa8  0800daa8  0001daa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dab0  0800dab0  0001dab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  0800dab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  8 .bss          000112dc  2000007c  2000007c  0002007c  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20011358  20011358  0002007c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000454e3  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00008a53  00000000  00000000  0006558f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0001696f  00000000  00000000  0006dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001978  00000000  00000000  00084958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024f0  00000000  00000000  000862d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00012308  00000000  00000000  000887c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00009b9a  00000000  00000000  0009aac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000a4662  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005514  00000000  00000000  000a46e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bae8 	.word	0x0800bae8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800bae8 	.word	0x0800bae8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b97a 	b.w	80005ac <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	468c      	mov	ip, r1
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	9e08      	ldr	r6, [sp, #32]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d151      	bne.n	8000384 <__udivmoddi4+0xb4>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d96d      	bls.n	80003c2 <__udivmoddi4+0xf2>
 80002e6:	fab2 fe82 	clz	lr, r2
 80002ea:	f1be 0f00 	cmp.w	lr, #0
 80002ee:	d00b      	beq.n	8000308 <__udivmoddi4+0x38>
 80002f0:	f1ce 0c20 	rsb	ip, lr, #32
 80002f4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000300:	ea4c 0c05 	orr.w	ip, ip, r5
 8000304:	fa00 f40e 	lsl.w	r4, r0, lr
 8000308:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800030c:	0c25      	lsrs	r5, r4, #16
 800030e:	fbbc f8fa 	udiv	r8, ip, sl
 8000312:	fa1f f987 	uxth.w	r9, r7
 8000316:	fb0a cc18 	mls	ip, sl, r8, ip
 800031a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800031e:	fb08 f309 	mul.w	r3, r8, r9
 8000322:	42ab      	cmp	r3, r5
 8000324:	d90a      	bls.n	800033c <__udivmoddi4+0x6c>
 8000326:	19ed      	adds	r5, r5, r7
 8000328:	f108 32ff 	add.w	r2, r8, #4294967295
 800032c:	f080 8123 	bcs.w	8000576 <__udivmoddi4+0x2a6>
 8000330:	42ab      	cmp	r3, r5
 8000332:	f240 8120 	bls.w	8000576 <__udivmoddi4+0x2a6>
 8000336:	f1a8 0802 	sub.w	r8, r8, #2
 800033a:	443d      	add	r5, r7
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb5 f0fa 	udiv	r0, r5, sl
 8000344:	fb0a 5510 	mls	r5, sl, r0, r5
 8000348:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034c:	fb00 f909 	mul.w	r9, r0, r9
 8000350:	45a1      	cmp	r9, r4
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x98>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	f080 810a 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800035e:	45a1      	cmp	r9, r4
 8000360:	f240 8107 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000364:	3802      	subs	r0, #2
 8000366:	443c      	add	r4, r7
 8000368:	eba4 0409 	sub.w	r4, r4, r9
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	2100      	movs	r1, #0
 8000372:	2e00      	cmp	r6, #0
 8000374:	d061      	beq.n	800043a <__udivmoddi4+0x16a>
 8000376:	fa24 f40e 	lsr.w	r4, r4, lr
 800037a:	2300      	movs	r3, #0
 800037c:	6034      	str	r4, [r6, #0]
 800037e:	6073      	str	r3, [r6, #4]
 8000380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000384:	428b      	cmp	r3, r1
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0xc8>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d054      	beq.n	8000436 <__udivmoddi4+0x166>
 800038c:	2100      	movs	r1, #0
 800038e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000392:	4608      	mov	r0, r1
 8000394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000398:	fab3 f183 	clz	r1, r3
 800039c:	2900      	cmp	r1, #0
 800039e:	f040 808e 	bne.w	80004be <__udivmoddi4+0x1ee>
 80003a2:	42ab      	cmp	r3, r5
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xdc>
 80003a6:	4282      	cmp	r2, r0
 80003a8:	f200 80fa 	bhi.w	80005a0 <__udivmoddi4+0x2d0>
 80003ac:	1a84      	subs	r4, r0, r2
 80003ae:	eb65 0503 	sbc.w	r5, r5, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	46ac      	mov	ip, r5
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d03f      	beq.n	800043a <__udivmoddi4+0x16a>
 80003ba:	e886 1010 	stmia.w	r6, {r4, ip}
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b912      	cbnz	r2, 80003ca <__udivmoddi4+0xfa>
 80003c4:	2701      	movs	r7, #1
 80003c6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ca:	fab7 fe87 	clz	lr, r7
 80003ce:	f1be 0f00 	cmp.w	lr, #0
 80003d2:	d134      	bne.n	800043e <__udivmoddi4+0x16e>
 80003d4:	1beb      	subs	r3, r5, r7
 80003d6:	0c3a      	lsrs	r2, r7, #16
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	2101      	movs	r1, #1
 80003de:	fbb3 f8f2 	udiv	r8, r3, r2
 80003e2:	0c25      	lsrs	r5, r4, #16
 80003e4:	fb02 3318 	mls	r3, r2, r8, r3
 80003e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ec:	fb0c f308 	mul.w	r3, ip, r8
 80003f0:	42ab      	cmp	r3, r5
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x134>
 80003f4:	19ed      	adds	r5, r5, r7
 80003f6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x132>
 80003fc:	42ab      	cmp	r3, r5
 80003fe:	f200 80d1 	bhi.w	80005a4 <__udivmoddi4+0x2d4>
 8000402:	4680      	mov	r8, r0
 8000404:	1aed      	subs	r5, r5, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb5 f0f2 	udiv	r0, r5, r2
 800040c:	fb02 5510 	mls	r5, r2, r0, r5
 8000410:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000414:	fb0c fc00 	mul.w	ip, ip, r0
 8000418:	45a4      	cmp	ip, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x15c>
 800041c:	19e4      	adds	r4, r4, r7
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x15a>
 8000424:	45a4      	cmp	ip, r4
 8000426:	f200 80b8 	bhi.w	800059a <__udivmoddi4+0x2ca>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 040c 	sub.w	r4, r4, ip
 8000430:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000434:	e79d      	b.n	8000372 <__udivmoddi4+0xa2>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1ce 0420 	rsb	r4, lr, #32
 8000442:	fa05 f30e 	lsl.w	r3, r5, lr
 8000446:	fa07 f70e 	lsl.w	r7, r7, lr
 800044a:	fa20 f804 	lsr.w	r8, r0, r4
 800044e:	0c3a      	lsrs	r2, r7, #16
 8000450:	fa25 f404 	lsr.w	r4, r5, r4
 8000454:	ea48 0803 	orr.w	r8, r8, r3
 8000458:	fbb4 f1f2 	udiv	r1, r4, r2
 800045c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000460:	fb02 4411 	mls	r4, r2, r1, r4
 8000464:	fa1f fc87 	uxth.w	ip, r7
 8000468:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800046c:	fb01 f30c 	mul.w	r3, r1, ip
 8000470:	42ab      	cmp	r3, r5
 8000472:	fa00 f40e 	lsl.w	r4, r0, lr
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x1bc>
 8000478:	19ed      	adds	r5, r5, r7
 800047a:	f101 30ff 	add.w	r0, r1, #4294967295
 800047e:	f080 808a 	bcs.w	8000596 <__udivmoddi4+0x2c6>
 8000482:	42ab      	cmp	r3, r5
 8000484:	f240 8087 	bls.w	8000596 <__udivmoddi4+0x2c6>
 8000488:	3902      	subs	r1, #2
 800048a:	443d      	add	r5, r7
 800048c:	1aeb      	subs	r3, r5, r3
 800048e:	fa1f f588 	uxth.w	r5, r8
 8000492:	fbb3 f0f2 	udiv	r0, r3, r2
 8000496:	fb02 3310 	mls	r3, r2, r0, r3
 800049a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800049e:	fb00 f30c 	mul.w	r3, r0, ip
 80004a2:	42ab      	cmp	r3, r5
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1e6>
 80004a6:	19ed      	adds	r5, r5, r7
 80004a8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ac:	d26f      	bcs.n	800058e <__udivmoddi4+0x2be>
 80004ae:	42ab      	cmp	r3, r5
 80004b0:	d96d      	bls.n	800058e <__udivmoddi4+0x2be>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443d      	add	r5, r7
 80004b6:	1aeb      	subs	r3, r5, r3
 80004b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004bc:	e78f      	b.n	80003de <__udivmoddi4+0x10e>
 80004be:	f1c1 0720 	rsb	r7, r1, #32
 80004c2:	fa22 f807 	lsr.w	r8, r2, r7
 80004c6:	408b      	lsls	r3, r1
 80004c8:	fa05 f401 	lsl.w	r4, r5, r1
 80004cc:	ea48 0303 	orr.w	r3, r8, r3
 80004d0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004d4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004d8:	40fd      	lsrs	r5, r7
 80004da:	ea4e 0e04 	orr.w	lr, lr, r4
 80004de:	fbb5 f9fc 	udiv	r9, r5, ip
 80004e2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004e6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ea:	fa1f f883 	uxth.w	r8, r3
 80004ee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004f2:	fb09 f408 	mul.w	r4, r9, r8
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	fa02 f201 	lsl.w	r2, r2, r1
 80004fc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x244>
 8000502:	18ed      	adds	r5, r5, r3
 8000504:	f109 30ff 	add.w	r0, r9, #4294967295
 8000508:	d243      	bcs.n	8000592 <__udivmoddi4+0x2c2>
 800050a:	42ac      	cmp	r4, r5
 800050c:	d941      	bls.n	8000592 <__udivmoddi4+0x2c2>
 800050e:	f1a9 0902 	sub.w	r9, r9, #2
 8000512:	441d      	add	r5, r3
 8000514:	1b2d      	subs	r5, r5, r4
 8000516:	fa1f fe8e 	uxth.w	lr, lr
 800051a:	fbb5 f0fc 	udiv	r0, r5, ip
 800051e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000522:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000526:	fb00 f808 	mul.w	r8, r0, r8
 800052a:	45a0      	cmp	r8, r4
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x26e>
 800052e:	18e4      	adds	r4, r4, r3
 8000530:	f100 35ff 	add.w	r5, r0, #4294967295
 8000534:	d229      	bcs.n	800058a <__udivmoddi4+0x2ba>
 8000536:	45a0      	cmp	r8, r4
 8000538:	d927      	bls.n	800058a <__udivmoddi4+0x2ba>
 800053a:	3802      	subs	r0, #2
 800053c:	441c      	add	r4, r3
 800053e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000542:	eba4 0408 	sub.w	r4, r4, r8
 8000546:	fba0 8902 	umull	r8, r9, r0, r2
 800054a:	454c      	cmp	r4, r9
 800054c:	46c6      	mov	lr, r8
 800054e:	464d      	mov	r5, r9
 8000550:	d315      	bcc.n	800057e <__udivmoddi4+0x2ae>
 8000552:	d012      	beq.n	800057a <__udivmoddi4+0x2aa>
 8000554:	b156      	cbz	r6, 800056c <__udivmoddi4+0x29c>
 8000556:	ebba 030e 	subs.w	r3, sl, lr
 800055a:	eb64 0405 	sbc.w	r4, r4, r5
 800055e:	fa04 f707 	lsl.w	r7, r4, r7
 8000562:	40cb      	lsrs	r3, r1
 8000564:	431f      	orrs	r7, r3
 8000566:	40cc      	lsrs	r4, r1
 8000568:	6037      	str	r7, [r6, #0]
 800056a:	6074      	str	r4, [r6, #4]
 800056c:	2100      	movs	r1, #0
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	4618      	mov	r0, r3
 8000574:	e6f8      	b.n	8000368 <__udivmoddi4+0x98>
 8000576:	4690      	mov	r8, r2
 8000578:	e6e0      	b.n	800033c <__udivmoddi4+0x6c>
 800057a:	45c2      	cmp	sl, r8
 800057c:	d2ea      	bcs.n	8000554 <__udivmoddi4+0x284>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 0503 	sbc.w	r5, r9, r3
 8000586:	3801      	subs	r0, #1
 8000588:	e7e4      	b.n	8000554 <__udivmoddi4+0x284>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d7      	b.n	800053e <__udivmoddi4+0x26e>
 800058e:	4640      	mov	r0, r8
 8000590:	e791      	b.n	80004b6 <__udivmoddi4+0x1e6>
 8000592:	4681      	mov	r9, r0
 8000594:	e7be      	b.n	8000514 <__udivmoddi4+0x244>
 8000596:	4601      	mov	r1, r0
 8000598:	e778      	b.n	800048c <__udivmoddi4+0x1bc>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e745      	b.n	800042c <__udivmoddi4+0x15c>
 80005a0:	4608      	mov	r0, r1
 80005a2:	e708      	b.n	80003b6 <__udivmoddi4+0xe6>
 80005a4:	f1a8 0802 	sub.w	r8, r8, #2
 80005a8:	443d      	add	r5, r7
 80005aa:	e72b      	b.n	8000404 <__udivmoddi4+0x134>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_Init+0x30>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005ba:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005c2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005cc:	2003      	movs	r0, #3
 80005ce:	f000 f82f 	bl	8000630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d2:	2000      	movs	r0, #0
 80005d4:	f00a f8ae 	bl	800a734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005d8:	f00a f81e 	bl	800a618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80005dc:	2000      	movs	r0, #0
 80005de:	bd08      	pop	{r3, pc}
 80005e0:	40023c00 	.word	0x40023c00

080005e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x10>)
 80005e6:	4b04      	ldr	r3, [pc, #16]	; (80005f8 <HAL_IncTick+0x14>)
 80005e8:	6811      	ldr	r1, [r2, #0]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	440b      	add	r3, r1
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200055e4 	.word	0x200055e4
 80005f8:	20000000 	.word	0x20000000

080005fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005fc:	4b01      	ldr	r3, [pc, #4]	; (8000604 <HAL_GetTick+0x8>)
 80005fe:	6818      	ldr	r0, [r3, #0]
}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200055e4 	.word	0x200055e4

08000608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000608:	b538      	push	{r3, r4, r5, lr}
 800060a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fff6 	bl	80005fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000610:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	bf1c      	itt	ne
 8000614:	4b05      	ldrne	r3, [pc, #20]	; (800062c <HAL_Delay+0x24>)
 8000616:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000618:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800061a:	bf18      	it	ne
 800061c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	f7ff ffed 	bl	80005fc <HAL_GetTick>
 8000622:	1b40      	subs	r0, r0, r5
 8000624:	4284      	cmp	r4, r0
 8000626:	d8fa      	bhi.n	800061e <HAL_Delay+0x16>
  {
  }
}
 8000628:	bd38      	pop	{r3, r4, r5, pc}
 800062a:	bf00      	nop
 800062c:	20000000 	.word	0x20000000

08000630 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000632:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000634:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000640:	0200      	lsls	r0, r0, #8
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800064a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800064c:	60d3      	str	r3, [r2, #12]
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000656:	b530      	push	{r4, r5, lr}
 8000658:	68dc      	ldr	r4, [r3, #12]
 800065a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800065e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	2b04      	cmp	r3, #4
 8000666:	bf28      	it	cs
 8000668:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800066a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f04f 0501 	mov.w	r5, #1
 8000670:	fa05 f303 	lsl.w	r3, r5, r3
 8000674:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000678:	bf8c      	ite	hi
 800067a:	3c03      	subhi	r4, #3
 800067c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067e:	4019      	ands	r1, r3
 8000680:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000682:	fa05 f404 	lsl.w	r4, r5, r4
 8000686:	3c01      	subs	r4, #1
 8000688:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800068a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	ea42 0201 	orr.w	r2, r2, r1
 8000690:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000694:	bfad      	iteet	ge
 8000696:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f000 000f 	andlt.w	r0, r0, #15
 800069e:	4b06      	ldrlt	r3, [pc, #24]	; (80006b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfb5      	itete	lt
 80006a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00
 80006b8:	e000ed14 	.word	0xe000ed14

080006bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006bc:	2800      	cmp	r0, #0
 80006be:	db08      	blt.n	80006d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006c0:	0942      	lsrs	r2, r0, #5
 80006c2:	2301      	movs	r3, #1
 80006c4:	f000 001f 	and.w	r0, r0, #31
 80006c8:	fa03 f000 	lsl.w	r0, r3, r0
 80006cc:	4b01      	ldr	r3, [pc, #4]	; (80006d4 <HAL_NVIC_EnableIRQ+0x18>)
 80006ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006d2:	4770      	bx	lr
 80006d4:	e000e100 	.word	0xe000e100

080006d8 <ETH_Delay.constprop.4>:
/**
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
 80006d8:	b082      	sub	sp, #8
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80006da:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <ETH_Delay.constprop.4+0x20>)
 80006dc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80006e6:	9301      	str	r3, [sp, #4]
  do 
  {
    __NOP();
 80006e8:	bf00      	nop
  } 
  while (Delay --);
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	1e5a      	subs	r2, r3, #1
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d1f9      	bne.n	80006e8 <ETH_Delay.constprop.4+0x10>
}
 80006f4:	b002      	add	sp, #8
 80006f6:	4770      	bx	lr
 80006f8:	20000014 	.word	0x20000014

080006fc <ETH_FlushTransmitFIFO>:
{
 80006fc:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t tmpreg1 = 0U;
 80006fe:	2300      	movs	r3, #0
 8000700:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000702:	f241 0118 	movw	r1, #4120	; 0x1018
 8000706:	6803      	ldr	r3, [r0, #0]
 8000708:	585a      	ldr	r2, [r3, r1]
 800070a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800070e:	505a      	str	r2, [r3, r1]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8000710:	585b      	ldr	r3, [r3, r1]
 8000712:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000714:	f7ff ffe0 	bl	80006d8 <ETH_Delay.constprop.4>
  (heth->Instance)->DMAOMR = tmpreg1;
 8000718:	9a01      	ldr	r2, [sp, #4]
 800071a:	6803      	ldr	r3, [r0, #0]
 800071c:	505a      	str	r2, [r3, r1]
}
 800071e:	b003      	add	sp, #12
 8000720:	f85d fb04 	ldr.w	pc, [sp], #4

08000724 <ETH_MACDMAConfig>:
{
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000728:	b129      	cbz	r1, 8000736 <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800072a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800072e:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000734:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000736:	69e3      	ldr	r3, [r4, #28]
  tmpreg1 = (heth->Instance)->MACCR;
 8000738:	6822      	ldr	r2, [r4, #0]
                       macinit.LoopbackMode |
 800073a:	68e0      	ldr	r0, [r4, #12]
  tmpreg1 = (heth->Instance)->MACCR;
 800073c:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800073e:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000740:	68a3      	ldr	r3, [r4, #8]
 8000742:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8000746:	4830      	ldr	r0, [pc, #192]	; (8000808 <ETH_MACDMAConfig+0xe4>)
 8000748:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074c:	ea00 0005 	and.w	r0, r0, r5
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000750:	bf0c      	ite	eq
 8000752:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000756:	2100      	movne	r1, #0
 8000758:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800075a:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800075c:	6013      	str	r3, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800075e:	2001      	movs	r0, #1
  tmpreg1 = (heth->Instance)->MACCR;
 8000760:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000762:	f7ff ff51 	bl	8000608 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8000766:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000768:	2240      	movs	r2, #64	; 0x40
  (heth->Instance)->MACCR = tmpreg1; 
 800076a:	601d      	str	r5, [r3, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800076c:	2001      	movs	r0, #1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800076e:	605a      	str	r2, [r3, #4]
   tmpreg1 = (heth->Instance)->MACFFR;
 8000770:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	f7ff ff49 	bl	8000608 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800077a:	2500      	movs	r5, #0
 800077c:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800077e:	60dd      	str	r5, [r3, #12]
   tmpreg1 = (heth->Instance)->MACFCR;
 8000780:	699a      	ldr	r2, [r3, #24]
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8000782:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000786:	0412      	lsls	r2, r2, #16
 8000788:	0c12      	lsrs	r2, r2, #16
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800078a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800078e:	619a      	str	r2, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000790:	2001      	movs	r0, #1
   tmpreg1 = (heth->Instance)->MACFCR;
 8000792:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000794:	f7ff ff38 	bl	8000608 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8000798:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800079a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg1;
 800079c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800079e:	61dd      	str	r5, [r3, #28]
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80007a0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007a2:	f7ff ff31 	bl	8000608 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007a6:	6822      	ldr	r2, [r4, #0]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007a8:	4b18      	ldr	r3, [pc, #96]	; (800080c <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg1;
 80007aa:	61d5      	str	r5, [r2, #28]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007ac:	f241 0518 	movw	r5, #4120	; 0x1018
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b0:	2001      	movs	r0, #1
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007b2:	5951      	ldr	r1, [r2, r5]
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80007b4:	400b      	ands	r3, r1
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007b6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007ba:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80007be:	5153      	str	r3, [r2, r5]
    tmpreg1 = (heth->Instance)->DMAOMR;
 80007c0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c2:	f7ff ff21 	bl	8000608 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80007c6:	6823      	ldr	r3, [r4, #0]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg1;
 80007ca:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007d2:	601a      	str	r2, [r3, #0]
     tmpreg1 = (heth->Instance)->DMABMR;
 80007d4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007d6:	f7ff ff17 	bl	8000608 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80007da:	6822      	ldr	r2, [r4, #0]
 80007dc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80007e0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80007e2:	69a3      	ldr	r3, [r4, #24]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d107      	bne.n	80007f8 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80007e8:	f241 011c 	movw	r1, #4124	; 0x101c
 80007ec:	5853      	ldr	r3, [r2, r1]
 80007ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80007f8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80007fa:	4a06      	ldr	r2, [pc, #24]	; (8000814 <ETH_MACDMAConfig+0xf0>)
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80007fc:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80007fe:	6011      	str	r1, [r2, #0]
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8000800:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <ETH_MACDMAConfig+0xf4>)
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	bd70      	pop	{r4, r5, r6, pc}
 8000808:	ff20810f 	.word	0xff20810f
 800080c:	f8de3f23 	.word	0xf8de3f23
 8000810:	02c12080 	.word	0x02c12080
 8000814:	40028040 	.word	0x40028040
 8000818:	40028044 	.word	0x40028044

0800081c <HAL_ETH_DMATxDescListInit>:
{
 800081c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 800081e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000822:	2c01      	cmp	r4, #1
 8000824:	f04f 0402 	mov.w	r4, #2
 8000828:	d033      	beq.n	8000892 <HAL_ETH_DMATxDescListInit+0x76>
 800082a:	2501      	movs	r5, #1
 800082c:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000830:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->TxDesc = DMATxDescTab;
 8000834:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000836:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < TxBuffCount; i++)
 800083a:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800083c:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000840:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (TxBuffCount-1U))
 8000844:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < TxBuffCount; i++)
 8000848:	429d      	cmp	r5, r3
 800084a:	d10b      	bne.n	8000864 <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800084c:	6802      	ldr	r2, [r0, #0]
 800084e:	f241 0310 	movw	r3, #4112	; 0x1010
 8000852:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000854:	2301      	movs	r3, #1
 8000856:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800085a:	2300      	movs	r3, #0
 800085c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000860:	4618      	mov	r0, r3
 8000862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000864:	fb0e 2605 	mla	r6, lr, r5, r2
 8000868:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800086c:	69c6      	ldr	r6, [r0, #28]
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800086e:	f844 7c20 	str.w	r7, [r4, #-32]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000872:	b92e      	cbnz	r6, 8000880 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000874:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000878:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 800087c:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000880:	4565      	cmp	r5, ip
 8000882:	bf2c      	ite	cs
 8000884:	460e      	movcs	r6, r1
 8000886:	4626      	movcc	r6, r4
 8000888:	f844 6c14 	str.w	r6, [r4, #-20]
  for(i=0U; i < TxBuffCount; i++)
 800088c:	3501      	adds	r5, #1
 800088e:	3420      	adds	r4, #32
 8000890:	e7da      	b.n	8000848 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000892:	4620      	mov	r0, r4
}
 8000894:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000896 <HAL_ETH_DMARxDescListInit>:
{
 8000896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 800089a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800089e:	2c01      	cmp	r4, #1
 80008a0:	f04f 0402 	mov.w	r4, #2
 80008a4:	d030      	beq.n	8000908 <HAL_ETH_DMARxDescListInit+0x72>
 80008a6:	2501      	movs	r5, #1
 80008a8:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80008ac:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
  heth->RxDesc = DMARxDescTab; 
 80008b0:	6281      	str	r1, [r0, #40]	; 0x28
 80008b2:	f101 0420 	add.w	r4, r1, #32
  for(i=0U; i < RxBuffCount; i++)
 80008b6:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008b8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008bc:	f244 57f4 	movw	r7, #17908	; 0x45f4
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008c0:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1U))
 80008c4:	f103 3cff 	add.w	ip, r3, #4294967295
  for(i=0U; i < RxBuffCount; i++)
 80008c8:	429d      	cmp	r5, r3
 80008ca:	d10c      	bne.n	80008e6 <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80008cc:	6802      	ldr	r2, [r0, #0]
 80008ce:	f241 030c 	movw	r3, #4108	; 0x100c
 80008d2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008d4:	2301      	movs	r3, #1
 80008d6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008da:	2300      	movs	r3, #0
 80008dc:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008e0:	4618      	mov	r0, r3
 80008e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008e6:	fb0e 2805 	mla	r8, lr, r5, r2
 80008ea:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80008ee:	4565      	cmp	r5, ip
 80008f0:	bf2c      	ite	cs
 80008f2:	4688      	movcs	r8, r1
 80008f4:	46a0      	movcc	r8, r4
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008f6:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008fa:	f844 7c1c 	str.w	r7, [r4, #-28]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80008fe:	f844 8c14 	str.w	r8, [r4, #-20]
  for(i=0U; i < RxBuffCount; i++)
 8000902:	3501      	adds	r5, #1
 8000904:	3420      	adds	r4, #32
 8000906:	e7df      	b.n	80008c8 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000908:	4620      	mov	r0, r4
}
 800090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000910 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000910:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000914:	2b01      	cmp	r3, #1
{
 8000916:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000918:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 800091c:	d068      	beq.n	80009f0 <HAL_ETH_TransmitFrame+0xe0>
 800091e:	2201      	movs	r2, #1
 8000920:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000924:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0U) 
 8000928:	b929      	cbnz	r1, 8000936 <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 800092a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800092e:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8000932:	4610      	mov	r0, r2
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000936:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000938:	681c      	ldr	r4, [r3, #0]
 800093a:	2c00      	cmp	r4, #0
 800093c:	da06      	bge.n	800094c <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800093e:	2312      	movs	r3, #18
 8000940:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000944:	2300      	movs	r3, #0
 8000946:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800094a:	e7f2      	b.n	8000932 <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800094c:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000950:	42a1      	cmp	r1, r4
 8000952:	d92e      	bls.n	80009b2 <HAL_ETH_TransmitFrame+0xa2>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000954:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000958:	fb04 1412 	mls	r4, r4, r2, r1
 800095c:	b33c      	cbz	r4, 80009ae <HAL_ETH_TransmitFrame+0x9e>
      bufcount++;
 800095e:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000960:	4c24      	ldr	r4, [pc, #144]	; (80009f4 <HAL_ETH_TransmitFrame+0xe4>)
 8000962:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8000966:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800096a:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800096e:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000970:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1U))
 8000974:	1e57      	subs	r7, r2, #1
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000976:	681d      	ldr	r5, [r3, #0]
 8000978:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 800097c:	601d      	str	r5, [r3, #0]
      if (i == 0U) 
 800097e:	b91c      	cbnz	r4, 8000988 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000980:	681d      	ldr	r5, [r3, #0]
 8000982:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000986:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1U))
 8000988:	42a7      	cmp	r7, r4
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800098a:	bf08      	it	eq
 800098c:	681d      	ldreq	r5, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800098e:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000990:	bf04      	itt	eq
 8000992:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
 8000996:	601d      	streq	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000998:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800099a:	bf08      	it	eq
 800099c:	6059      	streq	r1, [r3, #4]
    for (i=0U; i< bufcount; i++)
 800099e:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0U; i< bufcount; i++)
 80009a4:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a6:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009a8:	68db      	ldr	r3, [r3, #12]
    for (i=0U; i< bufcount; i++)
 80009aa:	d1e4      	bne.n	8000976 <HAL_ETH_TransmitFrame+0x66>
 80009ac:	e00d      	b.n	80009ca <HAL_ETH_TransmitFrame+0xba>
  if (bufcount == 1U)
 80009ae:	2a01      	cmp	r2, #1
 80009b0:	d1d6      	bne.n	8000960 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80009b8:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009ba:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009bc:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009c4:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009c6:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009cc:	f241 0214 	movw	r2, #4116	; 0x1014
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	5899      	ldr	r1, [r3, r2]
 80009d4:	0749      	lsls	r1, r1, #29
 80009d6:	d505      	bpl.n	80009e4 <HAL_ETH_TransmitFrame+0xd4>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009d8:	2104      	movs	r1, #4
 80009da:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0U;
 80009dc:	f241 0204 	movw	r2, #4100	; 0x1004
 80009e0:	2100      	movs	r1, #0
 80009e2:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80009e4:	2301      	movs	r3, #1
 80009e6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009ea:	2300      	movs	r3, #0
 80009ec:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80009f0:	4618      	mov	r0, r3
}
 80009f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009f4:	fffffa0c 	.word	0xfffffa0c

080009f8 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 80009f8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80009fc:	2b01      	cmp	r3, #1
{
 80009fe:	b530      	push	{r4, r5, lr}
 8000a00:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(heth);
 8000a04:	d03b      	beq.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000a06:	2201      	movs	r2, #1
 8000a08:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8000a0c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a10:	2405      	movs	r4, #5
      heth->RxFrameInfos.SegCount = 1U;   
 8000a12:	4611      	mov	r1, r2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	db01      	blt.n	8000a20 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a1c:	3c01      	subs	r4, #1
 8000a1e:	d106      	bne.n	8000a2e <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a20:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a22:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a24:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a28:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a2c:	e027      	b.n	8000a7e <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	68dd      	ldr	r5, [r3, #12]
 8000a32:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a36:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a3a:	d103      	bne.n	8000a44 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a3c:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000a3e:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a40:	6285      	str	r5, [r0, #40]	; 0x28
 8000a42:	e7e7      	b.n	8000a14 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a4a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a4c:	d102      	bne.n	8000a54 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000a4e:	3201      	adds	r2, #1
 8000a50:	6382      	str	r2, [r0, #56]	; 0x38
 8000a52:	e7f5      	b.n	8000a40 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000a54:	3201      	adds	r2, #1
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000a56:	2a01      	cmp	r2, #1
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a58:	bf08      	it	eq
 8000a5a:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a5c:	6343      	str	r3, [r0, #52]	; 0x34
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a5e:	681b      	ldr	r3, [r3, #0]
      (heth->RxFrameInfos.SegCount)++;
 8000a60:	6382      	str	r2, [r0, #56]	; 0x38
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000a62:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a66:	3b04      	subs	r3, #4
 8000a68:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a70:	2301      	movs	r3, #1
 8000a72:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a76:	2300      	movs	r3, #0
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a78:	6285      	str	r5, [r0, #40]	; 0x28
      __HAL_UNLOCK(heth);
 8000a7a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd30      	pop	{r4, r5, pc}

08000a82 <HAL_ETH_TxCpltCallback>:
 8000a82:	4770      	bx	lr

08000a84 <HAL_ETH_ErrorCallback>:
{
 8000a84:	4770      	bx	lr

08000a86 <HAL_ETH_IRQHandler>:
{
 8000a86:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a88:	6802      	ldr	r2, [r0, #0]
 8000a8a:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000a8e:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a90:	5995      	ldr	r5, [r2, r6]
 8000a92:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000a96:	d021      	beq.n	8000adc <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000a98:	f009 f992 	bl	8009dc0 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	f241 0514 	movw	r5, #4116	; 0x1014
 8000ab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab8:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000aba:	595b      	ldr	r3, [r3, r5]
 8000abc:	041b      	lsls	r3, r3, #16
 8000abe:	d50c      	bpl.n	8000ada <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff ffdf 	bl	8000a84 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000acc:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000adc:	5993      	ldr	r3, [r2, r6]
 8000ade:	07da      	lsls	r2, r3, #31
 8000ae0:	d5e5      	bpl.n	8000aae <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000ae2:	f7ff ffce 	bl	8000a82 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000ae6:	6822      	ldr	r2, [r4, #0]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000aec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000af0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000af4:	e7db      	b.n	8000aae <HAL_ETH_IRQHandler+0x28>

08000af6 <HAL_ETH_ReadPHYRegister>:
{
 8000af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000af8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000afc:	2b82      	cmp	r3, #130	; 0x82
{
 8000afe:	4605      	mov	r5, r0
 8000b00:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b02:	d030      	beq.n	8000b66 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b04:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b06:	2382      	movs	r3, #130	; 0x82
 8000b08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b0c:	6913      	ldr	r3, [r2, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b0e:	0189      	lsls	r1, r1, #6
 8000b10:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b14:	f003 011c 	and.w	r1, r3, #28
 8000b18:	4321      	orrs	r1, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b1a:	8a04      	ldrh	r4, [r0, #16]
 8000b1c:	02e4      	lsls	r4, r4, #11
 8000b1e:	b2a4      	uxth	r4, r4
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8000b20:	430c      	orrs	r4, r1
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8000b22:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8000b26:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b28:	f7ff fd68 	bl	80005fc <HAL_GetTick>
 8000b2c:	4607      	mov	r7, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b2e:	f014 0001 	ands.w	r0, r4, #1
 8000b32:	d107      	bne.n	8000b44 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b34:	682b      	ldr	r3, [r5, #0]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b44:	f7ff fd5a 	bl	80005fc <HAL_GetTick>
 8000b48:	1bc0      	subs	r0, r0, r7
 8000b4a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b4e:	d307      	bcc.n	8000b60 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b56:	2300      	movs	r3, #0
 8000b58:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000b60:	682b      	ldr	r3, [r5, #0]
 8000b62:	691c      	ldr	r4, [r3, #16]
 8000b64:	e7e3      	b.n	8000b2e <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b66:	2002      	movs	r0, #2
}
 8000b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b6a <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b6a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b6e:	2b42      	cmp	r3, #66	; 0x42
{
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b74:	d02e      	beq.n	8000bd4 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b76:	2342      	movs	r3, #66	; 0x42
 8000b78:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b7c:	6803      	ldr	r3, [r0, #0]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b7e:	018c      	lsls	r4, r1, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8000b80:	6918      	ldr	r0, [r3, #16]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b82:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
 8000b86:	f044 0403 	orr.w	r4, r4, #3
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8000b8a:	f000 001c 	and.w	r0, r0, #28
 8000b8e:	4320      	orrs	r0, r4
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b90:	8a2c      	ldrh	r4, [r5, #16]
 8000b92:	02e4      	lsls	r4, r4, #11
 8000b94:	b2a4      	uxth	r4, r4
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8000b96:	4304      	orrs	r4, r0
 8000b98:	b292      	uxth	r2, r2
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b9a:	615a      	str	r2, [r3, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8000b9c:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b9e:	f7ff fd2d 	bl	80005fc <HAL_GetTick>
 8000ba2:	4606      	mov	r6, r0
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000ba4:	f014 0001 	ands.w	r0, r4, #1
 8000ba8:	d103      	bne.n	8000bb2 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000baa:	2301      	movs	r3, #1
 8000bac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bb2:	f7ff fd23 	bl	80005fc <HAL_GetTick>
 8000bb6:	1b80      	subs	r0, r0, r6
 8000bb8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bbc:	d307      	bcc.n	8000bce <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000bca:	2003      	movs	r0, #3
 8000bcc:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 = heth->Instance->MACMIIAR;
 8000bce:	682b      	ldr	r3, [r5, #0]
 8000bd0:	691c      	ldr	r4, [r3, #16]
 8000bd2:	e7e7      	b.n	8000ba4 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000bd4:	2002      	movs	r0, #2
}
 8000bd6:	bd70      	pop	{r4, r5, r6, pc}

08000bd8 <HAL_ETH_Init>:
{
 8000bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bde:	4604      	mov	r4, r0
 8000be0:	2800      	cmp	r0, #0
 8000be2:	f000 80de 	beq.w	8000da2 <HAL_ETH_Init+0x1ca>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000be6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bee:	b91b      	cbnz	r3, 8000bf8 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000bf0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000bf4:	f009 f866 	bl	8009cc4 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_ETH_Init+0x1d0>)
 8000bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c04:	645a      	str	r2, [r3, #68]	; 0x44
 8000c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c10:	4b66      	ldr	r3, [pc, #408]	; (8000dac <HAL_ETH_Init+0x1d4>)
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c18:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	6a21      	ldr	r1, [r4, #32]
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f042 0201 	orr.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c30:	f7ff fce4 	bl	80005fc <HAL_GetTick>
 8000c34:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c3c:	6812      	ldr	r2, [r2, #0]
 8000c3e:	07d0      	lsls	r0, r2, #31
 8000c40:	d41d      	bmi.n	8000c7e <HAL_ETH_Init+0xa6>
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000c42:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c44:	f000 fc56 	bl	80014f4 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c48:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <HAL_ETH_Init+0x1d8>)
 8000c4a:	4a5a      	ldr	r2, [pc, #360]	; (8000db4 <HAL_ETH_Init+0x1dc>)
 8000c4c:	4403      	add	r3, r0
 8000c4e:	4293      	cmp	r3, r2
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000c50:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000c54:	d822      	bhi.n	8000c9c <HAL_ETH_Init+0xc4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c56:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c5a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000c60:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c62:	2100      	movs	r1, #0
 8000c64:	4620      	mov	r0, r4
 8000c66:	f7ff ff80 	bl	8000b6a <HAL_ETH_WritePHYRegister>
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	b368      	cbz	r0, 8000cca <HAL_ETH_Init+0xf2>
      ETH_MACDMAConfig(heth, err);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	4620      	mov	r0, r4
      heth->State = HAL_ETH_STATE_READY;
 8000c72:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c74:	f7ff fd56 	bl	8000724 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c78:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c7c:	e00b      	b.n	8000c96 <HAL_ETH_Init+0xbe>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c7e:	f7ff fcbd 	bl	80005fc <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c88:	d9d5      	bls.n	8000c36 <HAL_ETH_Init+0x5e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c8a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c8c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c8e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c96:	4628      	mov	r0, r5
 8000c98:	b003      	add	sp, #12
 8000c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000c9c:	4b46      	ldr	r3, [pc, #280]	; (8000db8 <HAL_ETH_Init+0x1e0>)
 8000c9e:	4a47      	ldr	r2, [pc, #284]	; (8000dbc <HAL_ETH_Init+0x1e4>)
 8000ca0:	4403      	add	r3, r0
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d802      	bhi.n	8000cac <HAL_ETH_Init+0xd4>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000ca6:	f045 050c 	orr.w	r5, r5, #12
 8000caa:	e7d6      	b.n	8000c5a <HAL_ETH_Init+0x82>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <HAL_ETH_Init+0x1e8>)
 8000cae:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_ETH_Init+0x1ec>)
 8000cb0:	4403      	add	r3, r0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d9d1      	bls.n	8000c5a <HAL_ETH_Init+0x82>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000cb6:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <HAL_ETH_Init+0x1f0>)
 8000cb8:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <HAL_ETH_Init+0x1f4>)
 8000cba:	4403      	add	r3, r0
 8000cbc:	4293      	cmp	r3, r2
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cbe:	bf94      	ite	ls
 8000cc0:	f045 0504 	orrls.w	r5, r5, #4
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cc4:	f045 0510 	orrhi.w	r5, r5, #16
 8000cc8:	e7c7      	b.n	8000c5a <HAL_ETH_Init+0x82>
  HAL_Delay(PHY_RESET_DELAY);
 8000cca:	20ff      	movs	r0, #255	; 0xff
 8000ccc:	f7ff fc9c 	bl	8000608 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d053      	beq.n	8000d7e <HAL_ETH_Init+0x1a6>
    tickstart = HAL_GetTick();
 8000cd6:	f7ff fc91 	bl	80005fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cda:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cde:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ce0:	466a      	mov	r2, sp
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f7ff ff06 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cea:	f7ff fc87 	bl	80005fc <HAL_GetTick>
 8000cee:	1b80      	subs	r0, r0, r6
 8000cf0:	42b8      	cmp	r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <HAL_ETH_Init+0x134>
        ETH_MACDMAConfig(heth, err);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f7ff fd14 	bl	8000724 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d02:	2300      	movs	r3, #0
 8000d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d08:	2503      	movs	r5, #3
 8000d0a:	e7c4      	b.n	8000c96 <HAL_ETH_Init+0xbe>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	0759      	lsls	r1, r3, #29
 8000d10:	d5e6      	bpl.n	8000ce0 <HAL_ETH_Init+0x108>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d16:	2100      	movs	r1, #0
 8000d18:	4620      	mov	r0, r4
 8000d1a:	f7ff ff26 	bl	8000b6a <HAL_ETH_WritePHYRegister>
 8000d1e:	2800      	cmp	r0, #0
 8000d20:	d1a5      	bne.n	8000c6e <HAL_ETH_Init+0x96>
    tickstart = HAL_GetTick();
 8000d22:	f7ff fc6b 	bl	80005fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d26:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d2a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d2c:	466a      	mov	r2, sp
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff fee0 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d36:	f7ff fc61 	bl	80005fc <HAL_GetTick>
 8000d3a:	1b80      	subs	r0, r0, r6
 8000d3c:	42b8      	cmp	r0, r7
 8000d3e:	d8d9      	bhi.n	8000cf4 <HAL_ETH_Init+0x11c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d40:	9b00      	ldr	r3, [sp, #0]
 8000d42:	069a      	lsls	r2, r3, #26
 8000d44:	d5f2      	bpl.n	8000d2c <HAL_ETH_Init+0x154>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d46:	466a      	mov	r2, sp
 8000d48:	211f      	movs	r1, #31
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff fed3 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d18c      	bne.n	8000c6e <HAL_ETH_Init+0x96>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d54:	9b00      	ldr	r3, [sp, #0]
 8000d56:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d5a:	bf18      	it	ne
 8000d5c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d60:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d62:	bf4c      	ite	mi
 8000d64:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d66:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d6a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d6c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4620      	mov	r0, r4
 8000d72:	f7ff fcd7 	bl	8000724 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d7c:	e78b      	b.n	8000c96 <HAL_ETH_Init+0xbe>
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d7e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d80:	68e2      	ldr	r2, [r4, #12]
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000d82:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000d84:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff feec 	bl	8000b6a <HAL_ETH_WritePHYRegister>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	f47f af6b 	bne.w	8000c6e <HAL_ETH_Init+0x96>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d98:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d9c:	f7ff fc34 	bl	8000608 <HAL_Delay>
 8000da0:	e7e5      	b.n	8000d6e <HAL_ETH_Init+0x196>
    return HAL_ERROR;
 8000da2:	2501      	movs	r5, #1
 8000da4:	e777      	b.n	8000c96 <HAL_ETH_Init+0xbe>
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40013800 	.word	0x40013800
 8000db0:	feced300 	.word	0xfeced300
 8000db4:	00e4e1bf 	.word	0x00e4e1bf
 8000db8:	fde9f140 	.word	0xfde9f140
 8000dbc:	017d783f 	.word	0x017d783f
 8000dc0:	fc6c7900 	.word	0xfc6c7900
 8000dc4:	026259ff 	.word	0x026259ff
 8000dc8:	fa0a1f00 	.word	0xfa0a1f00
 8000dcc:	02faf07f 	.word	0x02faf07f

08000dd0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000dd0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000dd4:	2b01      	cmp	r3, #1
{  
 8000dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd8:	4605      	mov	r5, r0
 8000dda:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000dde:	d031      	beq.n	8000e44 <HAL_ETH_Start+0x74>
  __IO uint32_t tmpreg1 = 0U;
 8000de0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000de2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000de4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __IO uint32_t tmpreg1 = 0U;
 8000de8:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dea:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(heth);
 8000dec:	2601      	movs	r6, #1
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dee:	f042 0208 	orr.w	r2, r2, #8
  __HAL_LOCK(heth);
 8000df2:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000df6:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	9301      	str	r3, [sp, #4]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000dfc:	f7ff fc6c 	bl	80006d8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	9a01      	ldr	r2, [sp, #4]
 8000e04:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg1 = 0U;
 8000e06:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	f042 0204 	orr.w	r2, r2, #4
 8000e0e:	601a      	str	r2, [r3, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	9300      	str	r3, [sp, #0]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8000e14:	f7ff fc60 	bl	80006d8 <ETH_Delay.constprop.4>
  (heth->Instance)->MACCR = tmpreg1;
 8000e18:	682b      	ldr	r3, [r5, #0]
 8000e1a:	9a00      	ldr	r2, [sp, #0]
 8000e1c:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e1e:	4628      	mov	r0, r5
 8000e20:	f7ff fc6c 	bl	80006fc <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e24:	682a      	ldr	r2, [r5, #0]
 8000e26:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e2a:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e2c:	58d1      	ldr	r1, [r2, r3]
 8000e2e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e32:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e34:	58d1      	ldr	r1, [r2, r3]
 8000e36:	f041 0102 	orr.w	r1, r1, #2
 8000e3a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e3c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e40:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e44:	b002      	add	sp, #8
 8000e46:	bd70      	pop	{r4, r5, r6, pc}

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e4c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e4e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001000 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e54:	4a68      	ldr	r2, [pc, #416]	; (8000ff8 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e56:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001004 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e5e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e60:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000e62:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e64:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000e66:	42ac      	cmp	r4, r5
 8000e68:	f040 80b0 	bne.w	8000fcc <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e6c:	684c      	ldr	r4, [r1, #4]
 8000e6e:	f024 0c10 	bic.w	ip, r4, #16
 8000e72:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000e76:	2e01      	cmp	r6, #1
 8000e78:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000e7c:	d812      	bhi.n	8000ea4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000e7e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e80:	2603      	movs	r6, #3
 8000e82:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e86:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e8a:	68ce      	ldr	r6, [r1, #12]
 8000e8c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e90:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000e92:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e94:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e96:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9a:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e9e:	409e      	lsls	r6, r3
 8000ea0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ea2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000ea6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ea8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000eac:	43f6      	mvns	r6, r6
 8000eae:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb2:	688f      	ldr	r7, [r1, #8]
 8000eb4:	fa07 f70e 	lsl.w	r7, r7, lr
 8000eb8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ebc:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000ec0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	d116      	bne.n	8000ef2 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000ec4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000ec8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ecc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ed4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ed8:	f04f 0c0f 	mov.w	ip, #15
 8000edc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ee0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ee4:	690f      	ldr	r7, [r1, #16]
 8000ee6:	fa07 f70b 	lsl.w	r7, r7, fp
 8000eea:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000ef2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef6:	f004 0703 	and.w	r7, r4, #3
 8000efa:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000efe:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000f02:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f04:	00e6      	lsls	r6, r4, #3
 8000f06:	d561      	bpl.n	8000fcc <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	f04f 0b00 	mov.w	fp, #0
 8000f0c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000f10:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f14:	4e39      	ldr	r6, [pc, #228]	; (8000ffc <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000f1a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000f1e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000f22:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000f26:	9703      	str	r7, [sp, #12]
 8000f28:	9f03      	ldr	r7, [sp, #12]
 8000f2a:	f023 0703 	bic.w	r7, r3, #3
 8000f2e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000f32:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f36:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f42:	f04f 0e0f 	mov.w	lr, #15
 8000f46:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f4c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f50:	d043      	beq.n	8000fda <HAL_GPIO_Init+0x192>
 8000f52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f56:	42b0      	cmp	r0, r6
 8000f58:	d041      	beq.n	8000fde <HAL_GPIO_Init+0x196>
 8000f5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f5e:	42b0      	cmp	r0, r6
 8000f60:	d03f      	beq.n	8000fe2 <HAL_GPIO_Init+0x19a>
 8000f62:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f66:	42b0      	cmp	r0, r6
 8000f68:	d03d      	beq.n	8000fe6 <HAL_GPIO_Init+0x19e>
 8000f6a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f6e:	42b0      	cmp	r0, r6
 8000f70:	d03b      	beq.n	8000fea <HAL_GPIO_Init+0x1a2>
 8000f72:	4548      	cmp	r0, r9
 8000f74:	d03b      	beq.n	8000fee <HAL_GPIO_Init+0x1a6>
 8000f76:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f7a:	42b0      	cmp	r0, r6
 8000f7c:	d039      	beq.n	8000ff2 <HAL_GPIO_Init+0x1aa>
 8000f7e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f82:	42b0      	cmp	r0, r6
 8000f84:	bf14      	ite	ne
 8000f86:	2608      	movne	r6, #8
 8000f88:	2607      	moveq	r6, #7
 8000f8a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f8e:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f92:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000f94:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f98:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	bf0c      	ite	eq
 8000f9e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fa0:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000fa2:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000fa4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000faa:	bf0c      	ite	eq
 8000fac:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fae:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000fb0:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb2:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	bf0c      	ite	eq
 8000fba:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fbc:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000fbe:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	bf54      	ite	pl
 8000fc6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fc8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fca:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fcc:	3301      	adds	r3, #1
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	f47f af45 	bne.w	8000e5e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000fd4:	b005      	add	sp, #20
 8000fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	465e      	mov	r6, fp
 8000fdc:	e7d5      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fde:	2601      	movs	r6, #1
 8000fe0:	e7d3      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fe2:	2602      	movs	r6, #2
 8000fe4:	e7d1      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fe6:	2603      	movs	r6, #3
 8000fe8:	e7cf      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fea:	2604      	movs	r6, #4
 8000fec:	e7cd      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000fee:	2605      	movs	r6, #5
 8000ff0:	e7cb      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000ff2:	2606      	movs	r6, #6
 8000ff4:	e7c9      	b.n	8000f8a <HAL_GPIO_Init+0x142>
 8000ff6:	bf00      	nop
 8000ff8:	40013c00 	.word	0x40013c00
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40023800 	.word	0x40023800
 8001004:	40021400 	.word	0x40021400

08001008 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	b10a      	cbz	r2, 800100e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800100a:	6181      	str	r1, [r0, #24]
 800100c:	4770      	bx	lr
 800100e:	0409      	lsls	r1, r1, #16
 8001010:	e7fb      	b.n	800100a <HAL_GPIO_WritePin+0x2>
	...

08001014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001018:	4604      	mov	r4, r0
 800101a:	b908      	cbnz	r0, 8001020 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800101c:	2001      	movs	r0, #1
 800101e:	e03f      	b.n	80010a0 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001020:	6803      	ldr	r3, [r0, #0]
 8001022:	07dd      	lsls	r5, r3, #31
 8001024:	d410      	bmi.n	8001048 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	0798      	lsls	r0, r3, #30
 800102a:	d45a      	bmi.n	80010e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	071a      	lsls	r2, r3, #28
 8001030:	f100 809c 	bmi.w	800116c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	075b      	lsls	r3, r3, #29
 8001038:	f100 80ba 	bmi.w	80011b0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800103c:	69a0      	ldr	r0, [r4, #24]
 800103e:	2800      	cmp	r0, #0
 8001040:	f040 811b 	bne.w	800127a <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001044:	2000      	movs	r0, #0
 8001046:	e02b      	b.n	80010a0 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001048:	4ba4      	ldr	r3, [pc, #656]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	f002 020c 	and.w	r2, r2, #12
 8001050:	2a04      	cmp	r2, #4
 8001052:	d007      	beq.n	8001064 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800105a:	2a08      	cmp	r2, #8
 800105c:	d10a      	bne.n	8001074 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	0259      	lsls	r1, r3, #9
 8001062:	d507      	bpl.n	8001074 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001064:	4b9d      	ldr	r3, [pc, #628]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	039a      	lsls	r2, r3, #14
 800106a:	d5dc      	bpl.n	8001026 <HAL_RCC_OscConfig+0x12>
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1d9      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
 8001072:	e7d3      	b.n	800101c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001074:	6863      	ldr	r3, [r4, #4]
 8001076:	4d99      	ldr	r5, [pc, #612]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 8001078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107c:	d113      	bne.n	80010a6 <HAL_RCC_OscConfig+0x92>
 800107e:	682b      	ldr	r3, [r5, #0]
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001086:	f7ff fab9 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4d94      	ldr	r5, [pc, #592]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800108c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	039b      	lsls	r3, r3, #14
 8001092:	d4c8      	bmi.n	8001026 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001094:	f7ff fab2 	bl	80005fc <HAL_GetTick>
 8001098:	1b80      	subs	r0, r0, r6
 800109a:	2864      	cmp	r0, #100	; 0x64
 800109c:	d9f7      	bls.n	800108e <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 800109e:	2003      	movs	r0, #3
}
 80010a0:	b002      	add	sp, #8
 80010a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010aa:	d104      	bne.n	80010b6 <HAL_RCC_OscConfig+0xa2>
 80010ac:	682b      	ldr	r3, [r5, #0]
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	602b      	str	r3, [r5, #0]
 80010b4:	e7e3      	b.n	800107e <HAL_RCC_OscConfig+0x6a>
 80010b6:	682a      	ldr	r2, [r5, #0]
 80010b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010bc:	602a      	str	r2, [r5, #0]
 80010be:	682a      	ldr	r2, [r5, #0]
 80010c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1dd      	bne.n	8001086 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80010ca:	f7ff fa97 	bl	80005fc <HAL_GetTick>
 80010ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	039f      	lsls	r7, r3, #14
 80010d4:	d5a7      	bpl.n	8001026 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d6:	f7ff fa91 	bl	80005fc <HAL_GetTick>
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	2864      	cmp	r0, #100	; 0x64
 80010de:	d9f7      	bls.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010e0:	e7dd      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010e2:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	f012 0f0c 	tst.w	r2, #12
 80010ea:	d007      	beq.n	80010fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010f2:	2a08      	cmp	r2, #8
 80010f4:	d111      	bne.n	800111a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	025e      	lsls	r6, r3, #9
 80010fa:	d40e      	bmi.n	800111a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010fc:	4b77      	ldr	r3, [pc, #476]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	0795      	lsls	r5, r2, #30
 8001102:	d502      	bpl.n	800110a <HAL_RCC_OscConfig+0xf6>
 8001104:	68e2      	ldr	r2, [r4, #12]
 8001106:	2a01      	cmp	r2, #1
 8001108:	d188      	bne.n	800101c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	6921      	ldr	r1, [r4, #16]
 800110e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001112:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001116:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001118:	e788      	b.n	800102c <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800111a:	68e2      	ldr	r2, [r4, #12]
 800111c:	4b70      	ldr	r3, [pc, #448]	; (80012e0 <HAL_RCC_OscConfig+0x2cc>)
 800111e:	b1b2      	cbz	r2, 800114e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001124:	f7ff fa6a 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001128:	4d6c      	ldr	r5, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800112a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	0798      	lsls	r0, r3, #30
 8001130:	d507      	bpl.n	8001142 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001132:	682b      	ldr	r3, [r5, #0]
 8001134:	6922      	ldr	r2, [r4, #16]
 8001136:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800113a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800113e:	602b      	str	r3, [r5, #0]
 8001140:	e774      	b.n	800102c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001142:	f7ff fa5b 	bl	80005fc <HAL_GetTick>
 8001146:	1b80      	subs	r0, r0, r6
 8001148:	2802      	cmp	r0, #2
 800114a:	d9ef      	bls.n	800112c <HAL_RCC_OscConfig+0x118>
 800114c:	e7a7      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 800114e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001150:	f7ff fa54 	bl	80005fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001154:	4d61      	ldr	r5, [pc, #388]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8001156:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001158:	682b      	ldr	r3, [r5, #0]
 800115a:	0799      	lsls	r1, r3, #30
 800115c:	f57f af66 	bpl.w	800102c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001160:	f7ff fa4c 	bl	80005fc <HAL_GetTick>
 8001164:	1b80      	subs	r0, r0, r6
 8001166:	2802      	cmp	r0, #2
 8001168:	d9f6      	bls.n	8001158 <HAL_RCC_OscConfig+0x144>
 800116a:	e798      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800116c:	6962      	ldr	r2, [r4, #20]
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_RCC_OscConfig+0x2d0>)
 8001170:	b17a      	cbz	r2, 8001192 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001176:	f7ff fa41 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4d58      	ldr	r5, [pc, #352]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800117c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001180:	079f      	lsls	r7, r3, #30
 8001182:	f53f af57 	bmi.w	8001034 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fa39 	bl	80005fc <HAL_GetTick>
 800118a:	1b80      	subs	r0, r0, r6
 800118c:	2802      	cmp	r0, #2
 800118e:	d9f6      	bls.n	800117e <HAL_RCC_OscConfig+0x16a>
 8001190:	e785      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8001192:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001194:	f7ff fa32 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4d50      	ldr	r5, [pc, #320]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800119a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800119e:	0798      	lsls	r0, r3, #30
 80011a0:	f57f af48 	bpl.w	8001034 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fa2a 	bl	80005fc <HAL_GetTick>
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	2802      	cmp	r0, #2
 80011ac:	d9f6      	bls.n	800119c <HAL_RCC_OscConfig+0x188>
 80011ae:	e776      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b0:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80011b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80011b8:	d128      	bne.n	800120c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80011ba:	9201      	str	r2, [sp, #4]
 80011bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80011ce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4d45      	ldr	r5, [pc, #276]	; (80012e8 <HAL_RCC_OscConfig+0x2d4>)
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	05d9      	lsls	r1, r3, #23
 80011d6:	d51b      	bpl.n	8001210 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011d8:	68a3      	ldr	r3, [r4, #8]
 80011da:	4d40      	ldr	r5, [pc, #256]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d127      	bne.n	8001230 <HAL_RCC_OscConfig+0x21c>
 80011e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e2:	f043 0301 	orr.w	r3, r3, #1
 80011e6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80011e8:	f7ff fa08 	bl	80005fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	4d3b      	ldr	r5, [pc, #236]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 80011ee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011f6:	079b      	lsls	r3, r3, #30
 80011f8:	d539      	bpl.n	800126e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	f43f af1e 	beq.w	800103c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001200:	4a36      	ldr	r2, [pc, #216]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 8001202:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	e717      	b.n	800103c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800120c:	2600      	movs	r6, #0
 800120e:	e7df      	b.n	80011d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001218:	f7ff f9f0 	bl	80005fc <HAL_GetTick>
 800121c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121e:	682b      	ldr	r3, [r5, #0]
 8001220:	05da      	lsls	r2, r3, #23
 8001222:	d4d9      	bmi.n	80011d8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001224:	f7ff f9ea 	bl	80005fc <HAL_GetTick>
 8001228:	1bc0      	subs	r0, r0, r7
 800122a:	2802      	cmp	r0, #2
 800122c:	d9f7      	bls.n	800121e <HAL_RCC_OscConfig+0x20a>
 800122e:	e736      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001230:	2b05      	cmp	r3, #5
 8001232:	d104      	bne.n	800123e <HAL_RCC_OscConfig+0x22a>
 8001234:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	672b      	str	r3, [r5, #112]	; 0x70
 800123c:	e7d0      	b.n	80011e0 <HAL_RCC_OscConfig+0x1cc>
 800123e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001240:	f022 0201 	bic.w	r2, r2, #1
 8001244:	672a      	str	r2, [r5, #112]	; 0x70
 8001246:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001248:	f022 0204 	bic.w	r2, r2, #4
 800124c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ca      	bne.n	80011e8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001252:	f7ff f9d3 	bl	80005fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800125a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800125c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800125e:	0798      	lsls	r0, r3, #30
 8001260:	d5cb      	bpl.n	80011fa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff f9cb 	bl	80005fc <HAL_GetTick>
 8001266:	1bc0      	subs	r0, r0, r7
 8001268:	4540      	cmp	r0, r8
 800126a:	d9f7      	bls.n	800125c <HAL_RCC_OscConfig+0x248>
 800126c:	e717      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800126e:	f7ff f9c5 	bl	80005fc <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	4540      	cmp	r0, r8
 8001276:	d9bd      	bls.n	80011f4 <HAL_RCC_OscConfig+0x1e0>
 8001278:	e711      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800127a:	4d18      	ldr	r5, [pc, #96]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
 800127c:	68ab      	ldr	r3, [r5, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b08      	cmp	r3, #8
 8001284:	d047      	beq.n	8001316 <HAL_RCC_OscConfig+0x302>
 8001286:	4e19      	ldr	r6, [pc, #100]	; (80012ec <HAL_RCC_OscConfig+0x2d8>)
 8001288:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800128c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128e:	d135      	bne.n	80012fc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001290:	f7ff f9b4 	bl	80005fc <HAL_GetTick>
 8001294:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001296:	682b      	ldr	r3, [r5, #0]
 8001298:	0199      	lsls	r1, r3, #6
 800129a:	d429      	bmi.n	80012f0 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800129c:	6a22      	ldr	r2, [r4, #32]
 800129e:	69e3      	ldr	r3, [r4, #28]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012a4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80012a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80012aa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b0:	4c0a      	ldr	r4, [pc, #40]	; (80012dc <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012b2:	0852      	lsrs	r2, r2, #1
 80012b4:	3a01      	subs	r2, #1
 80012b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012ba:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80012bc:	2301      	movs	r3, #1
 80012be:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012c0:	f7ff f99c 	bl	80005fc <HAL_GetTick>
 80012c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	019a      	lsls	r2, r3, #6
 80012ca:	f53f aebb 	bmi.w	8001044 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ce:	f7ff f995 	bl	80005fc <HAL_GetTick>
 80012d2:	1b40      	subs	r0, r0, r5
 80012d4:	2802      	cmp	r0, #2
 80012d6:	d9f6      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2b2>
 80012d8:	e6e1      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	42470000 	.word	0x42470000
 80012e4:	42470e80 	.word	0x42470e80
 80012e8:	40007000 	.word	0x40007000
 80012ec:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f0:	f7ff f984 	bl	80005fc <HAL_GetTick>
 80012f4:	1bc0      	subs	r0, r0, r7
 80012f6:	2802      	cmp	r0, #2
 80012f8:	d9cd      	bls.n	8001296 <HAL_RCC_OscConfig+0x282>
 80012fa:	e6d0      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 80012fc:	f7ff f97e 	bl	80005fc <HAL_GetTick>
 8001300:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	f57f ae9d 	bpl.w	8001044 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130a:	f7ff f977 	bl	80005fc <HAL_GetTick>
 800130e:	1b00      	subs	r0, r0, r4
 8001310:	2802      	cmp	r0, #2
 8001312:	d9f6      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ee>
 8001314:	e6c3      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001316:	2801      	cmp	r0, #1
 8001318:	f43f aec2 	beq.w	80010a0 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 800131c:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800131e:	69e3      	ldr	r3, [r4, #28]
 8001320:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001324:	429a      	cmp	r2, r3
 8001326:	f47f ae79 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
 800132a:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800132c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001330:	4293      	cmp	r3, r2
 8001332:	f47f ae73 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001336:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001338:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800133c:	4003      	ands	r3, r0
 800133e:	4293      	cmp	r3, r2
 8001340:	f47f ae6c 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001344:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001346:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800134a:	4293      	cmp	r3, r2
 800134c:	f47f ae66 	bne.w	800101c <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001350:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001352:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001356:	1ac0      	subs	r0, r0, r3
 8001358:	bf18      	it	ne
 800135a:	2001      	movne	r0, #1
 800135c:	e6a0      	b.n	80010a0 <HAL_RCC_OscConfig+0x8c>
 800135e:	bf00      	nop

08001360 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001360:	4913      	ldr	r1, [pc, #76]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001362:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001364:	688b      	ldr	r3, [r1, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b04      	cmp	r3, #4
 800136c:	d003      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x16>
 800136e:	2b08      	cmp	r3, #8
 8001370:	d003      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001372:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001374:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x58>)
 8001378:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800137c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001380:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001384:	bf14      	ite	ne
 8001386:	480c      	ldrne	r0, [pc, #48]	; (80013b8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001388:	480a      	ldreq	r0, [pc, #40]	; (80013b4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800138e:	bf18      	it	ne
 8001390:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001392:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001396:	fba1 0100 	umull	r0, r1, r1, r0
 800139a:	f7fe ff81 	bl	80002a0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <HAL_RCC_GetSysClockFreq+0x50>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013a6:	3301      	adds	r3, #1
 80013a8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80013aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80013ae:	bd08      	pop	{r3, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	00f42400 	.word	0x00f42400
 80013b8:	007a1200 	.word	0x007a1200

080013bc <HAL_RCC_ClockConfig>:
{
 80013bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013c2:	4604      	mov	r4, r0
 80013c4:	b910      	cbnz	r0, 80013cc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80013c6:	2001      	movs	r0, #1
 80013c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013cc:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_ClockConfig+0x124>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	f002 020f 	and.w	r2, r2, #15
 80013d4:	428a      	cmp	r2, r1
 80013d6:	d329      	bcc.n	800142c <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	078f      	lsls	r7, r1, #30
 80013dc:	d42e      	bmi.n	800143c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013de:	07c8      	lsls	r0, r1, #31
 80013e0:	d441      	bmi.n	8001466 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <HAL_RCC_ClockConfig+0x124>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f002 020f 	and.w	r2, r2, #15
 80013ea:	4295      	cmp	r5, r2
 80013ec:	d367      	bcc.n	80014be <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	0751      	lsls	r1, r2, #29
 80013f2:	d46d      	bmi.n	80014d0 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f4:	0713      	lsls	r3, r2, #28
 80013f6:	d507      	bpl.n	8001408 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013f8:	4a3a      	ldr	r2, [pc, #232]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 80013fa:	6921      	ldr	r1, [r4, #16]
 80013fc:	6893      	ldr	r3, [r2, #8]
 80013fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001402:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001406:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001408:	f7ff ffaa 	bl	8001360 <HAL_RCC_GetSysClockFreq>
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 800140e:	4a36      	ldr	r2, [pc, #216]	; (80014e8 <HAL_RCC_ClockConfig+0x12c>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	40d8      	lsrs	r0, r3
 800141a:	4b34      	ldr	r3, [pc, #208]	; (80014ec <HAL_RCC_ClockConfig+0x130>)
 800141c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800141e:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <HAL_RCC_ClockConfig+0x134>)
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	f009 f987 	bl	800a734 <HAL_InitTick>
  return HAL_OK;
 8001426:	2000      	movs	r0, #0
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	4299      	cmp	r1, r3
 8001438:	d1c5      	bne.n	80013c6 <HAL_RCC_ClockConfig+0xa>
 800143a:	e7cd      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1c>
 800143c:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001442:	bf1e      	ittt	ne
 8001444:	689a      	ldrne	r2, [r3, #8]
 8001446:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800144a:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144c:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800144e:	bf42      	ittt	mi
 8001450:	689a      	ldrmi	r2, [r3, #8]
 8001452:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001456:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	68a0      	ldr	r0, [r4, #8]
 800145c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001460:	4302      	orrs	r2, r0
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e7bb      	b.n	80013de <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	6862      	ldr	r2, [r4, #4]
 8001468:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 800146a:	2a01      	cmp	r2, #1
 800146c:	d11d      	bne.n	80014aa <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001474:	d0a7      	beq.n	80013c6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001476:	4e1b      	ldr	r6, [pc, #108]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 8001478:	68b3      	ldr	r3, [r6, #8]
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	4313      	orrs	r3, r2
 8001480:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001482:	f7ff f8bb 	bl	80005fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001486:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800148a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800148c:	68b3      	ldr	r3, [r6, #8]
 800148e:	6862      	ldr	r2, [r4, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001498:	d0a3      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800149a:	f7ff f8af 	bl	80005fc <HAL_GetTick>
 800149e:	1bc0      	subs	r0, r0, r7
 80014a0:	4540      	cmp	r0, r8
 80014a2:	d9f3      	bls.n	800148c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80014a4:	2003      	movs	r0, #3
}
 80014a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014aa:	1e91      	subs	r1, r2, #2
 80014ac:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ae:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b0:	d802      	bhi.n	80014b8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80014b6:	e7dd      	b.n	8001474 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	f013 0f02 	tst.w	r3, #2
 80014bc:	e7da      	b.n	8001474 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	b2ea      	uxtb	r2, r5
 80014c0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	429d      	cmp	r5, r3
 80014ca:	f47f af7c 	bne.w	80013c6 <HAL_RCC_ClockConfig+0xa>
 80014ce:	e78e      	b.n	80013ee <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4904      	ldr	r1, [pc, #16]	; (80014e4 <HAL_RCC_ClockConfig+0x128>)
 80014d2:	68e0      	ldr	r0, [r4, #12]
 80014d4:	688b      	ldr	r3, [r1, #8]
 80014d6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80014da:	4303      	orrs	r3, r0
 80014dc:	608b      	str	r3, [r1, #8]
 80014de:	e789      	b.n	80013f4 <HAL_RCC_ClockConfig+0x38>
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	40023800 	.word	0x40023800
 80014e8:	0800d9f5 	.word	0x0800d9f5
 80014ec:	20000014 	.word	0x20000014
 80014f0:	20000004 	.word	0x20000004

080014f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80014f4:	4b01      	ldr	r3, [pc, #4]	; (80014fc <HAL_RCC_GetHCLKFreq+0x8>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000014 	.word	0x20000014

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800150e:	6810      	ldr	r0, [r2, #0]
}
 8001510:	40d8      	lsrs	r0, r3
 8001512:	4770      	bx	lr
 8001514:	40023800 	.word	0x40023800
 8001518:	0800da05 	.word	0x0800da05
 800151c:	20000014 	.word	0x20000014

08001520 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800152a:	5cd3      	ldrb	r3, [r2, r3]
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800152e:	6810      	ldr	r0, [r2, #0]
}
 8001530:	40d8      	lsrs	r0, r3
 8001532:	4770      	bx	lr
 8001534:	40023800 	.word	0x40023800
 8001538:	0800da05 	.word	0x0800da05
 800153c:	20000014 	.word	0x20000014

08001540 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001540:	230f      	movs	r3, #15
 8001542:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_GetClockConfig+0x34>)
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	f002 0203 	and.w	r2, r2, #3
 800154c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001554:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800155c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001566:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_RCC_GetClockConfig+0x38>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	600b      	str	r3, [r1, #0]
 8001572:	4770      	bx	lr
 8001574:	40023800 	.word	0x40023800
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800157c:	6803      	ldr	r3, [r0, #0]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800158c:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 800158e:	bf1e      	ittt	ne
 8001590:	681a      	ldrne	r2, [r3, #0]
 8001592:	f042 0201 	orrne.w	r2, r2, #1
 8001596:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001598:	2000      	movs	r0, #0
 800159a:	4770      	bx	lr

0800159c <HAL_TIM_OC_DelayElapsedCallback>:
 800159c:	4770      	bx	lr

0800159e <HAL_TIM_IC_CaptureCallback>:
 800159e:	4770      	bx	lr

080015a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80015a0:	4770      	bx	lr

080015a2 <HAL_TIM_TriggerCallback>:
 80015a2:	4770      	bx	lr

080015a4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015a4:	6803      	ldr	r3, [r0, #0]
 80015a6:	691a      	ldr	r2, [r3, #16]
 80015a8:	0791      	lsls	r1, r2, #30
{
 80015aa:	b510      	push	{r4, lr}
 80015ac:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015ae:	d50e      	bpl.n	80015ce <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	0792      	lsls	r2, r2, #30
 80015b4:	d50b      	bpl.n	80015ce <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015b6:	f06f 0202 	mvn.w	r2, #2
 80015ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015bc:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015be:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015c0:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015c2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015c4:	d077      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	f7ff ffea 	bl	800159e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ca:	2300      	movs	r3, #0
 80015cc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	0750      	lsls	r0, r2, #29
 80015d4:	d510      	bpl.n	80015f8 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	0751      	lsls	r1, r2, #29
 80015da:	d50d      	bpl.n	80015f8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015dc:	f06f 0204 	mvn.w	r2, #4
 80015e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015e2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015e4:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ea:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015ee:	d068      	beq.n	80016c2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80015f0:	f7ff ffd5 	bl	800159e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f4:	2300      	movs	r3, #0
 80015f6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	0712      	lsls	r2, r2, #28
 80015fe:	d50f      	bpl.n	8001620 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	0710      	lsls	r0, r2, #28
 8001604:	d50c      	bpl.n	8001620 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001606:	f06f 0208 	mvn.w	r2, #8
 800160a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800160c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800160e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001610:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001612:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001614:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001616:	d05a      	beq.n	80016ce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001618:	f7ff ffc1 	bl	800159e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800161c:	2300      	movs	r3, #0
 800161e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	691a      	ldr	r2, [r3, #16]
 8001624:	06d2      	lsls	r2, r2, #27
 8001626:	d510      	bpl.n	800164a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	06d0      	lsls	r0, r2, #27
 800162c:	d50d      	bpl.n	800164a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800162e:	f06f 0210 	mvn.w	r2, #16
 8001632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001634:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001636:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001638:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800163c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001640:	d04b      	beq.n	80016da <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001642:	f7ff ffac 	bl	800159e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001646:	2300      	movs	r3, #0
 8001648:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	07d1      	lsls	r1, r2, #31
 8001650:	d508      	bpl.n	8001664 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	07d2      	lsls	r2, r2, #31
 8001656:	d505      	bpl.n	8001664 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001658:	f06f 0201 	mvn.w	r2, #1
 800165c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800165e:	4620      	mov	r0, r4
 8001660:	f008 ffa0 	bl	800a5a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	0610      	lsls	r0, r2, #24
 800166a:	d508      	bpl.n	800167e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	0611      	lsls	r1, r2, #24
 8001670:	d505      	bpl.n	800167e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001672:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001678:	4620      	mov	r0, r4
 800167a:	f000 f996 	bl	80019aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	691a      	ldr	r2, [r3, #16]
 8001682:	0652      	lsls	r2, r2, #25
 8001684:	d508      	bpl.n	8001698 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	0650      	lsls	r0, r2, #25
 800168a:	d505      	bpl.n	8001698 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800168c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff ff85 	bl	80015a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	0691      	lsls	r1, r2, #26
 800169e:	d522      	bpl.n	80016e6 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016a0:	68da      	ldr	r2, [r3, #12]
 80016a2:	0692      	lsls	r2, r2, #26
 80016a4:	d51f      	bpl.n	80016e6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016a6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ac:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80016b2:	f000 b979 	b.w	80019a8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	f7ff ff71 	bl	800159c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ba:	4620      	mov	r0, r4
 80016bc:	f7ff ff70 	bl	80015a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80016c0:	e783      	b.n	80015ca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	f7ff ff6b 	bl	800159c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff ff6a 	bl	80015a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80016cc:	e792      	b.n	80015f4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ce:	f7ff ff65 	bl	800159c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d2:	4620      	mov	r0, r4
 80016d4:	f7ff ff64 	bl	80015a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80016d8:	e7a0      	b.n	800161c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016da:	f7ff ff5f 	bl	800159c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016de:	4620      	mov	r0, r4
 80016e0:	f7ff ff5e 	bl	80015a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80016e4:	e7af      	b.n	8001646 <HAL_TIM_IRQHandler+0xa2>
 80016e6:	bd10      	pop	{r4, pc}

080016e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016e8:	4a30      	ldr	r2, [pc, #192]	; (80017ac <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80016ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016ec:	4290      	cmp	r0, r2
 80016ee:	d012      	beq.n	8001716 <TIM_Base_SetConfig+0x2e>
 80016f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016f4:	d00f      	beq.n	8001716 <TIM_Base_SetConfig+0x2e>
 80016f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016fa:	4290      	cmp	r0, r2
 80016fc:	d00b      	beq.n	8001716 <TIM_Base_SetConfig+0x2e>
 80016fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001702:	4290      	cmp	r0, r2
 8001704:	d007      	beq.n	8001716 <TIM_Base_SetConfig+0x2e>
 8001706:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170a:	4290      	cmp	r0, r2
 800170c:	d003      	beq.n	8001716 <TIM_Base_SetConfig+0x2e>
 800170e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001712:	4290      	cmp	r0, r2
 8001714:	d119      	bne.n	800174a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001716:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800171c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <TIM_Base_SetConfig+0xc4>)
 8001720:	4290      	cmp	r0, r2
 8001722:	d029      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001724:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001728:	d026      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 800172a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800172e:	4290      	cmp	r0, r2
 8001730:	d022      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001732:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001736:	4290      	cmp	r0, r2
 8001738:	d01e      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 800173a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800173e:	4290      	cmp	r0, r2
 8001740:	d01a      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001742:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001746:	4290      	cmp	r0, r2
 8001748:	d016      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 800174a:	4a19      	ldr	r2, [pc, #100]	; (80017b0 <TIM_Base_SetConfig+0xc8>)
 800174c:	4290      	cmp	r0, r2
 800174e:	d013      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001754:	4290      	cmp	r0, r2
 8001756:	d00f      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001758:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800175c:	4290      	cmp	r0, r2
 800175e:	d00b      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001760:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001764:	4290      	cmp	r0, r2
 8001766:	d007      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800176c:	4290      	cmp	r0, r2
 800176e:	d003      	beq.n	8001778 <TIM_Base_SetConfig+0x90>
 8001770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001774:	4290      	cmp	r0, r2
 8001776:	d103      	bne.n	8001780 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001778:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800177a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800177e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001780:	694a      	ldr	r2, [r1, #20]
 8001782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001786:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001788:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800178a:	688b      	ldr	r3, [r1, #8]
 800178c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800178e:	680b      	ldr	r3, [r1, #0]
 8001790:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <TIM_Base_SetConfig+0xc4>)
 8001794:	4298      	cmp	r0, r3
 8001796:	d003      	beq.n	80017a0 <TIM_Base_SetConfig+0xb8>
 8001798:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800179c:	4298      	cmp	r0, r3
 800179e:	d101      	bne.n	80017a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017a0:	690b      	ldr	r3, [r1, #16]
 80017a2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017a4:	2301      	movs	r3, #1
 80017a6:	6143      	str	r3, [r0, #20]
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40014000 	.word	0x40014000

080017b4 <HAL_TIM_Base_Init>:
{
 80017b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80017b6:	4604      	mov	r4, r0
 80017b8:	b1a0      	cbz	r0, 80017e4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017c2:	b91b      	cbnz	r3, 80017cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80017c8:	f008 ff48 	bl	800a65c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017d2:	6820      	ldr	r0, [r4, #0]
 80017d4:	1d21      	adds	r1, r4, #4
 80017d6:	f7ff ff87 	bl	80016e8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80017da:	2301      	movs	r3, #1
 80017dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80017e0:	2000      	movs	r0, #0
 80017e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017e4:	2001      	movs	r0, #1
}
 80017e6:	bd10      	pop	{r4, pc}

080017e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80017e8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80017ea:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017ec:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017ee:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80017f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80017f6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017f8:	6083      	str	r3, [r0, #8]
 80017fa:	bd10      	pop	{r4, pc}

080017fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80017fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001800:	2b01      	cmp	r3, #1
{
 8001802:	b570      	push	{r4, r5, r6, lr}
 8001804:	4604      	mov	r4, r0
 8001806:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800180a:	d019      	beq.n	8001840 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800180c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001810:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001812:	2301      	movs	r3, #1
 8001814:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001818:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800181a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800181e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001822:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001824:	680b      	ldr	r3, [r1, #0]
 8001826:	2b40      	cmp	r3, #64	; 0x40
 8001828:	d065      	beq.n	80018f6 <HAL_TIM_ConfigClockSource+0xfa>
 800182a:	d815      	bhi.n	8001858 <HAL_TIM_ConfigClockSource+0x5c>
 800182c:	2b10      	cmp	r3, #16
 800182e:	d00c      	beq.n	800184a <HAL_TIM_ConfigClockSource+0x4e>
 8001830:	d807      	bhi.n	8001842 <HAL_TIM_ConfigClockSource+0x46>
 8001832:	b153      	cbz	r3, 800184a <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8001834:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001836:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001838:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800183c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001840:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001842:	2b20      	cmp	r3, #32
 8001844:	d001      	beq.n	800184a <HAL_TIM_ConfigClockSource+0x4e>
 8001846:	2b30      	cmp	r3, #48	; 0x30
 8001848:	d1f4      	bne.n	8001834 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 800184a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800184c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8001850:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001854:	4313      	orrs	r3, r2
 8001856:	e01a      	b.n	800188e <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8001858:	2b60      	cmp	r3, #96	; 0x60
 800185a:	d034      	beq.n	80018c6 <HAL_TIM_ConfigClockSource+0xca>
 800185c:	d819      	bhi.n	8001892 <HAL_TIM_ConfigClockSource+0x96>
 800185e:	2b50      	cmp	r3, #80	; 0x50
 8001860:	d1e8      	bne.n	8001834 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001862:	684a      	ldr	r2, [r1, #4]
 8001864:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001866:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001868:	6a05      	ldr	r5, [r0, #32]
 800186a:	f025 0501 	bic.w	r5, r5, #1
 800186e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001870:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001872:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800187a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800187e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001880:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001882:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001884:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800188a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800188e:	6083      	str	r3, [r0, #8]
 8001890:	e7d0      	b.n	8001834 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8001892:	2b70      	cmp	r3, #112	; 0x70
 8001894:	d00c      	beq.n	80018b0 <HAL_TIM_ConfigClockSource+0xb4>
 8001896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189a:	d1cb      	bne.n	8001834 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800189c:	68cb      	ldr	r3, [r1, #12]
 800189e:	684a      	ldr	r2, [r1, #4]
 80018a0:	6889      	ldr	r1, [r1, #8]
 80018a2:	f7ff ffa1 	bl	80017e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018a6:	6822      	ldr	r2, [r4, #0]
 80018a8:	6893      	ldr	r3, [r2, #8]
 80018aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ae:	e008      	b.n	80018c2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80018b0:	68cb      	ldr	r3, [r1, #12]
 80018b2:	684a      	ldr	r2, [r1, #4]
 80018b4:	6889      	ldr	r1, [r1, #8]
 80018b6:	f7ff ff97 	bl	80017e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80018ba:	6822      	ldr	r2, [r4, #0]
 80018bc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80018be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018c2:	6093      	str	r3, [r2, #8]
      break;
 80018c4:	e7b6      	b.n	8001834 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018c6:	684d      	ldr	r5, [r1, #4]
 80018c8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018ca:	6a01      	ldr	r1, [r0, #32]
 80018cc:	f021 0110 	bic.w	r1, r1, #16
 80018d0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018d2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80018d4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018d6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80018de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018e2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80018e6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80018e8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80018ea:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018f0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80018f4:	e7cb      	b.n	800188e <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018f6:	684a      	ldr	r2, [r1, #4]
 80018f8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80018fa:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018fc:	6a05      	ldr	r5, [r0, #32]
 80018fe:	f025 0501 	bic.w	r5, r5, #1
 8001902:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001904:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001906:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800190a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800190e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001912:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001914:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001916:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001918:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800191a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800191e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001922:	e7b4      	b.n	800188e <HAL_TIM_ConfigClockSource+0x92>

08001924 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001924:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
{
 800192a:	b530      	push	{r4, r5, lr}
 800192c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001930:	d035      	beq.n	800199e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001932:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001936:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001938:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800193a:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 800193c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 8001940:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001942:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 8001944:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001948:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800194a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800194c:	4c15      	ldr	r4, [pc, #84]	; (80019a4 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 800194e:	42a3      	cmp	r3, r4
 8001950:	d01a      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001956:	d017      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001958:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800195c:	42a3      	cmp	r3, r4
 800195e:	d013      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001960:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001964:	42a3      	cmp	r3, r4
 8001966:	d00f      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001968:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800196c:	42a3      	cmp	r3, r4
 800196e:	d00b      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001970:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8001974:	42a3      	cmp	r3, r4
 8001976:	d007      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001978:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 800197c:	42a3      	cmp	r3, r4
 800197e:	d003      	beq.n	8001988 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8001980:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001984:	42a3      	cmp	r3, r4
 8001986:	d104      	bne.n	8001992 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001988:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800198a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800198e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001992:	2301      	movs	r3, #1
 8001994:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001998:	2300      	movs	r3, #0
 800199a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800199e:	4618      	mov	r0, r3

  return HAL_OK;
}
 80019a0:	bd30      	pop	{r4, r5, pc}
 80019a2:	bf00      	nop
 80019a4:	40010000 	.word	0x40010000

080019a8 <HAL_TIMEx_CommutCallback>:
 80019a8:	4770      	bx	lr

080019aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019aa:	4770      	bx	lr

080019ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019ac:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019ae:	6803      	ldr	r3, [r0, #0]
 80019b0:	68c1      	ldr	r1, [r0, #12]
 80019b2:	691a      	ldr	r2, [r3, #16]
{
 80019b4:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019b6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80019ba:	430a      	orrs	r2, r1
 80019bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019be:	6925      	ldr	r5, [r4, #16]
 80019c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019c2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019c4:	69c0      	ldr	r0, [r0, #28]
 80019c6:	432a      	orrs	r2, r5
 80019c8:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80019ca:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019ce:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80019d0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80019d4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80019d6:	430a      	orrs	r2, r1
 80019d8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019da:	695a      	ldr	r2, [r3, #20]
 80019dc:	69a1      	ldr	r1, [r4, #24]
 80019de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80019e2:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019e4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019ec:	d129      	bne.n	8001a42 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d003      	beq.n	80019fa <UART_SetConfig+0x4e>
 80019f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d120      	bne.n	8001a3c <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80019fa:	f7ff fd91 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80019fe:	6862      	ldr	r2, [r4, #4]
 8001a00:	6825      	ldr	r5, [r4, #0]
 8001a02:	1892      	adds	r2, r2, r2
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f04f 0119 	mov.w	r1, #25
 8001a0c:	415b      	adcs	r3, r3
 8001a0e:	fba0 0101 	umull	r0, r1, r0, r1
 8001a12:	f7fe fc45 	bl	80002a0 <__aeabi_uldivmod>
 8001a16:	2164      	movs	r1, #100	; 0x64
 8001a18:	fbb0 f4f1 	udiv	r4, r0, r1
 8001a1c:	fb01 0314 	mls	r3, r1, r4, r0
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	3332      	adds	r3, #50	; 0x32
 8001a24:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8001a32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001a36:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a38:	60ab      	str	r3, [r5, #8]
 8001a3a:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a3c:	f7ff fd60 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001a40:	e7dd      	b.n	80019fe <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d002      	beq.n	8001a4c <UART_SetConfig+0xa0>
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <UART_SetConfig+0xd8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d116      	bne.n	8001a7a <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a4c:	f7ff fd68 	bl	8001520 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a50:	6863      	ldr	r3, [r4, #4]
 8001a52:	6825      	ldr	r5, [r4, #0]
 8001a54:	2119      	movs	r1, #25
 8001a56:	009a      	lsls	r2, r3, #2
 8001a58:	fba0 0101 	umull	r0, r1, r0, r1
 8001a5c:	0f9b      	lsrs	r3, r3, #30
 8001a5e:	f7fe fc1f 	bl	80002a0 <__aeabi_uldivmod>
 8001a62:	2264      	movs	r2, #100	; 0x64
 8001a64:	fbb0 f1f2 	udiv	r1, r0, r2
 8001a68:	fb02 0311 	mls	r3, r2, r1, r0
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	3332      	adds	r3, #50	; 0x32
 8001a70:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001a78:	e7de      	b.n	8001a38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a7a:	f7ff fd41 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8001a7e:	e7e7      	b.n	8001a50 <UART_SetConfig+0xa4>
 8001a80:	40011000 	.word	0x40011000
 8001a84:	40011400 	.word	0x40011400

08001a88 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8a:	4604      	mov	r4, r0
 8001a8c:	460e      	mov	r6, r1
 8001a8e:	4617      	mov	r7, r2
 8001a90:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a92:	6821      	ldr	r1, [r4, #0]
 8001a94:	680b      	ldr	r3, [r1, #0]
 8001a96:	ea36 0303 	bics.w	r3, r6, r3
 8001a9a:	d101      	bne.n	8001aa0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001a9c:	2000      	movs	r0, #0
}
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001aa0:	1c6b      	adds	r3, r5, #1
 8001aa2:	d0f7      	beq.n	8001a94 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001aa4:	b995      	cbnz	r5, 8001acc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001aae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001abe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001ac8:	2003      	movs	r0, #3
 8001aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001acc:	f7fe fd96 	bl	80005fc <HAL_GetTick>
 8001ad0:	1bc0      	subs	r0, r0, r7
 8001ad2:	4285      	cmp	r5, r0
 8001ad4:	d2dd      	bcs.n	8001a92 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001ad6:	e7e6      	b.n	8001aa6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001ad8 <HAL_UART_Init>:
{
 8001ad8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001ada:	4604      	mov	r4, r0
 8001adc:	b340      	cbz	r0, 8001b30 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001ade:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ae2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ae6:	b91b      	cbnz	r3, 8001af0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ae8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001aec:	f008 fdec 	bl	800a6c8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001af0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001af2:	2324      	movs	r3, #36	; 0x24
 8001af4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001af8:	68d3      	ldr	r3, [r2, #12]
 8001afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001afe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001b00:	4620      	mov	r0, r4
 8001b02:	f7ff ff53 	bl	80019ac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b06:	6823      	ldr	r3, [r4, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b16:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b1e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b20:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8001b22:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b24:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b2a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001b2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
}
 8001b32:	bd10      	pop	{r4, pc}

08001b34 <HAL_UART_Transmit>:
{
 8001b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b38:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001b3e:	2b20      	cmp	r3, #32
{
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001b46:	d151      	bne.n	8001bec <HAL_UART_Transmit+0xb8>
    if ((pData == NULL) || (Size == 0U))
 8001b48:	2900      	cmp	r1, #0
 8001b4a:	d04c      	beq.n	8001be6 <HAL_UART_Transmit+0xb2>
 8001b4c:	2a00      	cmp	r2, #0
 8001b4e:	d04a      	beq.n	8001be6 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8001b50:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d049      	beq.n	8001bec <HAL_UART_Transmit+0xb8>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5e:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b62:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b64:	f8c0 903c 	str.w	r9, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b68:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001b6c:	f7fe fd46 	bl	80005fc <HAL_GetTick>
    huart->TxXferSize = Size;
 8001b70:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001b74:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001b76:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8001b7a:	f884 9038 	strb.w	r9, [r4, #56]	; 0x38
    while (huart->TxXferCount > 0U)
 8001b7e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b95b      	cbnz	r3, 8001b9c <HAL_UART_Transmit+0x68>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b84:	463b      	mov	r3, r7
 8001b86:	4632      	mov	r2, r6
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7ff ff7c 	bl	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001b90:	b9a0      	cbnz	r0, 8001bbc <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8001b92:	2320      	movs	r3, #32
 8001b94:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8001b98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->TxXferCount--;
 8001b9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ba4:	68a3      	ldr	r3, [r4, #8]
 8001ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001baa:	4632      	mov	r2, r6
 8001bac:	463b      	mov	r3, r7
 8001bae:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001bb2:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_UART_Transmit+0xa0>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bb6:	f7ff ff67 	bl	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bba:	b110      	cbz	r0, 8001bc2 <HAL_UART_Transmit+0x8e>
          return HAL_TIMEOUT;
 8001bbc:	2003      	movs	r0, #3
 8001bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001bc2:	882b      	ldrh	r3, [r5, #0]
 8001bc4:	6822      	ldr	r2, [r4, #0]
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001bcc:	6923      	ldr	r3, [r4, #16]
 8001bce:	b943      	cbnz	r3, 8001be2 <HAL_UART_Transmit+0xae>
          pData += 2U;
 8001bd0:	3502      	adds	r5, #2
 8001bd2:	e7d4      	b.n	8001b7e <HAL_UART_Transmit+0x4a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bd4:	f7ff ff58 	bl	8001a88 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001bd8:	2800      	cmp	r0, #0
 8001bda:	d1ef      	bne.n	8001bbc <HAL_UART_Transmit+0x88>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	782a      	ldrb	r2, [r5, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	3501      	adds	r5, #1
 8001be4:	e7cb      	b.n	8001b7e <HAL_UART_Transmit+0x4a>
      return  HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
 8001be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8001bec:	2002      	movs	r0, #2
}
 8001bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001bf2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001bf2:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001bf4:	f001 fa70 	bl	80030d8 <vTaskStartScheduler>
  
  return osOK;
}
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	bd08      	pop	{r3, pc}

08001bfc <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bfc:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8001c00:	b10b      	cbz	r3, 8001c06 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8001c02:	f001 baad 	b.w	8003160 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8001c06:	f001 baa5 	b.w	8003154 <xTaskGetTickCount>

08001c0a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c0a:	b570      	push	{r4, r5, r6, lr}
 8001c0c:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c0e:	6946      	ldr	r6, [r0, #20]
 8001c10:	692a      	ldr	r2, [r5, #16]
 8001c12:	6840      	ldr	r0, [r0, #4]
 8001c14:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001c18:	460b      	mov	r3, r1
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001c1e:	b176      	cbz	r6, 8001c3e <osThreadCreate+0x34>
 8001c20:	69ad      	ldr	r5, [r5, #24]
 8001c22:	b165      	cbz	r5, 8001c3e <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001c24:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001c26:	bf14      	ite	ne
 8001c28:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c2a:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c2c:	9502      	str	r5, [sp, #8]
 8001c2e:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001c32:	f001 f9ed 	bl	8003010 <xTaskCreateStatic>
 8001c36:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001c38:	9805      	ldr	r0, [sp, #20]
}
 8001c3a:	b006      	add	sp, #24
 8001c3c:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001c3e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001c40:	bf14      	ite	ne
 8001c42:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c44:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c46:	ad05      	add	r5, sp, #20
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001c4e:	f001 fa16 	bl	800307e <xTaskCreate>
 8001c52:	2801      	cmp	r0, #1
 8001c54:	d0f0      	beq.n	8001c38 <osThreadCreate+0x2e>
      return NULL;
 8001c56:	2000      	movs	r0, #0
 8001c58:	e7ef      	b.n	8001c3a <osThreadCreate+0x30>

08001c5a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c5a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	bf08      	it	eq
 8001c60:	2001      	moveq	r0, #1
 8001c62:	f001 fb8f 	bl	8003384 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c66:	2000      	movs	r0, #0
 8001c68:	bd08      	pop	{r3, pc}

08001c6a <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8001c6a:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001c6c:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8001c6e:	b109      	cbz	r1, 8001c74 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8001c70:	f000 bdf3 	b.w	800285a <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8001c74:	f000 bde6 	b.w	8002844 <xQueueCreateMutex>

08001c78 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001c78:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001c7a:	2400      	movs	r4, #0
 8001c7c:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001c7e:	b1e0      	cbz	r0, 8001cba <osMutexWait+0x42>
 8001c80:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001c84:	b1a3      	cbz	r3, 8001cb0 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001c86:	aa01      	add	r2, sp, #4
 8001c88:	4621      	mov	r1, r4
 8001c8a:	f001 f80f 	bl	8002cac <xQueueReceiveFromISR>
 8001c8e:	2801      	cmp	r0, #1
 8001c90:	d002      	beq.n	8001c98 <osMutexWait+0x20>
      return osErrorOS;
 8001c92:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001c94:	b002      	add	sp, #8
 8001c96:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	b13b      	cbz	r3, 8001cac <osMutexWait+0x34>
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <osMutexWait+0x48>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	f3bf 8f6f 	isb	sy
  return osOK;
 8001cac:	2000      	movs	r0, #0
 8001cae:	e7f1      	b.n	8001c94 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001cb0:	f000 ff3c 	bl	8002b2c <xQueueSemaphoreTake>
 8001cb4:	2801      	cmp	r0, #1
 8001cb6:	d1ec      	bne.n	8001c92 <osMutexWait+0x1a>
 8001cb8:	e7f8      	b.n	8001cac <osMutexWait+0x34>
    return osErrorParameter;
 8001cba:	2080      	movs	r0, #128	; 0x80
 8001cbc:	e7ea      	b.n	8001c94 <osMutexWait+0x1c>
 8001cbe:	bf00      	nop
 8001cc0:	e000ed04 	.word	0xe000ed04

08001cc4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001cc6:	6844      	ldr	r4, [r0, #4]
{ 
 8001cc8:	460d      	mov	r5, r1
  if (semaphore_def->controlblock != NULL){
 8001cca:	b16c      	cbz	r4, 8001ce8 <osSemaphoreCreate+0x24>
    if (count == 1) {
 8001ccc:	2901      	cmp	r1, #1
 8001cce:	d11b      	bne.n	8001d08 <osSemaphoreCreate+0x44>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	4623      	mov	r3, r4
 8001cda:	4611      	mov	r1, r2
 8001cdc:	f000 fc84 	bl	80025e8 <xQueueGenericCreateStatic>
 8001ce0:	4605      	mov	r5, r0
#else
    return NULL;
#endif
  }
#endif
}
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	b003      	add	sp, #12
 8001ce6:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8001ce8:	2901      	cmp	r1, #1
 8001cea:	d10f      	bne.n	8001d0c <osSemaphoreCreate+0x48>
      vSemaphoreCreateBinary(sema);
 8001cec:	4628      	mov	r0, r5
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	f000 fcc2 	bl	800267a <xQueueGenericCreate>
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	d0f2      	beq.n	8001ce2 <osSemaphoreCreate+0x1e>
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	4622      	mov	r2, r4
 8001d00:	4621      	mov	r1, r4
 8001d02:	f000 fcdf 	bl	80026c4 <xQueueGenericSend>
 8001d06:	e7ec      	b.n	8001ce2 <osSemaphoreCreate+0x1e>
      return NULL;
 8001d08:	2500      	movs	r5, #0
 8001d0a:	e7ea      	b.n	8001ce2 <osSemaphoreCreate+0x1e>
 8001d0c:	4625      	mov	r5, r4
 8001d0e:	e7e8      	b.n	8001ce2 <osSemaphoreCreate+0x1e>

08001d10 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001d10:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001d12:	2400      	movs	r4, #0
 8001d14:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001d16:	b1e0      	cbz	r0, 8001d52 <osSemaphoreWait+0x42>
 8001d18:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001d1c:	b1a3      	cbz	r3, 8001d48 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001d1e:	aa01      	add	r2, sp, #4
 8001d20:	4621      	mov	r1, r4
 8001d22:	f000 ffc3 	bl	8002cac <xQueueReceiveFromISR>
 8001d26:	2801      	cmp	r0, #1
 8001d28:	d002      	beq.n	8001d30 <osSemaphoreWait+0x20>
      return osErrorOS;
 8001d2a:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001d30:	9b01      	ldr	r3, [sp, #4]
 8001d32:	b13b      	cbz	r3, 8001d44 <osSemaphoreWait+0x34>
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <osSemaphoreWait+0x48>)
 8001d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	f3bf 8f6f 	isb	sy
  return osOK;
 8001d44:	2000      	movs	r0, #0
 8001d46:	e7f1      	b.n	8001d2c <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001d48:	f000 fef0 	bl	8002b2c <xQueueSemaphoreTake>
 8001d4c:	2801      	cmp	r0, #1
 8001d4e:	d1ec      	bne.n	8001d2a <osSemaphoreWait+0x1a>
 8001d50:	e7f8      	b.n	8001d44 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8001d52:	2080      	movs	r0, #128	; 0x80
 8001d54:	e7ea      	b.n	8001d2c <osSemaphoreWait+0x1c>
 8001d56:	bf00      	nop
 8001d58:	e000ed04 	.word	0xe000ed04

08001d5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001d5c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001d5e:	2400      	movs	r4, #0
 8001d60:	9401      	str	r4, [sp, #4]
 8001d62:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001d66:	b193      	cbz	r3, 8001d8e <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001d68:	a901      	add	r1, sp, #4
 8001d6a:	f000 fde6 	bl	800293a <xQueueGiveFromISR>
 8001d6e:	2801      	cmp	r0, #1
 8001d70:	d113      	bne.n	8001d9a <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001d72:	9b01      	ldr	r3, [sp, #4]
 8001d74:	b913      	cbnz	r3, 8001d7c <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001d76:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <osSemaphoreRelease+0x44>)
 8001d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	e7f3      	b.n	8001d76 <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	f000 fc97 	bl	80026c4 <xQueueGenericSend>
 8001d96:	2801      	cmp	r0, #1
 8001d98:	d0ed      	beq.n	8001d76 <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001d9a:	20ff      	movs	r0, #255	; 0xff
 8001d9c:	e7ec      	b.n	8001d78 <osSemaphoreRelease+0x1c>
 8001d9e:	bf00      	nop
 8001da0:	e000ed04 	.word	0xe000ed04

08001da4 <osMutexRelease>:
 8001da4:	f7ff bfda 	b.w	8001d5c <osSemaphoreRelease>

08001da8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001da8:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001daa:	6882      	ldr	r2, [r0, #8]
 8001dac:	b14a      	cbz	r2, 8001dc2 <osMessageCreate+0x1a>
 8001dae:	68c3      	ldr	r3, [r0, #12]
 8001db0:	b13b      	cbz	r3, 8001dc2 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001db2:	2100      	movs	r1, #0
 8001db4:	9100      	str	r1, [sp, #0]
 8001db6:	c803      	ldmia	r0, {r0, r1}
 8001db8:	f000 fc16 	bl	80025e8 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001dbc:	b003      	add	sp, #12
 8001dbe:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001dc2:	c803      	ldmia	r0, {r0, r1}
 8001dc4:	2200      	movs	r2, #0
}
 8001dc6:	b003      	add	sp, #12
 8001dc8:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001dcc:	f000 bc55 	b.w	800267a <xQueueGenericCreate>

08001dd0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8001dd2:	2400      	movs	r4, #0
{
 8001dd4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001dd6:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8001dd8:	42a2      	cmp	r2, r4
 8001dda:	bf08      	it	eq
 8001ddc:	2201      	moveq	r2, #1
 8001dde:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8001de2:	b1ab      	cbz	r3, 8001e10 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001de4:	4623      	mov	r3, r4
 8001de6:	aa03      	add	r2, sp, #12
 8001de8:	a901      	add	r1, sp, #4
 8001dea:	f000 fd44 	bl	8002876 <xQueueGenericSendFromISR>
 8001dee:	2801      	cmp	r0, #1
 8001df0:	d002      	beq.n	8001df8 <osMessagePut+0x28>
      return osErrorOS;
 8001df2:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8001df4:	b004      	add	sp, #16
 8001df6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001df8:	9b03      	ldr	r3, [sp, #12]
 8001dfa:	b13b      	cbz	r3, 8001e0c <osMessagePut+0x3c>
 8001dfc:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <osMessagePut+0x4c>)
 8001dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	f3bf 8f4f 	dsb	sy
 8001e08:	f3bf 8f6f 	isb	sy
  return osOK;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	e7f1      	b.n	8001df4 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001e10:	a901      	add	r1, sp, #4
 8001e12:	f000 fc57 	bl	80026c4 <xQueueGenericSend>
 8001e16:	2801      	cmp	r0, #1
 8001e18:	d1eb      	bne.n	8001df2 <osMessagePut+0x22>
 8001e1a:	e7f7      	b.n	8001e0c <osMessagePut+0x3c>
 8001e1c:	e000ed04 	.word	0xe000ed04

08001e20 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e22:	b085      	sub	sp, #20
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001e24:	2600      	movs	r6, #0
{
 8001e26:	4604      	mov	r4, r0
 8001e28:	4617      	mov	r7, r2
 8001e2a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001e2c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001e2e:	9602      	str	r6, [sp, #8]
 8001e30:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8001e32:	b911      	cbnz	r1, 8001e3a <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8001e34:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	e017      	b.n	8001e6a <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8001e3a:	9600      	str	r6, [sp, #0]
 8001e3c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001e40:	b1d3      	cbz	r3, 8001e78 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001e42:	466a      	mov	r2, sp
 8001e44:	a902      	add	r1, sp, #8
 8001e46:	f000 ff31 	bl	8002cac <xQueueReceiveFromISR>
 8001e4a:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8001e4c:	bf04      	itt	eq
 8001e4e:	2310      	moveq	r3, #16
 8001e50:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001e52:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8001e54:	bf18      	it	ne
 8001e56:	9601      	strne	r6, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001e58:	b13b      	cbz	r3, 8001e6a <osMessageGet+0x4a>
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	; (8001e90 <osMessageGet+0x70>)
 8001e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8001e6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001e72:	4620      	mov	r0, r4
 8001e74:	b005      	add	sp, #20
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001e78:	a902      	add	r1, sp, #8
 8001e7a:	f000 fdb3 	bl	80029e4 <xQueueReceive>
 8001e7e:	2801      	cmp	r0, #1
 8001e80:	d101      	bne.n	8001e86 <osMessageGet+0x66>
      event.status = osEventMessage;
 8001e82:	2310      	movs	r3, #16
 8001e84:	e7d7      	b.n	8001e36 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001e86:	2f00      	cmp	r7, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2300      	moveq	r3, #0
 8001e8c:	2340      	movne	r3, #64	; 0x40
 8001e8e:	e7d2      	b.n	8001e36 <osMessageGet+0x16>
 8001e90:	e000ed04 	.word	0xe000ed04

08001e94 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e94:	f100 0308 	add.w	r3, r0, #8
 8001e98:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e9a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e9e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ea0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ea2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ea4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ea6:	6003      	str	r3, [r0, #0]
 8001ea8:	4770      	bx	lr

08001eaa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	6103      	str	r3, [r0, #16]
 8001eae:	4770      	bx	lr

08001eb0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001eb0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001eb2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ebc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001ebe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ec0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	6003      	str	r3, [r0, #0]
 8001ec6:	4770      	bx	lr

08001ec8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ec8:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001eca:	1c53      	adds	r3, r2, #1
{
 8001ecc:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001ece:	d10a      	bne.n	8001ee6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ed0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ed6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ed8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001eda:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001edc:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ede:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	6003      	str	r3, [r0, #0]
 8001ee4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee6:	f100 0308 	add.w	r3, r0, #8
 8001eea:	685c      	ldr	r4, [r3, #4]
 8001eec:	6825      	ldr	r5, [r4, #0]
 8001eee:	42aa      	cmp	r2, r5
 8001ef0:	d3ef      	bcc.n	8001ed2 <vListInsert+0xa>
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	e7f9      	b.n	8001eea <vListInsert+0x22>

08001ef6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ef6:	6841      	ldr	r1, [r0, #4]
 8001ef8:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001efa:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001efc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001efe:	6882      	ldr	r2, [r0, #8]
 8001f00:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f06:	bf08      	it	eq
 8001f08:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	3a01      	subs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f14:	6818      	ldr	r0, [r3, #0]
}
 8001f16:	4770      	bx	lr

08001f18 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f18:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <prvTaskExitError+0x3c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	d008      	beq.n	8001f38 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2a:	f383 8811 	msr	BASEPRI, r3
 8001f2e:	f3bf 8f6f 	isb	sy
 8001f32:	f3bf 8f4f 	dsb	sy
 8001f36:	e7fe      	b.n	8001f36 <prvTaskExitError+0x1e>
 8001f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3c:	f383 8811 	msr	BASEPRI, r3
 8001f40:	f3bf 8f6f 	isb	sy
 8001f44:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f48:	9b01      	ldr	r3, [sp, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0fc      	beq.n	8001f48 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f4e:	b002      	add	sp, #8
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000008 	.word	0x20000008

08001f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <prvPortStartFirstTask+0x24>)
 8001f5a:	6800      	ldr	r0, [r0, #0]
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	f380 8808 	msr	MSP, r0
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f380 8814 	msr	CONTROL, r0
 8001f6a:	b662      	cpsie	i
 8001f6c:	b661      	cpsie	f
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	df00      	svc	0
 8001f78:	bf00      	nop
 8001f7a:	0000      	.short	0x0000
 8001f7c:	e000ed08 	.word	0xe000ed08

08001f80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001f80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001f90 <vPortEnableVFP+0x10>
 8001f84:	6801      	ldr	r1, [r0, #0]
 8001f86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001f8a:	6001      	str	r1, [r0, #0]
 8001f8c:	4770      	bx	lr
 8001f8e:	0000      	.short	0x0000
 8001f90:	e000ed88 	.word	0xe000ed88

08001f94 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f98:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <pxPortInitialiseStack+0x28>)
 8001f9e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001fa2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001fa6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001faa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001fae:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001fb2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001fb6:	3844      	subs	r0, #68	; 0x44
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	08001f19 	.word	0x08001f19

08001fc0 <SVC_Handler>:
	__asm volatile (
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <pxCurrentTCBConst2>)
 8001fc2:	6819      	ldr	r1, [r3, #0]
 8001fc4:	6808      	ldr	r0, [r1, #0]
 8001fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fca:	f380 8809 	msr	PSP, r0
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f04f 0000 	mov.w	r0, #0
 8001fd6:	f380 8811 	msr	BASEPRI, r0
 8001fda:	4770      	bx	lr
 8001fdc:	f3af 8000 	nop.w

08001fe0 <pxCurrentTCBConst2>:
 8001fe0:	200050b8 	.word	0x200050b8

08001fe4 <vPortEnterCritical>:
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	; (8002020 <vPortEnterCritical+0x3c>)
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001ffa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001ffc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001ffe:	d10d      	bne.n	800201c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <vPortEnterCritical+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002008:	d008      	beq.n	800201c <vPortEnterCritical+0x38>
 800200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	f3bf 8f4f 	dsb	sy
 800201a:	e7fe      	b.n	800201a <vPortEnterCritical+0x36>
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <vPortExitCritical+0x24>)
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	b943      	cbnz	r3, 8002040 <vPortExitCritical+0x18>
 800202e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	e7fe      	b.n	800203e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002040:	3b01      	subs	r3, #1
 8002042:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002044:	b90b      	cbnz	r3, 800204a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002046:	f383 8811 	msr	BASEPRI, r3
 800204a:	4770      	bx	lr
 800204c:	20000008 	.word	0x20000008

08002050 <PendSV_Handler>:
	__asm volatile
 8002050:	f3ef 8009 	mrs	r0, PSP
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <pxCurrentTCBConst>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	f01e 0f10 	tst.w	lr, #16
 8002060:	bf08      	it	eq
 8002062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206a:	6010      	str	r0, [r2, #0]
 800206c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002074:	f380 8811 	msr	BASEPRI, r0
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f001 f9a4 	bl	80033cc <vTaskSwitchContext>
 8002084:	f04f 0000 	mov.w	r0, #0
 8002088:	f380 8811 	msr	BASEPRI, r0
 800208c:	bc09      	pop	{r0, r3}
 800208e:	6819      	ldr	r1, [r3, #0]
 8002090:	6808      	ldr	r0, [r1, #0]
 8002092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002096:	f01e 0f10 	tst.w	lr, #16
 800209a:	bf08      	it	eq
 800209c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80020a0:	f380 8809 	msr	PSP, r0
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w

080020b0 <pxCurrentTCBConst>:
 80020b0:	200050b8 	.word	0x200050b8

080020b4 <SysTick_Handler>:
{
 80020b4:	b508      	push	{r3, lr}
	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80020c6:	f001 f853 	bl	8003170 <xTaskIncrementTick>
 80020ca:	b118      	cbz	r0, 80020d4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <SysTick_Handler+0x28>)
 80020ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80020d4:	2300      	movs	r3, #0
 80020d6:	f383 8811 	msr	BASEPRI, r3
 80020da:	bd08      	pop	{r3, pc}
 80020dc:	e000ed04 	.word	0xe000ed04

080020e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80020e0:	4a08      	ldr	r2, [pc, #32]	; (8002104 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020e2:	4909      	ldr	r1, [pc, #36]	; (8002108 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020e8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <vPortSetupTimerInterrupt+0x2c>)
 80020ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020f6:	4906      	ldr	r1, [pc, #24]	; (8002110 <vPortSetupTimerInterrupt+0x30>)
 80020f8:	3b01      	subs	r3, #1
 80020fa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020fc:	2307      	movs	r3, #7
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010
 8002108:	e000e018 	.word	0xe000e018
 800210c:	20000014 	.word	0x20000014
 8002110:	e000e014 	.word	0xe000e014

08002114 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002114:	4b39      	ldr	r3, [pc, #228]	; (80021fc <xPortStartScheduler+0xe8>)
 8002116:	4a3a      	ldr	r2, [pc, #232]	; (8002200 <xPortStartScheduler+0xec>)
{
 8002118:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	4291      	cmp	r1, r2
 800211e:	d108      	bne.n	8002132 <xPortStartScheduler+0x1e>
	__asm volatile
 8002120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002124:	f383 8811 	msr	BASEPRI, r3
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	f3bf 8f4f 	dsb	sy
 8002130:	e7fe      	b.n	8002130 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <xPortStartScheduler+0xf0>)
 8002136:	429a      	cmp	r2, r3
 8002138:	d108      	bne.n	800214c <xPortStartScheduler+0x38>
 800213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	e7fe      	b.n	800214a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <xPortStartScheduler+0xf4>)
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002158:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800215a:	4a2c      	ldr	r2, [pc, #176]	; (800220c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002162:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002166:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800216a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800216c:	4b28      	ldr	r3, [pc, #160]	; (8002210 <xPortStartScheduler+0xfc>)
 800216e:	2207      	movs	r2, #7
 8002170:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002172:	2100      	movs	r1, #0
 8002174:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002178:	0600      	lsls	r0, r0, #24
 800217a:	f102 34ff 	add.w	r4, r2, #4294967295
 800217e:	d40d      	bmi.n	800219c <xPortStartScheduler+0x88>
 8002180:	b101      	cbz	r1, 8002184 <xPortStartScheduler+0x70>
 8002182:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2a03      	cmp	r2, #3
 8002188:	d011      	beq.n	80021ae <xPortStartScheduler+0x9a>
 800218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	e7fe      	b.n	800219a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800219c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80021a0:	0052      	lsls	r2, r2, #1
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	f88d 2003 	strb.w	r2, [sp, #3]
 80021a8:	2101      	movs	r1, #1
 80021aa:	4622      	mov	r2, r4
 80021ac:	e7e2      	b.n	8002174 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021ae:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021b0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80021b4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80021b6:	9b01      	ldr	r3, [sp, #4]
 80021b8:	4a13      	ldr	r2, [pc, #76]	; (8002208 <xPortStartScheduler+0xf4>)
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <xPortStartScheduler+0x100>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80021c6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80021ce:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80021d0:	f7ff ff86 	bl	80020e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <xPortStartScheduler+0x104>)
 80021d6:	2400      	movs	r4, #0
 80021d8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80021da:	f7ff fed1 	bl	8001f80 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80021de:	4a0f      	ldr	r2, [pc, #60]	; (800221c <xPortStartScheduler+0x108>)
 80021e0:	6813      	ldr	r3, [r2, #0]
 80021e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80021e6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80021e8:	f7ff feb6 	bl	8001f58 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80021ec:	f001 f8ee 	bl	80033cc <vTaskSwitchContext>
	prvTaskExitError();
 80021f0:	f7ff fe92 	bl	8001f18 <prvTaskExitError>
}
 80021f4:	4620      	mov	r0, r4
 80021f6:	b002      	add	sp, #8
 80021f8:	bd10      	pop	{r4, pc}
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00
 8002200:	410fc271 	.word	0x410fc271
 8002204:	410fc270 	.word	0x410fc270
 8002208:	e000e400 	.word	0xe000e400
 800220c:	20000098 	.word	0x20000098
 8002210:	2000009c 	.word	0x2000009c
 8002214:	e000ed20 	.word	0xe000ed20
 8002218:	20000008 	.word	0x20000008
 800221c:	e000ef34 	.word	0xe000ef34

08002220 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002220:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d90e      	bls.n	8002246 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002228:	4a10      	ldr	r2, [pc, #64]	; (800226c <vPortValidateInterruptPriority+0x4c>)
 800222a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800222c:	4a10      	ldr	r2, [pc, #64]	; (8002270 <vPortValidateInterruptPriority+0x50>)
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d908      	bls.n	8002246 <vPortValidateInterruptPriority+0x26>
 8002234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	e7fe      	b.n	8002244 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <vPortValidateInterruptPriority+0x54>)
 8002248:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <vPortValidateInterruptPriority+0x58>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002252:	4293      	cmp	r3, r2
 8002254:	d908      	bls.n	8002268 <vPortValidateInterruptPriority+0x48>
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	e7fe      	b.n	8002266 <vPortValidateInterruptPriority+0x46>
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e3f0 	.word	0xe000e3f0
 8002270:	20000098 	.word	0x20000098
 8002274:	e000ed0c 	.word	0xe000ed0c
 8002278:	2000009c 	.word	0x2000009c

0800227c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800227c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <prvInsertBlockIntoFreeList+0x40>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4282      	cmp	r2, r0
 8002284:	d318      	bcc.n	80022b8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002286:	685c      	ldr	r4, [r3, #4]
 8002288:	1919      	adds	r1, r3, r4
 800228a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800228c:	bf01      	itttt	eq
 800228e:	6841      	ldreq	r1, [r0, #4]
 8002290:	4618      	moveq	r0, r3
 8002292:	1909      	addeq	r1, r1, r4
 8002294:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002296:	6844      	ldr	r4, [r0, #4]
 8002298:	1901      	adds	r1, r0, r4
 800229a:	428a      	cmp	r2, r1
 800229c:	d107      	bne.n	80022ae <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800229e:	4908      	ldr	r1, [pc, #32]	; (80022c0 <prvInsertBlockIntoFreeList+0x44>)
 80022a0:	6809      	ldr	r1, [r1, #0]
 80022a2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022a4:	bf1f      	itttt	ne
 80022a6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80022a8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80022aa:	1909      	addne	r1, r1, r4
 80022ac:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80022ae:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80022b0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80022b2:	bf18      	it	ne
 80022b4:	6018      	strne	r0, [r3, #0]
 80022b6:	bd10      	pop	{r4, pc}
 80022b8:	4613      	mov	r3, r2
 80022ba:	e7e1      	b.n	8002280 <prvInsertBlockIntoFreeList+0x4>
 80022bc:	200050b0 	.word	0x200050b0
 80022c0:	200000a0 	.word	0x200000a0

080022c4 <pvPortMalloc>:
{
 80022c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80022ca:	f000 ff3b 	bl	8003144 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80022ce:	493e      	ldr	r1, [pc, #248]	; (80023c8 <pvPortMalloc+0x104>)
 80022d0:	4d3e      	ldr	r5, [pc, #248]	; (80023cc <pvPortMalloc+0x108>)
 80022d2:	680b      	ldr	r3, [r1, #0]
 80022d4:	bb0b      	cbnz	r3, 800231a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80022d6:	4a3e      	ldr	r2, [pc, #248]	; (80023d0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80022d8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80022da:	bf1f      	itttt	ne
 80022dc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022de:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80022e2:	f502 43a0 	addne.w	r3, r2, #20480	; 0x5000
 80022e6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022e8:	bf14      	ite	ne
 80022ea:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80022ec:	f44f 43a0 	moveq.w	r3, #20480	; 0x5000
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80022f0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80022f2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80022f4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80022f8:	4e36      	ldr	r6, [pc, #216]	; (80023d4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80022fa:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80022fc:	2000      	movs	r0, #0
 80022fe:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002300:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002302:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002304:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002306:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002308:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800230c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800230e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <pvPortMalloc+0x118>)
 8002312:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002318:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800231a:	682f      	ldr	r7, [r5, #0]
 800231c:	4227      	tst	r7, r4
 800231e:	d116      	bne.n	800234e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002320:	2c00      	cmp	r4, #0
 8002322:	d041      	beq.n	80023a8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8002324:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002328:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800232a:	bf1c      	itt	ne
 800232c:	f023 0307 	bicne.w	r3, r3, #7
 8002330:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002332:	b163      	cbz	r3, 800234e <pvPortMalloc+0x8a>
 8002334:	4a29      	ldr	r2, [pc, #164]	; (80023dc <pvPortMalloc+0x118>)
 8002336:	6816      	ldr	r6, [r2, #0]
 8002338:	42b3      	cmp	r3, r6
 800233a:	4690      	mov	r8, r2
 800233c:	d807      	bhi.n	800234e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800233e:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <pvPortMalloc+0x110>)
 8002340:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002342:	6868      	ldr	r0, [r5, #4]
 8002344:	4283      	cmp	r3, r0
 8002346:	d804      	bhi.n	8002352 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002348:	6809      	ldr	r1, [r1, #0]
 800234a:	428d      	cmp	r5, r1
 800234c:	d107      	bne.n	800235e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800234e:	2400      	movs	r4, #0
 8002350:	e02a      	b.n	80023a8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002352:	682c      	ldr	r4, [r5, #0]
 8002354:	2c00      	cmp	r4, #0
 8002356:	d0f7      	beq.n	8002348 <pvPortMalloc+0x84>
 8002358:	462a      	mov	r2, r5
 800235a:	4625      	mov	r5, r4
 800235c:	e7f1      	b.n	8002342 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800235e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002360:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002362:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002364:	1ac2      	subs	r2, r0, r3
 8002366:	2a10      	cmp	r2, #16
 8002368:	d90f      	bls.n	800238a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800236a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800236c:	0741      	lsls	r1, r0, #29
 800236e:	d008      	beq.n	8002382 <pvPortMalloc+0xbe>
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	e7fe      	b.n	8002380 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002382:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002384:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002386:	f7ff ff79 	bl	800227c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800238a:	4913      	ldr	r1, [pc, #76]	; (80023d8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800238c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800238e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002390:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002392:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002394:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002396:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800239a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800239e:	bf38      	it	cc
 80023a0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80023a2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023a4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80023a6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80023a8:	f000 ff74 	bl	8003294 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023ac:	0763      	lsls	r3, r4, #29
 80023ae:	d008      	beq.n	80023c2 <pvPortMalloc+0xfe>
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	e7fe      	b.n	80023c0 <pvPortMalloc+0xfc>
}
 80023c2:	4620      	mov	r0, r4
 80023c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023c8:	200000a0 	.word	0x200000a0
 80023cc:	200050a4 	.word	0x200050a4
 80023d0:	200000a4 	.word	0x200000a4
 80023d4:	200050b0 	.word	0x200050b0
 80023d8:	200050ac 	.word	0x200050ac
 80023dc:	200050a8 	.word	0x200050a8

080023e0 <vPortFree>:
{
 80023e0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80023e2:	4604      	mov	r4, r0
 80023e4:	b370      	cbz	r0, 8002444 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80023e6:	4a18      	ldr	r2, [pc, #96]	; (8002448 <vPortFree+0x68>)
 80023e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	4213      	tst	r3, r2
 80023f0:	d108      	bne.n	8002404 <vPortFree+0x24>
 80023f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	e7fe      	b.n	8002402 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002404:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002408:	b141      	cbz	r1, 800241c <vPortFree+0x3c>
 800240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	e7fe      	b.n	800241a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800241c:	ea23 0302 	bic.w	r3, r3, r2
 8002420:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002424:	f000 fe8e 	bl	8003144 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002428:	4a08      	ldr	r2, [pc, #32]	; (800244c <vPortFree+0x6c>)
 800242a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800242e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002430:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002434:	440b      	add	r3, r1
 8002436:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002438:	f7ff ff20 	bl	800227c <prvInsertBlockIntoFreeList>
}
 800243c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002440:	f000 bf28 	b.w	8003294 <xTaskResumeAll>
 8002444:	bd10      	pop	{r4, pc}
 8002446:	bf00      	nop
 8002448:	200050a4 	.word	0x200050a4
 800244c:	200050a8 	.word	0x200050a8

08002450 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002450:	b510      	push	{r4, lr}
 8002452:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002454:	f7ff fdc6 	bl	8001fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002458:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800245a:	f7ff fde5 	bl	8002028 <vPortExitCritical>

	return xReturn;
}
 800245e:	fab4 f084 	clz	r0, r4
 8002462:	0940      	lsrs	r0, r0, #5
 8002464:	bd10      	pop	{r4, pc}

08002466 <prvCopyDataToQueue>:
{
 8002466:	b570      	push	{r4, r5, r6, lr}
 8002468:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800246a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800246c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800246e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002470:	b942      	cbnz	r2, 8002484 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002472:	6805      	ldr	r5, [r0, #0]
 8002474:	b99d      	cbnz	r5, 800249e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002476:	6840      	ldr	r0, [r0, #4]
 8002478:	f001 f8f0 	bl	800365c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800247c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800247e:	3601      	adds	r6, #1
 8002480:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002482:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002484:	b96d      	cbnz	r5, 80024a2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002486:	6880      	ldr	r0, [r0, #8]
 8002488:	f008 fa5d 	bl	800a946 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800248c:	68a3      	ldr	r3, [r4, #8]
 800248e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002490:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002492:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002494:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002496:	4293      	cmp	r3, r2
 8002498:	d301      	bcc.n	800249e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800249e:	2000      	movs	r0, #0
 80024a0:	e7ed      	b.n	800247e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a2:	68c0      	ldr	r0, [r0, #12]
 80024a4:	f008 fa4f 	bl	800a946 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024aa:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024ac:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024ae:	425b      	negs	r3, r3
 80024b0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80024b2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80024b4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80024b6:	bf3e      	ittt	cc
 80024b8:	6862      	ldrcc	r2, [r4, #4]
 80024ba:	189b      	addcc	r3, r3, r2
 80024bc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80024be:	2d02      	cmp	r5, #2
 80024c0:	d1ed      	bne.n	800249e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024c2:	b10e      	cbz	r6, 80024c8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80024c4:	3e01      	subs	r6, #1
 80024c6:	e7ea      	b.n	800249e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80024c8:	4630      	mov	r0, r6
 80024ca:	e7d8      	b.n	800247e <prvCopyDataToQueue+0x18>

080024cc <prvCopyDataFromQueue>:
{
 80024cc:	4603      	mov	r3, r0
 80024ce:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80024d2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024d4:	b162      	cbz	r2, 80024f0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024d6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024d8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024da:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024dc:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80024de:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80024e0:	bf24      	itt	cs
 80024e2:	6819      	ldrcs	r1, [r3, #0]
 80024e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024e6:	68d9      	ldr	r1, [r3, #12]
}
 80024e8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80024ec:	f008 ba2b 	b.w	800a946 <memcpy>
}
 80024f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <prvUnlockQueue>:
{
 80024f6:	b570      	push	{r4, r5, r6, lr}
 80024f8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80024fa:	f7ff fd73 	bl	8001fe4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80024fe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002502:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002506:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002508:	2d00      	cmp	r5, #0
 800250a:	dc14      	bgt.n	8002536 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800250c:	23ff      	movs	r3, #255	; 0xff
 800250e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002512:	f7ff fd89 	bl	8002028 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002516:	f7ff fd65 	bl	8001fe4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800251a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800251e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002522:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002524:	2d00      	cmp	r5, #0
 8002526:	dc12      	bgt.n	800254e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002528:	23ff      	movs	r3, #255	; 0xff
 800252a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800252e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002532:	f7ff bd79 	b.w	8002028 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002536:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0e7      	beq.n	800250c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800253c:	4630      	mov	r0, r6
 800253e:	f000 ff99 	bl	8003474 <xTaskRemoveFromEventList>
 8002542:	b108      	cbz	r0, 8002548 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002544:	f001 f820 	bl	8003588 <vTaskMissedYield>
 8002548:	3d01      	subs	r5, #1
 800254a:	b26d      	sxtb	r5, r5
 800254c:	e7dc      	b.n	8002508 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800254e:	6923      	ldr	r3, [r4, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0e9      	beq.n	8002528 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002554:	4630      	mov	r0, r6
 8002556:	f000 ff8d 	bl	8003474 <xTaskRemoveFromEventList>
 800255a:	b108      	cbz	r0, 8002560 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800255c:	f001 f814 	bl	8003588 <vTaskMissedYield>
 8002560:	3d01      	subs	r5, #1
 8002562:	b26d      	sxtb	r5, r5
 8002564:	e7de      	b.n	8002524 <prvUnlockQueue+0x2e>
	...

08002568 <xQueueGenericReset>:
{
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800256c:	4604      	mov	r4, r0
 800256e:	b940      	cbnz	r0, 8002582 <xQueueGenericReset+0x1a>
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	e7fe      	b.n	8002580 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002582:	f7ff fd2f 	bl	8001fe4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002586:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002588:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800258a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800258c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800258e:	4343      	muls	r3, r0
 8002590:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002592:	1a1b      	subs	r3, r3, r0
 8002594:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002596:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002598:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800259a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800259c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800259e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80025a0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80025a8:	b995      	cbnz	r5, 80025d0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	b163      	cbz	r3, 80025c8 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025ae:	f104 0010 	add.w	r0, r4, #16
 80025b2:	f000 ff5f 	bl	8003474 <xTaskRemoveFromEventList>
 80025b6:	b138      	cbz	r0, 80025c8 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <xQueueGenericReset+0x7c>)
 80025ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f3bf 8f4f 	dsb	sy
 80025c4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80025c8:	f7ff fd2e 	bl	8002028 <vPortExitCritical>
}
 80025cc:	2001      	movs	r0, #1
 80025ce:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025d0:	f104 0010 	add.w	r0, r4, #16
 80025d4:	f7ff fc5e 	bl	8001e94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80025dc:	f7ff fc5a 	bl	8001e94 <vListInitialise>
 80025e0:	e7f2      	b.n	80025c8 <xQueueGenericReset+0x60>
 80025e2:	bf00      	nop
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <xQueueGenericCreateStatic>:
	{
 80025e8:	b513      	push	{r0, r1, r4, lr}
 80025ea:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025ec:	b940      	cbnz	r0, 8002600 <xQueueGenericCreateStatic+0x18>
 80025ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f2:	f383 8811 	msr	BASEPRI, r3
 80025f6:	f3bf 8f6f 	isb	sy
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	e7fe      	b.n	80025fe <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8002600:	b943      	cbnz	r3, 8002614 <xQueueGenericCreateStatic+0x2c>
 8002602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	e7fe      	b.n	8002612 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002614:	b14a      	cbz	r2, 800262a <xQueueGenericCreateStatic+0x42>
 8002616:	b9d9      	cbnz	r1, 8002650 <xQueueGenericCreateStatic+0x68>
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	e7fe      	b.n	8002628 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800262a:	b189      	cbz	r1, 8002650 <xQueueGenericCreateStatic+0x68>
 800262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	e7fe      	b.n	800263c <xQueueGenericCreateStatic+0x54>
 800263e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002642:	f383 8811 	msr	BASEPRI, r3
 8002646:	f3bf 8f6f 	isb	sy
 800264a:	f3bf 8f4f 	dsb	sy
 800264e:	e7fe      	b.n	800264e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002650:	2348      	movs	r3, #72	; 0x48
 8002652:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002654:	9b01      	ldr	r3, [sp, #4]
 8002656:	2b48      	cmp	r3, #72	; 0x48
 8002658:	d1f1      	bne.n	800263e <xQueueGenericCreateStatic+0x56>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800265a:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800265c:	2900      	cmp	r1, #0
 800265e:	bf08      	it	eq
 8002660:	4622      	moveq	r2, r4
	pxNewQueue->uxLength = uxQueueLength;
 8002662:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002664:	6421      	str	r1, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002666:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800266a:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800266c:	4619      	mov	r1, r3
 800266e:	4620      	mov	r0, r4
 8002670:	f7ff ff7a 	bl	8002568 <xQueueGenericReset>
	}
 8002674:	4620      	mov	r0, r4
 8002676:	b002      	add	sp, #8
 8002678:	bd10      	pop	{r4, pc}

0800267a <xQueueGenericCreate>:
	{
 800267a:	b570      	push	{r4, r5, r6, lr}
 800267c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800267e:	4606      	mov	r6, r0
 8002680:	b940      	cbnz	r0, 8002694 <xQueueGenericCreate+0x1a>
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	e7fe      	b.n	8002692 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002694:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002696:	3048      	adds	r0, #72	; 0x48
 8002698:	f7ff fe14 	bl	80022c4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800269c:	4604      	mov	r4, r0
 800269e:	b150      	cbz	r0, 80026b6 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80026a6:	b945      	cbnz	r5, 80026ba <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026a8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80026aa:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026ac:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026ae:	2101      	movs	r1, #1
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff ff59 	bl	8002568 <xQueueGenericReset>
	}
 80026b6:	4620      	mov	r0, r4
 80026b8:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026ba:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026be:	6003      	str	r3, [r0, #0]
 80026c0:	e7f3      	b.n	80026aa <xQueueGenericCreate+0x30>
	...

080026c4 <xQueueGenericSend>:
{
 80026c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026c8:	4689      	mov	r9, r1
 80026ca:	9201      	str	r2, [sp, #4]
 80026cc:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026ce:	4604      	mov	r4, r0
 80026d0:	b940      	cbnz	r0, 80026e4 <xQueueGenericSend+0x20>
 80026d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	e7fe      	b.n	80026e2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026e4:	2900      	cmp	r1, #0
 80026e6:	f040 8088 	bne.w	80027fa <xQueueGenericSend+0x136>
 80026ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8084 	beq.w	80027fa <xQueueGenericSend+0x136>
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	e7fe      	b.n	8002702 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002704:	9e01      	ldr	r6, [sp, #4]
 8002706:	2e00      	cmp	r6, #0
 8002708:	f000 8082 	beq.w	8002810 <xQueueGenericSend+0x14c>
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	e7fe      	b.n	800271c <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800271e:	9d01      	ldr	r5, [sp, #4]
 8002720:	b91d      	cbnz	r5, 800272a <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8002722:	f7ff fc81 	bl	8002028 <vPortExitCritical>
			return errQUEUE_FULL;
 8002726:	2000      	movs	r0, #0
 8002728:	e058      	b.n	80027dc <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 800272a:	b916      	cbnz	r6, 8002732 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800272c:	a802      	add	r0, sp, #8
 800272e:	f000 fee3 	bl	80034f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002732:	f7ff fc79 	bl	8002028 <vPortExitCritical>
		vTaskSuspendAll();
 8002736:	f000 fd05 	bl	8003144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800273a:	f7ff fc53 	bl	8001fe4 <vPortEnterCritical>
 800273e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	bf08      	it	eq
 8002746:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800274a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	bf08      	it	eq
 8002752:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002756:	f7ff fc67 	bl	8002028 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800275a:	a901      	add	r1, sp, #4
 800275c:	a802      	add	r0, sp, #8
 800275e:	f000 fed7 	bl	8003510 <xTaskCheckForTimeOut>
 8002762:	2800      	cmp	r0, #0
 8002764:	d143      	bne.n	80027ee <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002766:	f7ff fc3d 	bl	8001fe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800276a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800276c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800276e:	f7ff fc5b 	bl	8002028 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002772:	42ae      	cmp	r6, r5
 8002774:	d135      	bne.n	80027e2 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002776:	9901      	ldr	r1, [sp, #4]
 8002778:	f104 0010 	add.w	r0, r4, #16
 800277c:	f000 fe60 	bl	8003440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff feb8 	bl	80024f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002786:	f000 fd85 	bl	8003294 <xTaskResumeAll>
 800278a:	b938      	cbnz	r0, 800279c <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 800278c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002790:	f8ca 3000 	str.w	r3, [sl]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
 800279c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800279e:	f7ff fc21 	bl	8001fe4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d301      	bcc.n	80027ae <xQueueGenericSend+0xea>
 80027aa:	2f02      	cmp	r7, #2
 80027ac:	d1b7      	bne.n	800271e <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027ae:	463a      	mov	r2, r7
 80027b0:	4649      	mov	r1, r9
 80027b2:	4620      	mov	r0, r4
 80027b4:	f7ff fe57 	bl	8002466 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ba:	b11b      	cbz	r3, 80027c4 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027c0:	f000 fe58 	bl	8003474 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80027c4:	b138      	cbz	r0, 80027d6 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <xQueueGenericSend+0x168>)
 80027c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027d6:	f7ff fc27 	bl	8002028 <vPortExitCritical>
				return pdPASS;
 80027da:	2001      	movs	r0, #1
}
 80027dc:	b004      	add	sp, #16
 80027de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fe87 	bl	80024f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027e8:	f000 fd54 	bl	8003294 <xTaskResumeAll>
 80027ec:	e7d6      	b.n	800279c <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80027ee:	4620      	mov	r0, r4
 80027f0:	f7ff fe81 	bl	80024f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027f4:	f000 fd4e 	bl	8003294 <xTaskResumeAll>
 80027f8:	e795      	b.n	8002726 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027fa:	2f02      	cmp	r7, #2
 80027fc:	d102      	bne.n	8002804 <xQueueGenericSend+0x140>
 80027fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10a      	bne.n	800281a <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002804:	f000 fec6 	bl	8003594 <xTaskGetSchedulerState>
 8002808:	2800      	cmp	r0, #0
 800280a:	f43f af7b 	beq.w	8002704 <xQueueGenericSend+0x40>
 800280e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002810:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8002814:	f8df a014 	ldr.w	sl, [pc, #20]	; 800282c <xQueueGenericSend+0x168>
 8002818:	e7c1      	b.n	800279e <xQueueGenericSend+0xda>
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	e7fe      	b.n	800282a <xQueueGenericSend+0x166>
 800282c:	e000ed04 	.word	0xe000ed04

08002830 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8002830:	b138      	cbz	r0, 8002842 <prvInitialiseMutex+0x12>
			pxNewQueue->pxMutexHolder = NULL;
 8002832:	2300      	movs	r3, #0
 8002834:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002836:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002838:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800283a:	461a      	mov	r2, r3
 800283c:	4619      	mov	r1, r3
 800283e:	f7ff bf41 	b.w	80026c4 <xQueueGenericSend>
 8002842:	4770      	bx	lr

08002844 <xQueueCreateMutex>:
	{
 8002844:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002846:	4602      	mov	r2, r0
 8002848:	2100      	movs	r1, #0
 800284a:	2001      	movs	r0, #1
 800284c:	f7ff ff15 	bl	800267a <xQueueGenericCreate>
 8002850:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8002852:	f7ff ffed 	bl	8002830 <prvInitialiseMutex>
	}
 8002856:	4620      	mov	r0, r4
 8002858:	bd10      	pop	{r4, pc}

0800285a <xQueueCreateMutexStatic>:
	{
 800285a:	b513      	push	{r0, r1, r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800285c:	2200      	movs	r2, #0
 800285e:	460b      	mov	r3, r1
 8002860:	9000      	str	r0, [sp, #0]
 8002862:	4611      	mov	r1, r2
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff febf 	bl	80025e8 <xQueueGenericCreateStatic>
 800286a:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 800286c:	f7ff ffe0 	bl	8002830 <prvInitialiseMutex>
	}
 8002870:	4620      	mov	r0, r4
 8002872:	b002      	add	sp, #8
 8002874:	bd10      	pop	{r4, pc}

08002876 <xQueueGenericSendFromISR>:
{
 8002876:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800287a:	4688      	mov	r8, r1
 800287c:	4691      	mov	r9, r2
 800287e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002880:	4604      	mov	r4, r0
 8002882:	b940      	cbnz	r0, 8002896 <xQueueGenericSendFromISR+0x20>
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	e7fe      	b.n	8002894 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002896:	bb09      	cbnz	r1, 80028dc <xQueueGenericSendFromISR+0x66>
 8002898:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800289a:	b1fb      	cbz	r3, 80028dc <xQueueGenericSendFromISR+0x66>
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028b2:	f000 fddf 	bl	8003474 <xTaskRemoveFromEventList>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d034      	beq.n	8002924 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 80028ba:	f1b9 0f00 	cmp.w	r9, #0
 80028be:	d031      	beq.n	8002924 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028c0:	2001      	movs	r0, #1
 80028c2:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80028c6:	f386 8811 	msr	BASEPRI, r6
}
 80028ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028ce:	3501      	adds	r5, #1
 80028d0:	b26d      	sxtb	r5, r5
 80028d2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80028d6:	e025      	b.n	8002924 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 80028d8:	2000      	movs	r0, #0
 80028da:	e7f4      	b.n	80028c6 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028dc:	2f02      	cmp	r7, #2
 80028de:	d102      	bne.n	80028e6 <xQueueGenericSendFromISR+0x70>
 80028e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d120      	bne.n	8002928 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028e6:	f7ff fc9b 	bl	8002220 <vPortValidateInterruptPriority>
	__asm volatile
 80028ea:	f3ef 8611 	mrs	r6, BASEPRI
 80028ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f2:	f383 8811 	msr	BASEPRI, r3
 80028f6:	f3bf 8f6f 	isb	sy
 80028fa:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002902:	429a      	cmp	r2, r3
 8002904:	d301      	bcc.n	800290a <xQueueGenericSendFromISR+0x94>
 8002906:	2f02      	cmp	r7, #2
 8002908:	d1e6      	bne.n	80028d8 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 800290a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800290e:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8002910:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002912:	4641      	mov	r1, r8
 8002914:	4620      	mov	r0, r4
 8002916:	f7ff fda6 	bl	8002466 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800291a:	1c6b      	adds	r3, r5, #1
 800291c:	d1d7      	bne.n	80028ce <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800291e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1c4      	bne.n	80028ae <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8002924:	2001      	movs	r0, #1
 8002926:	e7ce      	b.n	80028c6 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	e7fe      	b.n	8002938 <xQueueGenericSendFromISR+0xc2>

0800293a <xQueueGiveFromISR>:
{
 800293a:	b570      	push	{r4, r5, r6, lr}
 800293c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800293e:	4604      	mov	r4, r0
 8002940:	b940      	cbnz	r0, 8002954 <xQueueGiveFromISR+0x1a>
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	e7fe      	b.n	8002952 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002954:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002956:	b143      	cbz	r3, 800296a <xQueueGiveFromISR+0x30>
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	e7fe      	b.n	8002968 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800296a:	6803      	ldr	r3, [r0, #0]
 800296c:	b90b      	cbnz	r3, 8002972 <xQueueGiveFromISR+0x38>
 800296e:	6843      	ldr	r3, [r0, #4]
 8002970:	bb73      	cbnz	r3, 80029d0 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002972:	f7ff fc55 	bl	8002220 <vPortValidateInterruptPriority>
	__asm volatile
 8002976:	f3ef 8611 	mrs	r6, BASEPRI
 800297a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	f3bf 8f6f 	isb	sy
 8002986:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800298a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800298c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800298e:	429a      	cmp	r2, r3
 8002990:	d301      	bcc.n	8002996 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 8002992:	2000      	movs	r0, #0
 8002994:	e014      	b.n	80029c0 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002996:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800299a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800299c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800299e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	d110      	bne.n	80029c6 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029a6:	b90b      	cbnz	r3, 80029ac <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 80029a8:	2001      	movs	r0, #1
 80029aa:	e009      	b.n	80029c0 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029b0:	f000 fd60 	bl	8003474 <xTaskRemoveFromEventList>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	d0f7      	beq.n	80029a8 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 80029b8:	2d00      	cmp	r5, #0
 80029ba:	d0f5      	beq.n	80029a8 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80029bc:	2001      	movs	r0, #1
 80029be:	6028      	str	r0, [r5, #0]
	__asm volatile
 80029c0:	f386 8811 	msr	BASEPRI, r6
}
 80029c4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029c6:	3301      	adds	r3, #1
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029ce:	e7eb      	b.n	80029a8 <xQueueGiveFromISR+0x6e>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	e7fe      	b.n	80029e0 <xQueueGiveFromISR+0xa6>
	...

080029e4 <xQueueReceive>:
{
 80029e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029e8:	b085      	sub	sp, #20
 80029ea:	4688      	mov	r8, r1
 80029ec:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80029ee:	4604      	mov	r4, r0
 80029f0:	b940      	cbnz	r0, 8002a04 <xQueueReceive+0x20>
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	e7fe      	b.n	8002a02 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a04:	2900      	cmp	r1, #0
 8002a06:	f040 8086 	bne.w	8002b16 <xQueueReceive+0x132>
 8002a0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8082 	beq.w	8002b16 <xQueueReceive+0x132>
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	e7fe      	b.n	8002a22 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a24:	9e01      	ldr	r6, [sp, #4]
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	d07a      	beq.n	8002b20 <xQueueReceive+0x13c>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	e7fe      	b.n	8002a3a <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a3c:	9d01      	ldr	r5, [sp, #4]
 8002a3e:	b91d      	cbnz	r5, 8002a48 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8002a40:	f7ff faf2 	bl	8002028 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8002a44:	2000      	movs	r0, #0
 8002a46:	e052      	b.n	8002aee <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 8002a48:	b916      	cbnz	r6, 8002a50 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a4a:	a802      	add	r0, sp, #8
 8002a4c:	f000 fd54 	bl	80034f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002a50:	f7ff faea 	bl	8002028 <vPortExitCritical>
		vTaskSuspendAll();
 8002a54:	f000 fb76 	bl	8003144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a58:	f7ff fac4 	bl	8001fe4 <vPortEnterCritical>
 8002a5c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a60:	2bff      	cmp	r3, #255	; 0xff
 8002a62:	bf08      	it	eq
 8002a64:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002a68:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002a6c:	2bff      	cmp	r3, #255	; 0xff
 8002a6e:	bf08      	it	eq
 8002a70:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002a74:	f7ff fad8 	bl	8002028 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a78:	a901      	add	r1, sp, #4
 8002a7a:	a802      	add	r0, sp, #8
 8002a7c:	f000 fd48 	bl	8003510 <xTaskCheckForTimeOut>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d13d      	bne.n	8002b00 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fce3 	bl	8002450 <prvIsQueueEmpty>
 8002a8a:	b398      	cbz	r0, 8002af4 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a8c:	9901      	ldr	r1, [sp, #4]
 8002a8e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a92:	f000 fcd5 	bl	8003440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff fd2d 	bl	80024f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a9c:	f000 fbfa 	bl	8003294 <xTaskResumeAll>
 8002aa0:	b938      	cbnz	r0, 8002ab2 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8002aa2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002aa6:	f8c9 3000 	str.w	r3, [r9]
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002ab4:	f7ff fa96 	bl	8001fe4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	d0be      	beq.n	8002a3c <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002abe:	4641      	mov	r1, r8
 8002ac0:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ac2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ac4:	f7ff fd02 	bl	80024cc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ac8:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aca:	6923      	ldr	r3, [r4, #16]
 8002acc:	b163      	cbz	r3, 8002ae8 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ace:	f104 0010 	add.w	r0, r4, #16
 8002ad2:	f000 fccf 	bl	8003474 <xTaskRemoveFromEventList>
 8002ad6:	b138      	cbz	r0, 8002ae8 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <xQueueReceive+0x144>)
 8002ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f3bf 8f4f 	dsb	sy
 8002ae4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002ae8:	f7ff fa9e 	bl	8002028 <vPortExitCritical>
				return pdPASS;
 8002aec:	2001      	movs	r0, #1
}
 8002aee:	b005      	add	sp, #20
 8002af0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7ff fcfe 	bl	80024f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002afa:	f000 fbcb 	bl	8003294 <xTaskResumeAll>
 8002afe:	e7d8      	b.n	8002ab2 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8002b00:	4620      	mov	r0, r4
 8002b02:	f7ff fcf8 	bl	80024f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b06:	f000 fbc5 	bl	8003294 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7ff fca0 	bl	8002450 <prvIsQueueEmpty>
 8002b10:	2800      	cmp	r0, #0
 8002b12:	d0ce      	beq.n	8002ab2 <xQueueReceive+0xce>
 8002b14:	e796      	b.n	8002a44 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b16:	f000 fd3d 	bl	8003594 <xTaskGetSchedulerState>
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d082      	beq.n	8002a24 <xQueueReceive+0x40>
 8002b1e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002b20:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8002b22:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8002b28 <xQueueReceive+0x144>
 8002b26:	e7c5      	b.n	8002ab4 <xQueueReceive+0xd0>
 8002b28:	e000ed04 	.word	0xe000ed04

08002b2c <xQueueSemaphoreTake>:
{
 8002b2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8002b30:	4604      	mov	r4, r0
{
 8002b32:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002b34:	b940      	cbnz	r0, 8002b48 <xQueueSemaphoreTake+0x1c>
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	e7fe      	b.n	8002b46 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b48:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002b4a:	b145      	cbz	r5, 8002b5e <xQueueSemaphoreTake+0x32>
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	e7fe      	b.n	8002b5c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b5e:	f000 fd19 	bl	8003594 <xTaskGetSchedulerState>
 8002b62:	b918      	cbnz	r0, 8002b6c <xQueueSemaphoreTake+0x40>
 8002b64:	9d01      	ldr	r5, [sp, #4]
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	f040 8095 	bne.w	8002c96 <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8002b6c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002ca8 <xQueueSemaphoreTake+0x17c>
 8002b70:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8002b72:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8002b74:	f7ff fa36 	bl	8001fe4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002b7a:	b1e3      	cbz	r3, 8002bb6 <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	b913      	cbnz	r3, 8002b8a <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002b84:	f000 fe14 	bl	80037b0 <pvTaskIncrementMutexHeldCount>
 8002b88:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b8a:	6923      	ldr	r3, [r4, #16]
 8002b8c:	b163      	cbz	r3, 8002ba8 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b8e:	f104 0010 	add.w	r0, r4, #16
 8002b92:	f000 fc6f 	bl	8003474 <xTaskRemoveFromEventList>
 8002b96:	b138      	cbz	r0, 8002ba8 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8002b98:	4b43      	ldr	r3, [pc, #268]	; (8002ca8 <xQueueSemaphoreTake+0x17c>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002ba8:	f7ff fa3e 	bl	8002028 <vPortExitCritical>
				return pdPASS;
 8002bac:	2501      	movs	r5, #1
}
 8002bae:	4628      	mov	r0, r5
 8002bb0:	b004      	add	sp, #16
 8002bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bb6:	9b01      	ldr	r3, [sp, #4]
 8002bb8:	b963      	cbnz	r3, 8002bd4 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002bba:	b145      	cbz	r5, 8002bce <xQueueSemaphoreTake+0xa2>
 8002bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	e7fe      	b.n	8002bcc <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8002bce:	f7ff fa2b 	bl	8002028 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002bd2:	e7ec      	b.n	8002bae <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8002bd4:	b916      	cbnz	r6, 8002bdc <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bd6:	a802      	add	r0, sp, #8
 8002bd8:	f000 fc8e 	bl	80034f8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002bdc:	f7ff fa24 	bl	8002028 <vPortExitCritical>
		vTaskSuspendAll();
 8002be0:	f000 fab0 	bl	8003144 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002be4:	f7ff f9fe 	bl	8001fe4 <vPortEnterCritical>
 8002be8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002bec:	2bff      	cmp	r3, #255	; 0xff
 8002bee:	bf08      	it	eq
 8002bf0:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002bf4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002bf8:	2bff      	cmp	r3, #255	; 0xff
 8002bfa:	bf08      	it	eq
 8002bfc:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002c00:	f7ff fa12 	bl	8002028 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c04:	a901      	add	r1, sp, #4
 8002c06:	a802      	add	r0, sp, #8
 8002c08:	f000 fc82 	bl	8003510 <xTaskCheckForTimeOut>
 8002c0c:	bb40      	cbnz	r0, 8002c60 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7ff fc1e 	bl	8002450 <prvIsQueueEmpty>
 8002c14:	b1f0      	cbz	r0, 8002c54 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	b93b      	cbnz	r3, 8002c2a <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8002c1a:	f7ff f9e3 	bl	8001fe4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002c1e:	6860      	ldr	r0, [r4, #4]
 8002c20:	f000 fcc8 	bl	80035b4 <xTaskPriorityInherit>
 8002c24:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002c26:	f7ff f9ff 	bl	8002028 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c2a:	9901      	ldr	r1, [sp, #4]
 8002c2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c30:	f000 fc06 	bl	8003440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c34:	4620      	mov	r0, r4
 8002c36:	f7ff fc5e 	bl	80024f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c3a:	f000 fb2b 	bl	8003294 <xTaskResumeAll>
 8002c3e:	b938      	cbnz	r0, 8002c50 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8002c40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c44:	f8c8 3000 	str.w	r3, [r8]
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	2601      	movs	r6, #1
 8002c52:	e78f      	b.n	8002b74 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fc4e 	bl	80024f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c5a:	f000 fb1b 	bl	8003294 <xTaskResumeAll>
 8002c5e:	e7f7      	b.n	8002c50 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8002c60:	4620      	mov	r0, r4
 8002c62:	f7ff fc48 	bl	80024f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c66:	f000 fb15 	bl	8003294 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff fbf0 	bl	8002450 <prvIsQueueEmpty>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	d0ed      	beq.n	8002c50 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	d09a      	beq.n	8002bae <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8002c78:	f7ff f9b4 	bl	8001fe4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c7e:	b119      	cbz	r1, 8002c88 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002c88:	6860      	ldr	r0, [r4, #4]
 8002c8a:	f000 fd37 	bl	80036fc <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002c8e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002c90:	f7ff f9ca 	bl	8002028 <vPortExitCritical>
 8002c94:	e78b      	b.n	8002bae <xQueueSemaphoreTake+0x82>
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueSemaphoreTake+0x17a>
 8002ca8:	e000ed04 	.word	0xe000ed04

08002cac <xQueueReceiveFromISR>:
{
 8002cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cb0:	4689      	mov	r9, r1
 8002cb2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	b940      	cbnz	r0, 8002cca <xQueueReceiveFromISR+0x1e>
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cca:	bb71      	cbnz	r1, 8002d2a <xQueueReceiveFromISR+0x7e>
 8002ccc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002cce:	b363      	cbz	r3, 8002d2a <xQueueReceiveFromISR+0x7e>
 8002cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	e7fe      	b.n	8002ce0 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ce2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ce6:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ce8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cea:	4628      	mov	r0, r5
 8002cec:	f7ff fbee 	bl	80024cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cf0:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002cf2:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cf4:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002cf6:	d113      	bne.n	8002d20 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf8:	692b      	ldr	r3, [r5, #16]
 8002cfa:	b90b      	cbnz	r3, 8002d00 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	e00b      	b.n	8002d18 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d00:	f105 0010 	add.w	r0, r5, #16
 8002d04:	f000 fbb6 	bl	8003474 <xTaskRemoveFromEventList>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d0f7      	beq.n	8002cfc <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002d0c:	f1b8 0f00 	cmp.w	r8, #0
 8002d10:	d0f4      	beq.n	8002cfc <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d12:	2001      	movs	r0, #1
 8002d14:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002d18:	f387 8811 	msr	BASEPRI, r7
}
 8002d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d20:	3601      	adds	r6, #1
 8002d22:	b276      	sxtb	r6, r6
 8002d24:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002d28:	e7e8      	b.n	8002cfc <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d2a:	f7ff fa79 	bl	8002220 <vPortValidateInterruptPriority>
	__asm volatile
 8002d2e:	f3ef 8711 	mrs	r7, BASEPRI
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d42:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d44:	2c00      	cmp	r4, #0
 8002d46:	d1cc      	bne.n	8002ce2 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002d48:	4620      	mov	r0, r4
 8002d4a:	e7e5      	b.n	8002d18 <xQueueReceiveFromISR+0x6c>

08002d4c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d50:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d52:	f7ff f947 	bl	8001fe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002d58:	4c2d      	ldr	r4, [pc, #180]	; (8002e10 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4f2d      	ldr	r7, [pc, #180]	; (8002e14 <prvAddNewTaskToReadyList+0xc8>)
 8002d5e:	3201      	adds	r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002d62:	6825      	ldr	r5, [r4, #0]
 8002d64:	2d00      	cmp	r5, #0
 8002d66:	d145      	bne.n	8002df4 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d68:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d11c      	bne.n	8002daa <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d70:	1978      	adds	r0, r7, r5
 8002d72:	3514      	adds	r5, #20
 8002d74:	f7ff f88e 	bl	8001e94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d78:	2d8c      	cmp	r5, #140	; 0x8c
 8002d7a:	d1f9      	bne.n	8002d70 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002d7c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8002e40 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8002d80:	4d25      	ldr	r5, [pc, #148]	; (8002e18 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8002d82:	4640      	mov	r0, r8
 8002d84:	f7ff f886 	bl	8001e94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d88:	4628      	mov	r0, r5
 8002d8a:	f7ff f883 	bl	8001e94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d8e:	4823      	ldr	r0, [pc, #140]	; (8002e1c <prvAddNewTaskToReadyList+0xd0>)
 8002d90:	f7ff f880 	bl	8001e94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002d94:	4822      	ldr	r0, [pc, #136]	; (8002e20 <prvAddNewTaskToReadyList+0xd4>)
 8002d96:	f7ff f87d 	bl	8001e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002d9a:	4822      	ldr	r0, [pc, #136]	; (8002e24 <prvAddNewTaskToReadyList+0xd8>)
 8002d9c:	f7ff f87a 	bl	8001e94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <prvAddNewTaskToReadyList+0xdc>)
 8002da2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002da6:	4b21      	ldr	r3, [pc, #132]	; (8002e2c <prvAddNewTaskToReadyList+0xe0>)
 8002da8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8002dac:	4921      	ldr	r1, [pc, #132]	; (8002e34 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002dae:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002db0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002db2:	3301      	adds	r3, #1
 8002db4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002db6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8002db8:	2301      	movs	r3, #1
 8002dba:	4093      	lsls	r3, r2
 8002dbc:	4303      	orrs	r3, r0
 8002dbe:	2014      	movs	r0, #20
 8002dc0:	600b      	str	r3, [r1, #0]
 8002dc2:	fb00 7002 	mla	r0, r0, r2, r7
 8002dc6:	1d31      	adds	r1, r6, #4
 8002dc8:	f7ff f872 	bl	8001eb0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002dcc:	f7ff f92c 	bl	8002028 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <prvAddNewTaskToReadyList+0xec>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b163      	cbz	r3, 8002df0 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dda:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d207      	bcs.n	8002df0 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8002de0:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <prvAddNewTaskToReadyList+0xf0>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002df4:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <prvAddNewTaskToReadyList+0xec>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1d6      	bne.n	8002daa <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8002e02:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002e04:	bf98      	it	ls
 8002e06:	6026      	strls	r6, [r4, #0]
 8002e08:	e7cf      	b.n	8002daa <prvAddNewTaskToReadyList+0x5e>
 8002e0a:	bf00      	nop
 8002e0c:	20005150 	.word	0x20005150
 8002e10:	200050b8 	.word	0x200050b8
 8002e14:	200050c4 	.word	0x200050c4
 8002e18:	2000517c 	.word	0x2000517c
 8002e1c:	20005198 	.word	0x20005198
 8002e20:	200051c4 	.word	0x200051c4
 8002e24:	200051b0 	.word	0x200051b0
 8002e28:	200050bc 	.word	0x200050bc
 8002e2c:	200050c0 	.word	0x200050c0
 8002e30:	20005160 	.word	0x20005160
 8002e34:	20005164 	.word	0x20005164
 8002e38:	200051ac 	.word	0x200051ac
 8002e3c:	e000ed04 	.word	0xe000ed04
 8002e40:	20005168 	.word	0x20005168

08002e44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <prvResetNextTaskUnblockTime+0x1c>)
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	6819      	ldr	r1, [r3, #0]
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <prvResetNextTaskUnblockTime+0x20>)
 8002e4c:	b919      	cbnz	r1, 8002e56 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e5a:	68d2      	ldr	r2, [r2, #12]
 8002e5c:	6852      	ldr	r2, [r2, #4]
 8002e5e:	e7f8      	b.n	8002e52 <prvResetNextTaskUnblockTime+0xe>
 8002e60:	200050bc 	.word	0x200050bc
 8002e64:	20005190 	.word	0x20005190

08002e68 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002e6e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e72:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002e74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002e78:	3a01      	subs	r2, #1
 8002e7a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002e7e:	469a      	mov	sl, r3
 8002e80:	4681      	mov	r9, r0
 8002e82:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e84:	f026 0607 	bic.w	r6, r6, #7
 8002e88:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002e8c:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e8e:	7858      	ldrb	r0, [r3, #1]
 8002e90:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002e94:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002e98:	b108      	cbz	r0, 8002e9e <prvInitialiseNewTask.isra.2+0x36>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e9a:	428b      	cmp	r3, r1
 8002e9c:	d1f7      	bne.n	8002e8e <prvInitialiseNewTask.isra.2+0x26>
 8002e9e:	9d08      	ldr	r5, [sp, #32]
 8002ea0:	2d06      	cmp	r5, #6
 8002ea2:	bf28      	it	cs
 8002ea4:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ea6:	2700      	movs	r7, #0
	pxNewTCB->uxPriority = uxPriority;
 8002ea8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002eaa:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eac:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002eae:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002eb2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eb4:	f7fe fff9 	bl	8001eaa <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002eb8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ebc:	f104 0018 	add.w	r0, r4, #24
 8002ec0:	f7fe fff3 	bl	8001eaa <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ec4:	64e7      	str	r7, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ec6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ec8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002eca:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ecc:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ed0:	4652      	mov	r2, sl
 8002ed2:	4649      	mov	r1, r9
 8002ed4:	4630      	mov	r0, r6
 8002ed6:	f7ff f85d 	bl	8001f94 <pxPortInitialiseStack>
 8002eda:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002edc:	f1b8 0f00 	cmp.w	r8, #0
 8002ee0:	d001      	beq.n	8002ee6 <prvInitialiseNewTask.isra.2+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ee2:	f8c8 4000 	str.w	r4, [r8]
 8002ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002eea <prvDeleteTCB>:
	{
 8002eea:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002eec:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8002ef0:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ef2:	b93b      	cbnz	r3, 8002f04 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8002ef4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002ef6:	f7ff fa73 	bl	80023e0 <vPortFree>
				vPortFree( pxTCB );
 8002efa:	4620      	mov	r0, r4
	}
 8002efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002f00:	f7ff ba6e 	b.w	80023e0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d0f9      	beq.n	8002efc <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d008      	beq.n	8002f1e <prvDeleteTCB+0x34>
	__asm volatile
 8002f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f10:	f383 8811 	msr	BASEPRI, r3
 8002f14:	f3bf 8f6f 	isb	sy
 8002f18:	f3bf 8f4f 	dsb	sy
 8002f1c:	e7fe      	b.n	8002f1c <prvDeleteTCB+0x32>
 8002f1e:	bd10      	pop	{r4, pc}

08002f20 <prvIdleTask>:
{
 8002f20:	b580      	push	{r7, lr}
				taskYIELD();
 8002f22:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002f80 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f26:	4f12      	ldr	r7, [pc, #72]	; (8002f70 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f28:	4c12      	ldr	r4, [pc, #72]	; (8002f74 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002f2a:	4d13      	ldr	r5, [pc, #76]	; (8002f78 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	b963      	cbnz	r3, 8002f4a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <prvIdleTask+0x5c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d9f8      	bls.n	8002f2a <prvIdleTask+0xa>
				taskYIELD();
 8002f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f3c:	f8c8 3000 	str.w	r3, [r8]
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	e7ee      	b.n	8002f28 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002f4a:	f7ff f84b 	bl	8001fe4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f52:	1d30      	adds	r0, r6, #4
 8002f54:	f7fe ffcf 	bl	8001ef6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002f64:	f7ff f860 	bl	8002028 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002f68:	4630      	mov	r0, r6
 8002f6a:	f7ff ffbe 	bl	8002eea <prvDeleteTCB>
 8002f6e:	e7dd      	b.n	8002f2c <prvIdleTask+0xc>
 8002f70:	200051c4 	.word	0x200051c4
 8002f74:	20005154 	.word	0x20005154
 8002f78:	20005150 	.word	0x20005150
 8002f7c:	200050c4 	.word	0x200050c4
 8002f80:	e000ed04 	.word	0xe000ed04

08002f84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002f86:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f88:	4e1b      	ldr	r6, [pc, #108]	; (8002ff8 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002f8a:	681d      	ldr	r5, [r3, #0]
{
 8002f8c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f8e:	6830      	ldr	r0, [r6, #0]
 8002f90:	3004      	adds	r0, #4
{
 8002f92:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f94:	f7fe ffaf 	bl	8001ef6 <uxListRemove>
 8002f98:	4633      	mov	r3, r6
 8002f9a:	b940      	cbnz	r0, 8002fae <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002f9c:	6831      	ldr	r1, [r6, #0]
 8002f9e:	4e17      	ldr	r6, [pc, #92]	; (8002ffc <prvAddCurrentTaskToDelayedList+0x78>)
 8002fa0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002fa2:	6832      	ldr	r2, [r6, #0]
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	4088      	lsls	r0, r1
 8002fa8:	ea22 0200 	bic.w	r2, r2, r0
 8002fac:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fae:	1c62      	adds	r2, r4, #1
 8002fb0:	d107      	bne.n	8002fc2 <prvAddCurrentTaskToDelayedList+0x3e>
 8002fb2:	b137      	cbz	r7, 8002fc2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	4812      	ldr	r0, [pc, #72]	; (8003000 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002fb8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002fba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fbe:	f7fe bf77 	b.w	8001eb0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002fc2:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fc4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002fc6:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002fc8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002fca:	d907      	bls.n	8002fdc <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fcc:	4a0d      	ldr	r2, [pc, #52]	; (8003004 <prvAddCurrentTaskToDelayedList+0x80>)
 8002fce:	6810      	ldr	r0, [r2, #0]
 8002fd0:	6819      	ldr	r1, [r3, #0]
}
 8002fd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fd6:	3104      	adds	r1, #4
 8002fd8:	f7fe bf76 	b.w	8001ec8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fdc:	4a0a      	ldr	r2, [pc, #40]	; (8003008 <prvAddCurrentTaskToDelayedList+0x84>)
 8002fde:	6810      	ldr	r0, [r2, #0]
 8002fe0:	6819      	ldr	r1, [r3, #0]
 8002fe2:	3104      	adds	r1, #4
 8002fe4:	f7fe ff70 	bl	8001ec8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <prvAddCurrentTaskToDelayedList+0x88>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002fee:	bf38      	it	cc
 8002ff0:	601c      	strcc	r4, [r3, #0]
 8002ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ff4:	200051d8 	.word	0x200051d8
 8002ff8:	200050b8 	.word	0x200050b8
 8002ffc:	20005164 	.word	0x20005164
 8003000:	200051b0 	.word	0x200051b0
 8003004:	200050c0 	.word	0x200050c0
 8003008:	200050bc 	.word	0x200050bc
 800300c:	20005190 	.word	0x20005190

08003010 <xTaskCreateStatic>:
	{
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003016:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8003018:	b945      	cbnz	r5, 800302c <xTaskCreateStatic+0x1c>
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	e7fe      	b.n	800302a <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800302c:	b944      	cbnz	r4, 8003040 <xTaskCreateStatic+0x30>
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	e7fe      	b.n	800303e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003040:	2654      	movs	r6, #84	; 0x54
 8003042:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003044:	9e04      	ldr	r6, [sp, #16]
 8003046:	2e54      	cmp	r6, #84	; 0x54
 8003048:	d008      	beq.n	800305c <xTaskCreateStatic+0x4c>
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	e7fe      	b.n	800305a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800305c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800305e:	2502      	movs	r5, #2
 8003060:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003064:	ad05      	add	r5, sp, #20
 8003066:	9501      	str	r5, [sp, #4]
 8003068:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800306a:	9402      	str	r4, [sp, #8]
 800306c:	9500      	str	r5, [sp, #0]
 800306e:	f7ff fefb 	bl	8002e68 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff fe6a 	bl	8002d4c <prvAddNewTaskToReadyList>
	}
 8003078:	9805      	ldr	r0, [sp, #20]
 800307a:	b006      	add	sp, #24
 800307c:	bd70      	pop	{r4, r5, r6, pc}

0800307e <xTaskCreate>:
	{
 800307e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003082:	4607      	mov	r7, r0
 8003084:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003086:	0090      	lsls	r0, r2, #2
	{
 8003088:	4688      	mov	r8, r1
 800308a:	4616      	mov	r6, r2
 800308c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800308e:	f7ff f919 	bl	80022c4 <pvPortMalloc>
			if( pxStack != NULL )
 8003092:	4605      	mov	r5, r0
 8003094:	b1e8      	cbz	r0, 80030d2 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003096:	2054      	movs	r0, #84	; 0x54
 8003098:	f7ff f914 	bl	80022c4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800309c:	4604      	mov	r4, r0
 800309e:	b1a8      	cbz	r0, 80030cc <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80030a8:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030ae:	9002      	str	r0, [sp, #8]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	4632      	mov	r2, r6
 80030b4:	464b      	mov	r3, r9
 80030b6:	4641      	mov	r1, r8
 80030b8:	4638      	mov	r0, r7
 80030ba:	f7ff fed5 	bl	8002e68 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff fe44 	bl	8002d4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030c4:	2001      	movs	r0, #1
	}
 80030c6:	b005      	add	sp, #20
 80030c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80030cc:	4628      	mov	r0, r5
 80030ce:	f7ff f987 	bl	80023e0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030d2:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 80030d6:	e7f6      	b.n	80030c6 <xTaskCreate+0x48>

080030d8 <vTaskStartScheduler>:
{
 80030d8:	b510      	push	{r4, lr}
 80030da:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030dc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030de:	aa07      	add	r2, sp, #28
 80030e0:	a906      	add	r1, sp, #24
 80030e2:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030e4:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030e6:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030e8:	f006 ff24 	bl	8009f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80030ec:	9b05      	ldr	r3, [sp, #20]
 80030ee:	9302      	str	r3, [sp, #8]
 80030f0:	9b06      	ldr	r3, [sp, #24]
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	9400      	str	r4, [sp, #0]
 80030f6:	4623      	mov	r3, r4
 80030f8:	9a07      	ldr	r2, [sp, #28]
 80030fa:	490d      	ldr	r1, [pc, #52]	; (8003130 <vTaskStartScheduler+0x58>)
 80030fc:	480d      	ldr	r0, [pc, #52]	; (8003134 <vTaskStartScheduler+0x5c>)
 80030fe:	f7ff ff87 	bl	8003010 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003102:	b190      	cbz	r0, 800312a <vTaskStartScheduler+0x52>
 8003104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003108:	f383 8811 	msr	BASEPRI, r3
 800310c:	f3bf 8f6f 	isb	sy
 8003110:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <vTaskStartScheduler+0x60>)
 8003116:	f04f 32ff 	mov.w	r2, #4294967295
 800311a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <vTaskStartScheduler+0x64>)
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <vTaskStartScheduler+0x68>)
 8003124:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8003126:	f7fe fff5 	bl	8002114 <xPortStartScheduler>
}
 800312a:	b008      	add	sp, #32
 800312c:	bd10      	pop	{r4, pc}
 800312e:	bf00      	nop
 8003130:	0800bb54 	.word	0x0800bb54
 8003134:	08002f21 	.word	0x08002f21
 8003138:	20005190 	.word	0x20005190
 800313c:	200051ac 	.word	0x200051ac
 8003140:	200051d8 	.word	0x200051d8

08003144 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003144:	4a02      	ldr	r2, [pc, #8]	; (8003150 <vTaskSuspendAll+0xc>)
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	2000515c 	.word	0x2000515c

08003154 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003154:	4b01      	ldr	r3, [pc, #4]	; (800315c <xTaskGetTickCount+0x8>)
 8003156:	6818      	ldr	r0, [r3, #0]
}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	200051d8 	.word	0x200051d8

08003160 <xTaskGetTickCountFromISR>:
{
 8003160:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003162:	f7ff f85d 	bl	8002220 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003166:	4b01      	ldr	r3, [pc, #4]	; (800316c <xTaskGetTickCountFromISR+0xc>)
 8003168:	6818      	ldr	r0, [r3, #0]
}
 800316a:	bd08      	pop	{r3, pc}
 800316c:	200051d8 	.word	0x200051d8

08003170 <xTaskIncrementTick>:
{
 8003170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003174:	4b3c      	ldr	r3, [pc, #240]	; (8003268 <xTaskIncrementTick+0xf8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d153      	bne.n	8003224 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800317c:	4b3b      	ldr	r3, [pc, #236]	; (800326c <xTaskIncrementTick+0xfc>)
 800317e:	681c      	ldr	r4, [r3, #0]
 8003180:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003182:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003184:	b9bc      	cbnz	r4, 80031b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <xTaskIncrementTick+0x100>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	b142      	cbz	r2, 80031a0 <xTaskIncrementTick+0x30>
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	e7fe      	b.n	800319e <xTaskIncrementTick+0x2e>
 80031a0:	4a34      	ldr	r2, [pc, #208]	; (8003274 <xTaskIncrementTick+0x104>)
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	6810      	ldr	r0, [r2, #0]
 80031a6:	6018      	str	r0, [r3, #0]
 80031a8:	6011      	str	r1, [r2, #0]
 80031aa:	4a33      	ldr	r2, [pc, #204]	; (8003278 <xTaskIncrementTick+0x108>)
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	3301      	adds	r3, #1
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	f7ff fe47 	bl	8002e44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031b6:	4d31      	ldr	r5, [pc, #196]	; (800327c <xTaskIncrementTick+0x10c>)
 80031b8:	4f31      	ldr	r7, [pc, #196]	; (8003280 <xTaskIncrementTick+0x110>)
 80031ba:	682b      	ldr	r3, [r5, #0]
 80031bc:	429c      	cmp	r4, r3
 80031be:	f04f 0b00 	mov.w	fp, #0
 80031c2:	d33e      	bcc.n	8003242 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003270 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80031c8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003290 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031cc:	f8d8 2000 	ldr.w	r2, [r8]
 80031d0:	6812      	ldr	r2, [r2, #0]
 80031d2:	bb72      	cbnz	r2, 8003232 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d4:	f04f 32ff 	mov.w	r2, #4294967295
 80031d8:	602a      	str	r2, [r5, #0]
					break;
 80031da:	e032      	b.n	8003242 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031dc:	f106 0a04 	add.w	sl, r6, #4
 80031e0:	4650      	mov	r0, sl
 80031e2:	f7fe fe88 	bl	8001ef6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031e6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80031e8:	b119      	cbz	r1, 80031f2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031ea:	f106 0018 	add.w	r0, r6, #24
 80031ee:	f7fe fe82 	bl	8001ef6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031f2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80031f4:	f8d9 3000 	ldr.w	r3, [r9]
 80031f8:	2201      	movs	r2, #1
 80031fa:	fa02 f100 	lsl.w	r1, r2, r0
 80031fe:	4319      	orrs	r1, r3
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <xTaskIncrementTick+0x114>)
 8003202:	f8c9 1000 	str.w	r1, [r9]
 8003206:	f04f 0e14 	mov.w	lr, #20
 800320a:	4651      	mov	r1, sl
 800320c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003210:	f7fe fe4e 	bl	8001eb0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003218:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800321a:	4291      	cmp	r1, r2
 800321c:	bf28      	it	cs
 800321e:	f04f 0b01 	movcs.w	fp, #1
 8003222:	e7d3      	b.n	80031cc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <xTaskIncrementTick+0x118>)
 8003226:	6813      	ldr	r3, [r2, #0]
 8003228:	3301      	adds	r3, #1
 800322a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800322c:	f04f 0b00 	mov.w	fp, #0
 8003230:	e011      	b.n	8003256 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003232:	f8d8 2000 	ldr.w	r2, [r8]
 8003236:	68d2      	ldr	r2, [r2, #12]
 8003238:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800323a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800323c:	428c      	cmp	r4, r1
 800323e:	d2cd      	bcs.n	80031dc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003240:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <xTaskIncrementTick+0x114>)
 8003246:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003248:	2214      	movs	r2, #20
 800324a:	434a      	muls	r2, r1
 800324c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800324e:	2a02      	cmp	r2, #2
 8003250:	bf28      	it	cs
 8003252:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003256:	4a0d      	ldr	r2, [pc, #52]	; (800328c <xTaskIncrementTick+0x11c>)
 8003258:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800325a:	2a00      	cmp	r2, #0
 800325c:	bf18      	it	ne
 800325e:	f04f 0b01 	movne.w	fp, #1
}
 8003262:	4658      	mov	r0, fp
 8003264:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003268:	2000515c 	.word	0x2000515c
 800326c:	200051d8 	.word	0x200051d8
 8003270:	200050bc 	.word	0x200050bc
 8003274:	200050c0 	.word	0x200050c0
 8003278:	20005194 	.word	0x20005194
 800327c:	20005190 	.word	0x20005190
 8003280:	200050b8 	.word	0x200050b8
 8003284:	200050c4 	.word	0x200050c4
 8003288:	20005158 	.word	0x20005158
 800328c:	200051dc 	.word	0x200051dc
 8003290:	20005164 	.word	0x20005164

08003294 <xTaskResumeAll>:
{
 8003294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003298:	4c31      	ldr	r4, [pc, #196]	; (8003360 <xTaskResumeAll+0xcc>)
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	b943      	cbnz	r3, 80032b0 <xTaskResumeAll+0x1c>
 800329e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a2:	f383 8811 	msr	BASEPRI, r3
 80032a6:	f3bf 8f6f 	isb	sy
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	e7fe      	b.n	80032ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80032b0:	f7fe fe98 	bl	8001fe4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ba:	6824      	ldr	r4, [r4, #0]
 80032bc:	b12c      	cbz	r4, 80032ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80032be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80032c0:	f7fe feb2 	bl	8002028 <vPortExitCritical>
}
 80032c4:	4620      	mov	r0, r4
 80032c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ca:	4b26      	ldr	r3, [pc, #152]	; (8003364 <xTaskResumeAll+0xd0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f5      	beq.n	80032be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032d2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800337c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80032d6:	4f24      	ldr	r7, [pc, #144]	; (8003368 <xTaskResumeAll+0xd4>)
 80032d8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003380 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032dc:	f8d9 3000 	ldr.w	r3, [r9]
 80032e0:	b9e3      	cbnz	r3, 800331c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80032e2:	b10c      	cbz	r4, 80032e8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80032e4:	f7ff fdae 	bl	8002e44 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032e8:	4d20      	ldr	r5, [pc, #128]	; (800336c <xTaskResumeAll+0xd8>)
 80032ea:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032ec:	b144      	cbz	r4, 8003300 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80032ee:	4e20      	ldr	r6, [pc, #128]	; (8003370 <xTaskResumeAll+0xdc>)
 80032f0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80032f2:	f7ff ff3d 	bl	8003170 <xTaskIncrementTick>
 80032f6:	b100      	cbz	r0, 80032fa <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80032f8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80032fa:	3c01      	subs	r4, #1
 80032fc:	d1f9      	bne.n	80032f2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80032fe:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <xTaskResumeAll+0xdc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0da      	beq.n	80032be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003308:	4b1a      	ldr	r3, [pc, #104]	; (8003374 <xTaskResumeAll+0xe0>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003318:	2401      	movs	r4, #1
 800331a:	e7d1      	b.n	80032c0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800331c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003320:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003322:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003324:	f104 0018 	add.w	r0, r4, #24
 8003328:	f7fe fde5 	bl	8001ef6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800332c:	4630      	mov	r0, r6
 800332e:	f7fe fde2 	bl	8001ef6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003332:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	2501      	movs	r5, #1
 8003338:	fa05 f302 	lsl.w	r3, r5, r2
 800333c:	2014      	movs	r0, #20
 800333e:	430b      	orrs	r3, r1
 8003340:	fb00 8002 	mla	r0, r0, r2, r8
 8003344:	4631      	mov	r1, r6
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	f7fe fdb2 	bl	8001eb0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <xTaskResumeAll+0xe4>)
 800334e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003356:	bf24      	itt	cs
 8003358:	4b05      	ldrcs	r3, [pc, #20]	; (8003370 <xTaskResumeAll+0xdc>)
 800335a:	601d      	strcs	r5, [r3, #0]
 800335c:	e7be      	b.n	80032dc <xTaskResumeAll+0x48>
 800335e:	bf00      	nop
 8003360:	2000515c 	.word	0x2000515c
 8003364:	20005150 	.word	0x20005150
 8003368:	20005164 	.word	0x20005164
 800336c:	20005158 	.word	0x20005158
 8003370:	200051dc 	.word	0x200051dc
 8003374:	e000ed04 	.word	0xe000ed04
 8003378:	200050b8 	.word	0x200050b8
 800337c:	20005198 	.word	0x20005198
 8003380:	200050c4 	.word	0x200050c4

08003384 <vTaskDelay>:
	{
 8003384:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003386:	b940      	cbnz	r0, 800339a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <vTaskDelay+0x40>)
 800338a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <vTaskDelay+0x44>)
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	b141      	cbz	r1, 80033b2 <vTaskDelay+0x2e>
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	e7fe      	b.n	80033b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033b2:	f7ff fec7 	bl	8003144 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033b6:	f7ff fde5 	bl	8002f84 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80033ba:	f7ff ff6b 	bl	8003294 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80033be:	2800      	cmp	r0, #0
 80033c0:	d0e2      	beq.n	8003388 <vTaskDelay+0x4>
 80033c2:	bd08      	pop	{r3, pc}
 80033c4:	e000ed04 	.word	0xe000ed04
 80033c8:	2000515c 	.word	0x2000515c

080033cc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033cc:	4b17      	ldr	r3, [pc, #92]	; (800342c <vTaskSwitchContext+0x60>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <vTaskSwitchContext+0x64>)
{
 80033d2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033d4:	b112      	cbz	r2, 80033dc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80033d6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80033dc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <vTaskSwitchContext+0x68>)
 80033e0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f1c3 031f 	rsb	r3, r3, #31
 80033ec:	2214      	movs	r2, #20
 80033ee:	4912      	ldr	r1, [pc, #72]	; (8003438 <vTaskSwitchContext+0x6c>)
 80033f0:	435a      	muls	r2, r3
 80033f2:	1888      	adds	r0, r1, r2
 80033f4:	588c      	ldr	r4, [r1, r2]
 80033f6:	b944      	cbnz	r4, 800340a <vTaskSwitchContext+0x3e>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	e7fe      	b.n	8003408 <vTaskSwitchContext+0x3c>
 800340a:	6844      	ldr	r4, [r0, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	6864      	ldr	r4, [r4, #4]
 8003410:	6044      	str	r4, [r0, #4]
 8003412:	440a      	add	r2, r1
 8003414:	4294      	cmp	r4, r2
 8003416:	bf04      	itt	eq
 8003418:	6862      	ldreq	r2, [r4, #4]
 800341a:	6042      	streq	r2, [r0, #4]
 800341c:	2214      	movs	r2, #20
 800341e:	fb02 1303 	mla	r3, r2, r3, r1
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <vTaskSwitchContext+0x70>)
 8003428:	e7d6      	b.n	80033d8 <vTaskSwitchContext+0xc>
 800342a:	bf00      	nop
 800342c:	2000515c 	.word	0x2000515c
 8003430:	200051dc 	.word	0x200051dc
 8003434:	20005164 	.word	0x20005164
 8003438:	200050c4 	.word	0x200050c4
 800343c:	200050b8 	.word	0x200050b8

08003440 <vTaskPlaceOnEventList>:
{
 8003440:	b510      	push	{r4, lr}
 8003442:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003444:	b940      	cbnz	r0, 8003458 <vTaskPlaceOnEventList+0x18>
 8003446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	e7fe      	b.n	8003456 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <vTaskPlaceOnEventList+0x30>)
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	3118      	adds	r1, #24
 800345e:	f7fe fd33 	bl	8001ec8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003462:	4620      	mov	r0, r4
 8003464:	2101      	movs	r1, #1
}
 8003466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800346a:	f7ff bd8b 	b.w	8002f84 <prvAddCurrentTaskToDelayedList>
 800346e:	bf00      	nop
 8003470:	200050b8 	.word	0x200050b8

08003474 <xTaskRemoveFromEventList>:
{
 8003474:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003476:	68c3      	ldr	r3, [r0, #12]
 8003478:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800347a:	b944      	cbnz	r4, 800348e <xTaskRemoveFromEventList+0x1a>
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	e7fe      	b.n	800348c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800348e:	f104 0518 	add.w	r5, r4, #24
 8003492:	4628      	mov	r0, r5
 8003494:	f7fe fd2f 	bl	8001ef6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <xTaskRemoveFromEventList+0x6c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b9e3      	cbnz	r3, 80034d8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800349e:	1d25      	adds	r5, r4, #4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f7fe fd28 	bl	8001ef6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034a6:	490f      	ldr	r1, [pc, #60]	; (80034e4 <xTaskRemoveFromEventList+0x70>)
 80034a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034aa:	6808      	ldr	r0, [r1, #0]
 80034ac:	2301      	movs	r3, #1
 80034ae:	4093      	lsls	r3, r2
 80034b0:	4303      	orrs	r3, r0
 80034b2:	600b      	str	r3, [r1, #0]
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <xTaskRemoveFromEventList+0x74>)
 80034b6:	2014      	movs	r0, #20
 80034b8:	4629      	mov	r1, r5
 80034ba:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034be:	f7fe fcf7 	bl	8001eb0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <xTaskRemoveFromEventList+0x78>)
 80034c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80034cc:	bf83      	ittte	hi
 80034ce:	4b08      	ldrhi	r3, [pc, #32]	; (80034f0 <xTaskRemoveFromEventList+0x7c>)
 80034d0:	2001      	movhi	r0, #1
 80034d2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80034d4:	2000      	movls	r0, #0
}
 80034d6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034d8:	4629      	mov	r1, r5
 80034da:	4806      	ldr	r0, [pc, #24]	; (80034f4 <xTaskRemoveFromEventList+0x80>)
 80034dc:	e7ef      	b.n	80034be <xTaskRemoveFromEventList+0x4a>
 80034de:	bf00      	nop
 80034e0:	2000515c 	.word	0x2000515c
 80034e4:	20005164 	.word	0x20005164
 80034e8:	200050c4 	.word	0x200050c4
 80034ec:	200050b8 	.word	0x200050b8
 80034f0:	200051dc 	.word	0x200051dc
 80034f4:	20005198 	.word	0x20005198

080034f8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <vTaskInternalSetTimeOutState+0x10>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034fe:	4b03      	ldr	r3, [pc, #12]	; (800350c <vTaskInternalSetTimeOutState+0x14>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6043      	str	r3, [r0, #4]
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20005194 	.word	0x20005194
 800350c:	200051d8 	.word	0x200051d8

08003510 <xTaskCheckForTimeOut>:
{
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003514:	4605      	mov	r5, r0
 8003516:	b940      	cbnz	r0, 800352a <xTaskCheckForTimeOut+0x1a>
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	e7fe      	b.n	8003528 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800352a:	b941      	cbnz	r1, 800353e <xTaskCheckForTimeOut+0x2e>
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	e7fe      	b.n	800353c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800353e:	f7fe fd51 	bl	8001fe4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003542:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003544:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003546:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	1c58      	adds	r0, r3, #1
 800354c:	d00e      	beq.n	800356c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354e:	480d      	ldr	r0, [pc, #52]	; (8003584 <xTaskCheckForTimeOut+0x74>)
 8003550:	682e      	ldr	r6, [r5, #0]
 8003552:	6800      	ldr	r0, [r0, #0]
 8003554:	4286      	cmp	r6, r0
 8003556:	d001      	beq.n	800355c <xTaskCheckForTimeOut+0x4c>
 8003558:	428a      	cmp	r2, r1
 800355a:	d20e      	bcs.n	800357a <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800355c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800355e:	429a      	cmp	r2, r3
 8003560:	d209      	bcs.n	8003576 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003566:	4628      	mov	r0, r5
 8003568:	f7ff ffc6 	bl	80034f8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800356c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800356e:	f7fe fd5b 	bl	8002028 <vPortExitCritical>
}
 8003572:	4620      	mov	r0, r4
 8003574:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800357a:	2401      	movs	r4, #1
 800357c:	e7f7      	b.n	800356e <xTaskCheckForTimeOut+0x5e>
 800357e:	bf00      	nop
 8003580:	200051d8 	.word	0x200051d8
 8003584:	20005194 	.word	0x20005194

08003588 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003588:	4b01      	ldr	r3, [pc, #4]	; (8003590 <vTaskMissedYield+0x8>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	4770      	bx	lr
 8003590:	200051dc 	.word	0x200051dc

08003594 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <xTaskGetSchedulerState+0x18>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	b133      	cbz	r3, 80035a8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <xTaskGetSchedulerState+0x1c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80035a0:	bf0c      	ite	eq
 80035a2:	2002      	moveq	r0, #2
 80035a4:	2000      	movne	r0, #0
 80035a6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035a8:	2001      	movs	r0, #1
	}
 80035aa:	4770      	bx	lr
 80035ac:	200051ac 	.word	0x200051ac
 80035b0:	2000515c 	.word	0x2000515c

080035b4 <xTaskPriorityInherit>:
	{
 80035b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80035b8:	4604      	mov	r4, r0
 80035ba:	2800      	cmp	r0, #0
 80035bc:	d041      	beq.n	8003642 <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80035be:	4a24      	ldr	r2, [pc, #144]	; (8003650 <xTaskPriorityInherit+0x9c>)
 80035c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035c2:	6811      	ldr	r1, [r2, #0]
 80035c4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80035c6:	428b      	cmp	r3, r1
 80035c8:	4617      	mov	r7, r2
 80035ca:	d231      	bcs.n	8003630 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035cc:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035ce:	4d21      	ldr	r5, [pc, #132]	; (8003654 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035d0:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d2:	bfa1      	itttt	ge
 80035d4:	683a      	ldrge	r2, [r7, #0]
 80035d6:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80035d8:	f1c2 0207 	rsbge	r2, r2, #7
 80035dc:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035de:	2614      	movs	r6, #20
 80035e0:	6942      	ldr	r2, [r0, #20]
 80035e2:	fb06 5303 	mla	r3, r6, r3, r5
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d12d      	bne.n	8003646 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035ea:	f100 0804 	add.w	r8, r0, #4
 80035ee:	4640      	mov	r0, r8
 80035f0:	f7fe fc81 	bl	8001ef6 <uxListRemove>
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <xTaskPriorityInherit+0xa4>)
 80035f6:	b948      	cbnz	r0, 800360c <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80035f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80035fa:	4346      	muls	r6, r0
 80035fc:	59aa      	ldr	r2, [r5, r6]
 80035fe:	b92a      	cbnz	r2, 800360c <xTaskPriorityInherit+0x58>
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	2101      	movs	r1, #1
 8003604:	4081      	lsls	r1, r0
 8003606:	ea22 0201 	bic.w	r2, r2, r1
 800360a:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800360c:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800360e:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003610:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003612:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003614:	2401      	movs	r4, #1
 8003616:	fa04 f002 	lsl.w	r0, r4, r2
 800361a:	4308      	orrs	r0, r1
 800361c:	6018      	str	r0, [r3, #0]
 800361e:	2014      	movs	r0, #20
 8003620:	4641      	mov	r1, r8
 8003622:	fb00 5002 	mla	r0, r0, r2, r5
 8003626:	f7fe fc43 	bl	8001eb0 <vListInsertEnd>
				xReturn = pdTRUE;
 800362a:	2001      	movs	r0, #1
	}
 800362c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003634:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003636:	42a0      	cmp	r0, r4
 8003638:	bf2c      	ite	cs
 800363a:	2000      	movcs	r0, #0
 800363c:	2001      	movcc	r0, #1
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 8003642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800364c:	e7ed      	b.n	800362a <xTaskPriorityInherit+0x76>
 800364e:	bf00      	nop
 8003650:	200050b8 	.word	0x200050b8
 8003654:	200050c4 	.word	0x200050c4
 8003658:	20005164 	.word	0x20005164

0800365c <xTaskPriorityDisinherit>:
	{
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800365e:	4604      	mov	r4, r0
 8003660:	b908      	cbnz	r0, 8003666 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003662:	2000      	movs	r0, #0
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <xTaskPriorityDisinherit+0x94>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4298      	cmp	r0, r3
 800366c:	d008      	beq.n	8003680 <xTaskPriorityDisinherit+0x24>
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	e7fe      	b.n	800367e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003680:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003682:	b943      	cbnz	r3, 8003696 <xTaskPriorityDisinherit+0x3a>
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	e7fe      	b.n	8003694 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003696:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003698:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800369a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800369c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800369e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036a0:	d0df      	beq.n	8003662 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1dd      	bne.n	8003662 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036a6:	1d05      	adds	r5, r0, #4
 80036a8:	4628      	mov	r0, r5
 80036aa:	f7fe fc24 	bl	8001ef6 <uxListRemove>
 80036ae:	4e11      	ldr	r6, [pc, #68]	; (80036f4 <xTaskPriorityDisinherit+0x98>)
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <xTaskPriorityDisinherit+0x9c>)
 80036b2:	b950      	cbnz	r0, 80036ca <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80036b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80036b6:	2114      	movs	r1, #20
 80036b8:	4379      	muls	r1, r7
 80036ba:	5873      	ldr	r3, [r6, r1]
 80036bc:	b92b      	cbnz	r3, 80036ca <xTaskPriorityDisinherit+0x6e>
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	2001      	movs	r0, #1
 80036c2:	40b8      	lsls	r0, r7
 80036c4:	ea23 0300 	bic.w	r3, r3, r0
 80036c8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80036ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80036cc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ce:	f1c3 0107 	rsb	r1, r3, #7
 80036d2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80036d4:	6811      	ldr	r1, [r2, #0]
 80036d6:	2401      	movs	r4, #1
 80036d8:	fa04 f003 	lsl.w	r0, r4, r3
 80036dc:	4308      	orrs	r0, r1
 80036de:	6010      	str	r0, [r2, #0]
 80036e0:	2014      	movs	r0, #20
 80036e2:	fb00 6003 	mla	r0, r0, r3, r6
 80036e6:	4629      	mov	r1, r5
 80036e8:	f7fe fbe2 	bl	8001eb0 <vListInsertEnd>
					xReturn = pdTRUE;
 80036ec:	4620      	mov	r0, r4
	}
 80036ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036f0:	200050b8 	.word	0x200050b8
 80036f4:	200050c4 	.word	0x200050c4
 80036f8:	20005164 	.word	0x20005164

080036fc <vTaskPriorityDisinheritAfterTimeout>:
	{
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80036fe:	4604      	mov	r4, r0
 8003700:	2800      	cmp	r0, #0
 8003702:	d04d      	beq.n	80037a0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8003704:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003706:	b942      	cbnz	r2, 800371a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	e7fe      	b.n	8003718 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800371a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800371c:	4299      	cmp	r1, r3
 800371e:	bf38      	it	cc
 8003720:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003722:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003724:	428b      	cmp	r3, r1
 8003726:	d03b      	beq.n	80037a0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003728:	2a01      	cmp	r2, #1
 800372a:	d139      	bne.n	80037a0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	4290      	cmp	r0, r2
 8003732:	d108      	bne.n	8003746 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	e7fe      	b.n	8003744 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003746:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003748:	4d17      	ldr	r5, [pc, #92]	; (80037a8 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800374a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800374c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800374e:	f04f 0614 	mov.w	r6, #20
 8003752:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003754:	bfa8      	it	ge
 8003756:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800375a:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800375e:	bfa8      	it	ge
 8003760:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003762:	429a      	cmp	r2, r3
 8003764:	d11c      	bne.n	80037a0 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003766:	1d07      	adds	r7, r0, #4
 8003768:	4638      	mov	r0, r7
 800376a:	f7fe fbc4 	bl	8001ef6 <uxListRemove>
 800376e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003770:	4c0e      	ldr	r4, [pc, #56]	; (80037ac <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8003772:	b940      	cbnz	r0, 8003786 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003774:	4356      	muls	r6, r2
 8003776:	59ab      	ldr	r3, [r5, r6]
 8003778:	b92b      	cbnz	r3, 8003786 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	4091      	lsls	r1, r2
 8003780:	ea23 0301 	bic.w	r3, r3, r1
 8003784:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8003786:	6821      	ldr	r1, [r4, #0]
 8003788:	2301      	movs	r3, #1
 800378a:	4093      	lsls	r3, r2
 800378c:	430b      	orrs	r3, r1
 800378e:	2014      	movs	r0, #20
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	4639      	mov	r1, r7
 8003794:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8003798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800379c:	f7fe bb88 	b.w	8001eb0 <vListInsertEnd>
 80037a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a2:	bf00      	nop
 80037a4:	200050b8 	.word	0x200050b8
 80037a8:	200050c4 	.word	0x200050c4
 80037ac:	20005164 	.word	0x20005164

080037b0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <pvTaskIncrementMutexHeldCount+0x14>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	b11a      	cbz	r2, 80037be <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80037ba:	3201      	adds	r2, #1
 80037bc:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80037be:	6818      	ldr	r0, [r3, #0]
	}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	200050b8 	.word	0x200050b8

080037c8 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <tcpip_thread+0x78>)
 80037ca:	681b      	ldr	r3, [r3, #0]
{
 80037cc:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 80037ce:	b113      	cbz	r3, 80037d6 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <tcpip_thread+0x7c>)
 80037d2:	6810      	ldr	r0, [r2, #0]
 80037d4:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 80037d6:	481c      	ldr	r0, [pc, #112]	; (8003848 <tcpip_thread+0x80>)
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80037d8:	4d1b      	ldr	r5, [pc, #108]	; (8003848 <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80037da:	4e1c      	ldr	r6, [pc, #112]	; (800384c <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80037dc:	4c1c      	ldr	r4, [pc, #112]	; (8003850 <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 80037de:	f006 f970 	bl	8009ac2 <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 80037e2:	4628      	mov	r0, r5
 80037e4:	f006 f972 	bl	8009acc <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80037e8:	a901      	add	r1, sp, #4
 80037ea:	4630      	mov	r0, r6
 80037ec:	f005 ff84 	bl	80096f8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 80037f0:	4628      	mov	r0, r5
 80037f2:	f006 f966 	bl	8009ac2 <sys_mutex_lock>
    if (msg == NULL) {
 80037f6:	9b01      	ldr	r3, [sp, #4]
 80037f8:	b933      	cbnz	r3, 8003808 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80037fa:	4623      	mov	r3, r4
 80037fc:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80037fe:	4915      	ldr	r1, [pc, #84]	; (8003854 <tcpip_thread+0x8c>)
 8003800:	4815      	ldr	r0, [pc, #84]	; (8003858 <tcpip_thread+0x90>)
 8003802:	f007 f8b3 	bl	800a96c <iprintf>
      break;
 8003806:	e7ec      	b.n	80037e2 <tcpip_thread+0x1a>
    switch (msg->type) {
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	2a03      	cmp	r2, #3
 800380c:	d00b      	beq.n	8003826 <tcpip_thread+0x5e>
 800380e:	2a04      	cmp	r2, #4
 8003810:	d00f      	beq.n	8003832 <tcpip_thread+0x6a>
 8003812:	2a02      	cmp	r2, #2
 8003814:	d111      	bne.n	800383a <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8003816:	1d18      	adds	r0, r3, #4
 8003818:	c807      	ldmia	r0, {r0, r1, r2}
 800381a:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800381c:	9901      	ldr	r1, [sp, #4]
 800381e:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003820:	f002 fb8e 	bl	8005f40 <memp_free>
      break;
 8003824:	e7dd      	b.n	80037e2 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003826:	6898      	ldr	r0, [r3, #8]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800382c:	9901      	ldr	r1, [sp, #4]
 800382e:	2008      	movs	r0, #8
 8003830:	e7f6      	b.n	8003820 <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	6898      	ldr	r0, [r3, #8]
 8003836:	4790      	blx	r2
      break;
 8003838:	e7d3      	b.n	80037e2 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800383a:	4623      	mov	r3, r4
 800383c:	229b      	movs	r2, #155	; 0x9b
 800383e:	e7de      	b.n	80037fe <tcpip_thread+0x36>
 8003840:	200051e4 	.word	0x200051e4
 8003844:	200051e8 	.word	0x200051e8
 8003848:	200055e8 	.word	0x200055e8
 800384c:	200051e0 	.word	0x200051e0
 8003850:	0800bbb7 	.word	0x0800bbb7
 8003854:	0800bbe7 	.word	0x0800bbe7
 8003858:	0800bc05 	.word	0x0800bc05

0800385c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003860:	4810      	ldr	r0, [pc, #64]	; (80038a4 <tcpip_inpkt+0x48>)
{
 8003862:	460e      	mov	r6, r1
 8003864:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003866:	f006 f90b 	bl	8009a80 <sys_mbox_valid>
 800386a:	b928      	cbnz	r0, 8003878 <tcpip_inpkt+0x1c>
 800386c:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <tcpip_inpkt+0x4c>)
 800386e:	490f      	ldr	r1, [pc, #60]	; (80038ac <tcpip_inpkt+0x50>)
 8003870:	480f      	ldr	r0, [pc, #60]	; (80038b0 <tcpip_inpkt+0x54>)
 8003872:	22b5      	movs	r2, #181	; 0xb5
 8003874:	f007 f87a 	bl	800a96c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003878:	2009      	movs	r0, #9
 800387a:	f002 fb45 	bl	8005f08 <memp_malloc>
  if (msg == NULL) {
 800387e:	4604      	mov	r4, r0
 8003880:	b168      	cbz	r0, 800389e <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8003882:	2302      	movs	r3, #2
 8003884:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8003886:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8003888:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 800388a:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800388c:	4601      	mov	r1, r0
 800388e:	4805      	ldr	r0, [pc, #20]	; (80038a4 <tcpip_inpkt+0x48>)
 8003890:	f006 f8ca 	bl	8009a28 <sys_mbox_trypost>
 8003894:	b128      	cbz	r0, 80038a2 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003896:	4621      	mov	r1, r4
 8003898:	2009      	movs	r0, #9
 800389a:	f002 fb51 	bl	8005f40 <memp_free>
    return ERR_MEM;
 800389e:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a4:	200051e0 	.word	0x200051e0
 80038a8:	0800bbb7 	.word	0x0800bbb7
 80038ac:	0800bbaa 	.word	0x0800bbaa
 80038b0:	0800bc05 	.word	0x0800bc05

080038b4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80038b4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80038b8:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80038bc:	bf14      	ite	ne
 80038be:	4a02      	ldrne	r2, [pc, #8]	; (80038c8 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 80038c0:	4a02      	ldreq	r2, [pc, #8]	; (80038cc <tcpip_input+0x18>)
 80038c2:	f7ff bfcb 	b.w	800385c <tcpip_inpkt>
 80038c6:	bf00      	nop
 80038c8:	080098fd 	.word	0x080098fd
 80038cc:	08005029 	.word	0x08005029

080038d0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80038d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038d2:	4605      	mov	r5, r0
 80038d4:	460c      	mov	r4, r1
  lwip_init();
 80038d6:	f000 feea 	bl	80046ae <lwip_init>

  tcpip_init_done = initfunc;
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80038dc:	4812      	ldr	r0, [pc, #72]	; (8003928 <tcpip_init+0x58>)
  tcpip_init_done = initfunc;
 80038de:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <tcpip_init+0x5c>)
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80038e2:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80038e4:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80038e6:	f006 f88d 	bl	8009a04 <sys_mbox_new>
 80038ea:	b130      	cbz	r0, 80038fa <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80038ec:	4b10      	ldr	r3, [pc, #64]	; (8003930 <tcpip_init+0x60>)
 80038ee:	4911      	ldr	r1, [pc, #68]	; (8003934 <tcpip_init+0x64>)
 80038f0:	4811      	ldr	r0, [pc, #68]	; (8003938 <tcpip_init+0x68>)
 80038f2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80038f6:	f007 f839 	bl	800a96c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80038fa:	4810      	ldr	r0, [pc, #64]	; (800393c <tcpip_init+0x6c>)
 80038fc:	f006 f8d2 	bl	8009aa4 <sys_mutex_new>
 8003900:	b130      	cbz	r0, 8003910 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <tcpip_init+0x60>)
 8003904:	490e      	ldr	r1, [pc, #56]	; (8003940 <tcpip_init+0x70>)
 8003906:	480c      	ldr	r0, [pc, #48]	; (8003938 <tcpip_init+0x68>)
 8003908:	f240 12d9 	movw	r2, #473	; 0x1d9
 800390c:	f007 f82e 	bl	800a96c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003910:	2200      	movs	r2, #0
 8003912:	9200      	str	r2, [sp, #0]
 8003914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003918:	490a      	ldr	r1, [pc, #40]	; (8003944 <tcpip_init+0x74>)
 800391a:	480b      	ldr	r0, [pc, #44]	; (8003948 <tcpip_init+0x78>)
 800391c:	f006 f8d9 	bl	8009ad2 <sys_thread_new>
}
 8003920:	b003      	add	sp, #12
 8003922:	bd30      	pop	{r4, r5, pc}
 8003924:	200051e4 	.word	0x200051e4
 8003928:	200051e0 	.word	0x200051e0
 800392c:	200051e8 	.word	0x200051e8
 8003930:	0800bbb7 	.word	0x0800bbb7
 8003934:	0800bb59 	.word	0x0800bb59
 8003938:	0800bc05 	.word	0x0800bc05
 800393c:	200055e8 	.word	0x200055e8
 8003940:	0800bb7c 	.word	0x0800bb7c
 8003944:	080037c9 	.word	0x080037c9
 8003948:	0800bb9d 	.word	0x0800bb9d

0800394c <mqtt_output_append_u16>:
}

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
  mqtt_ringbuf_put(rb, value >> 8);
 800394c:	8803      	ldrh	r3, [r0, #0]
 800394e:	fa50 f283 	uxtab	r2, r0, r3
{
 8003952:	b510      	push	{r4, lr}
  mqtt_ringbuf_put(rb, value >> 8);
 8003954:	0a0c      	lsrs	r4, r1, #8
 8003956:	7114      	strb	r4, [r2, #4]
  mqtt_ringbuf_put(rb, value & 0xff);
 8003958:	1c9a      	adds	r2, r3, #2
  mqtt_ringbuf_put(rb, value >> 8);
 800395a:	3301      	adds	r3, #1
  mqtt_ringbuf_put(rb, value & 0xff);
 800395c:	8002      	strh	r2, [r0, #0]
 800395e:	fa50 f083 	uxtab	r0, r0, r3
 8003962:	7101      	strb	r1, [r0, #4]
 8003964:	bd10      	pop	{r4, pc}

08003966 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8003966:	8803      	ldrh	r3, [r0, #0]
{
 8003968:	b530      	push	{r4, r5, lr}
  mqtt_ringbuf_put(rb, length >> 8);
 800396a:	fa50 f483 	uxtab	r4, r0, r3
 800396e:	0a15      	lsrs	r5, r2, #8
 8003970:	7125      	strb	r5, [r4, #4]
  mqtt_ringbuf_put(rb, length & 0xff);
 8003972:	1c9c      	adds	r4, r3, #2
  mqtt_ringbuf_put(rb, length >> 8);
 8003974:	3301      	adds	r3, #1
  mqtt_ringbuf_put(rb, length & 0xff);
 8003976:	fa50 f383 	uxtab	r3, r0, r3
 800397a:	8004      	strh	r4, [r0, #0]
 800397c:	711a      	strb	r2, [r3, #4]
  for (n = 0; n < length; n++) {
 800397e:	460c      	mov	r4, r1
 8003980:	1a63      	subs	r3, r4, r1
 8003982:	b29b      	uxth	r3, r3
 8003984:	429a      	cmp	r2, r3
 8003986:	d800      	bhi.n	800398a <mqtt_output_append_string+0x24>
    mqtt_ringbuf_put(rb, str[n]);
  }
}
 8003988:	bd30      	pop	{r4, r5, pc}
    mqtt_ringbuf_put(rb, str[n]);
 800398a:	8803      	ldrh	r3, [r0, #0]
 800398c:	1c5d      	adds	r5, r3, #1
 800398e:	8005      	strh	r5, [r0, #0]
 8003990:	fa50 f383 	uxtab	r3, r0, r3
 8003994:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003998:	711d      	strb	r5, [r3, #4]
 800399a:	e7f1      	b.n	8003980 <mqtt_output_append_string+0x1a>

0800399c <mqtt_create_request>:
{
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	460d      	mov	r5, r1
 80039a0:	4616      	mov	r6, r2
 80039a2:	461f      	mov	r7, r3
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 80039a4:	4604      	mov	r4, r0
 80039a6:	b930      	cbnz	r0, 80039b6 <mqtt_create_request+0x1a>
 80039a8:	4b0a      	ldr	r3, [pc, #40]	; (80039d4 <mqtt_create_request+0x38>)
 80039aa:	490b      	ldr	r1, [pc, #44]	; (80039d8 <mqtt_create_request+0x3c>)
 80039ac:	480b      	ldr	r0, [pc, #44]	; (80039dc <mqtt_create_request+0x40>)
 80039ae:	f240 1205 	movw	r2, #261	; 0x105
 80039b2:	f006 ffdb 	bl	800a96c <iprintf>
{
 80039b6:	2300      	movs	r3, #0
    if (r_objs[n].next == &r_objs[n]) {
 80039b8:	58e2      	ldr	r2, [r4, r3]
 80039ba:	18e0      	adds	r0, r4, r3
 80039bc:	4290      	cmp	r0, r2
 80039be:	d104      	bne.n	80039ca <mqtt_create_request+0x2e>
      r->next = NULL;
 80039c0:	2300      	movs	r3, #0
      r->arg = arg;
 80039c2:	e880 00c8 	stmia.w	r0, {r3, r6, r7}
      r->pkt_id = pkt_id;
 80039c6:	8185      	strh	r5, [r0, #12]
      break;
 80039c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ca:	3310      	adds	r3, #16
  for (n = 0; n < MQTT_REQ_MAX_IN_FLIGHT; n++) {
 80039cc:	2b40      	cmp	r3, #64	; 0x40
 80039ce:	d1f3      	bne.n	80039b8 <mqtt_create_request+0x1c>
  struct mqtt_request_t *r = NULL;
 80039d0:	2000      	movs	r0, #0
}
 80039d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039d4:	0800be6d 	.word	0x0800be6d
 80039d8:	0800bea2 	.word	0x0800bea2
 80039dc:	0800bc05 	.word	0x0800bc05

080039e0 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 80039e0:	b570      	push	{r4, r5, r6, lr}
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 80039e2:	1c4c      	adds	r4, r1, #1
{
 80039e4:	460d      	mov	r5, r1
  u16_t total_len = 1 + r_length;
 80039e6:	b2a4      	uxth	r4, r4

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 80039e8:	4606      	mov	r6, r0
 80039ea:	b930      	cbnz	r0, 80039fa <mqtt_output_check_space+0x1a>
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <mqtt_output_check_space+0x38>)
 80039ee:	490b      	ldr	r1, [pc, #44]	; (8003a1c <mqtt_output_check_space+0x3c>)
 80039f0:	480b      	ldr	r0, [pc, #44]	; (8003a20 <mqtt_output_check_space+0x40>)
 80039f2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80039f6:	f006 ffb9 	bl	800a96c <iprintf>

 /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 80039fa:	3401      	adds	r4, #1
    r_length >>= 7;
  } while (r_length > 0);
 80039fc:	09ed      	lsrs	r5, r5, #7
    total_len++;
 80039fe:	b2a4      	uxth	r4, r4
  } while (r_length > 0);
 8003a00:	d1fb      	bne.n	80039fa <mqtt_output_check_space+0x1a>

  return (total_len <= mqtt_ringbuf_free(rb));
 8003a02:	8830      	ldrh	r0, [r6, #0]
 8003a04:	8873      	ldrh	r3, [r6, #2]
 8003a06:	1ac0      	subs	r0, r0, r3
 8003a08:	b280      	uxth	r0, r0
 8003a0a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
}
 8003a0e:	4284      	cmp	r4, r0
 8003a10:	bfcc      	ite	gt
 8003a12:	2000      	movgt	r0, #0
 8003a14:	2001      	movle	r0, #1
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	0800be6d 	.word	0x0800be6d
 8003a1c:	0800bee8 	.word	0x0800bee8
 8003a20:	0800bc05 	.word	0x0800bc05

08003a24 <mqtt_append_request>:
{
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	460e      	mov	r6, r1
  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8003a28:	4607      	mov	r7, r0
 8003a2a:	b930      	cbnz	r0, 8003a3a <mqtt_append_request+0x16>
 8003a2c:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <mqtt_append_request+0x4c>)
 8003a2e:	4911      	ldr	r1, [pc, #68]	; (8003a74 <mqtt_append_request+0x50>)
 8003a30:	4811      	ldr	r0, [pc, #68]	; (8003a78 <mqtt_append_request+0x54>)
 8003a32:	f240 1221 	movw	r2, #289	; 0x121
 8003a36:	f006 ff99 	bl	800a96c <iprintf>
  s16_t time_before = 0;
 8003a3a:	2400      	movs	r4, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003a3c:	683b      	ldr	r3, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8003a3e:	4625      	mov	r5, r4
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003a40:	b973      	cbnz	r3, 8003a60 <mqtt_append_request+0x3c>
  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8003a42:	2c1e      	cmp	r4, #30
 8003a44:	dd06      	ble.n	8003a54 <mqtt_append_request+0x30>
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <mqtt_append_request+0x4c>)
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <mqtt_append_request+0x58>)
 8003a4a:	480b      	ldr	r0, [pc, #44]	; (8003a78 <mqtt_append_request+0x54>)
 8003a4c:	f240 1229 	movw	r2, #297	; 0x129
 8003a50:	f006 ff8c 	bl	800a96c <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8003a54:	f1c4 041e 	rsb	r4, r4, #30
 8003a58:	81f4      	strh	r4, [r6, #14]
  if (head == NULL) {
 8003a5a:	b93d      	cbnz	r5, 8003a6c <mqtt_append_request+0x48>
    *tail = r;
 8003a5c:	603e      	str	r6, [r7, #0]
 8003a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    time_before += iter->timeout_diff;
 8003a60:	89da      	ldrh	r2, [r3, #14]
 8003a62:	4414      	add	r4, r2
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003a64:	461d      	mov	r5, r3
    time_before += iter->timeout_diff;
 8003a66:	b224      	sxth	r4, r4
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	e7e9      	b.n	8003a40 <mqtt_append_request+0x1c>
    head->next = r;
 8003a6c:	602e      	str	r6, [r5, #0]
 8003a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a70:	0800be6d 	.word	0x0800be6d
 8003a74:	0800bc2d 	.word	0x0800bc2d
 8003a78:	0800bc05 	.word	0x0800bc05
 8003a7c:	0800bc4f 	.word	0x0800bc4f

08003a80 <mqtt_take_request>:
{
 8003a80:	b538      	push	{r3, r4, r5, lr}
 8003a82:	460d      	mov	r5, r1
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8003a84:	4604      	mov	r4, r0
 8003a86:	b930      	cbnz	r0, 8003a96 <mqtt_take_request+0x16>
 8003a88:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <mqtt_take_request+0x48>)
 8003a8a:	4910      	ldr	r1, [pc, #64]	; (8003acc <mqtt_take_request+0x4c>)
 8003a8c:	4810      	ldr	r0, [pc, #64]	; (8003ad0 <mqtt_take_request+0x50>)
 8003a8e:	f240 1249 	movw	r2, #329	; 0x149
 8003a92:	f006 ff6b 	bl	800a96c <iprintf>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003a96:	6820      	ldr	r0, [r4, #0]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8003a98:	2200      	movs	r2, #0
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003a9a:	b900      	cbnz	r0, 8003a9e <mqtt_take_request+0x1e>
 8003a9c:	bd38      	pop	{r3, r4, r5, pc}
    if (iter->pkt_id == pkt_id) {
 8003a9e:	8983      	ldrh	r3, [r0, #12]
 8003aa0:	42ab      	cmp	r3, r5
 8003aa2:	6803      	ldr	r3, [r0, #0]
 8003aa4:	d004      	beq.n	8003ab0 <mqtt_take_request+0x30>
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	e7f6      	b.n	8003a9a <mqtt_take_request+0x1a>
      prev->next = iter->next;
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e002      	b.n	8003ab6 <mqtt_take_request+0x36>
    if (prev == NULL) {
 8003ab0:	2a00      	cmp	r2, #0
 8003ab2:	d1fb      	bne.n	8003aac <mqtt_take_request+0x2c>
      *tail= iter->next;
 8003ab4:	6023      	str	r3, [r4, #0]
    if (iter->next != NULL) {
 8003ab6:	6803      	ldr	r3, [r0, #0]
 8003ab8:	b11b      	cbz	r3, 8003ac2 <mqtt_take_request+0x42>
      iter->next->timeout_diff += iter->timeout_diff;
 8003aba:	89da      	ldrh	r2, [r3, #14]
 8003abc:	89c1      	ldrh	r1, [r0, #14]
 8003abe:	440a      	add	r2, r1
 8003ac0:	81da      	strh	r2, [r3, #14]
    iter->next = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	6003      	str	r3, [r0, #0]
  return iter;
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	0800be6d 	.word	0x0800be6d
 8003acc:	0800c075 	.word	0x0800c075
 8003ad0:	0800bc05 	.word	0x0800bc05

08003ad4 <mqtt_output_send>:
{
 8003ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t send_len = tcp_sndbuf(tpcb);
 8003ad6:	f8b1 4060 	ldrh.w	r4, [r1, #96]	; 0x60
{
 8003ada:	4606      	mov	r6, r0
 8003adc:	460f      	mov	r7, r1
  if (send_len == 0 || ringbuf_lin_len == 0) {
 8003ade:	2c00      	cmp	r4, #0
 8003ae0:	d045      	beq.n	8003b6e <mqtt_output_send+0x9a>
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8003ae2:	8843      	ldrh	r3, [r0, #2]
 8003ae4:	8805      	ldrh	r5, [r0, #0]
 8003ae6:	b2d9      	uxtb	r1, r3
 8003ae8:	1aed      	subs	r5, r5, r3
 8003aea:	b2ad      	uxth	r5, r5
 8003aec:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8003af0:	42ab      	cmp	r3, r5
 8003af2:	bfa8      	it	ge
 8003af4:	462b      	movge	r3, r5
  if (send_len == 0 || ringbuf_lin_len == 0) {
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d039      	beq.n	8003b6e <mqtt_output_send+0x9a>
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8003afa:	b29b      	uxth	r3, r3
  if (send_len > ringbuf_lin_len) {
 8003afc:	42a3      	cmp	r3, r4
 8003afe:	d234      	bcs.n	8003b6a <mqtt_output_send+0x96>
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8003b00:	429d      	cmp	r5, r3
 8003b02:	bf94      	ite	ls
 8003b04:	2500      	movls	r5, #0
 8003b06:	2501      	movhi	r5, #1
 8003b08:	461c      	mov	r4, r3
  err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	f101 0104 	add.w	r1, r1, #4
 8003b10:	bf14      	ite	ne
 8003b12:	2303      	movne	r3, #3
 8003b14:	2301      	moveq	r3, #1
 8003b16:	4622      	mov	r2, r4
 8003b18:	4431      	add	r1, r6
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f004 fec2 	bl	80088a4 <tcp_write>
  if ((err == ERR_OK) && wrap) {
 8003b20:	bb28      	cbnz	r0, 8003b6e <mqtt_output_send+0x9a>
 8003b22:	b1d5      	cbz	r5, 8003b5a <mqtt_output_send+0x86>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8003b24:	8873      	ldrh	r3, [r6, #2]
 8003b26:	441c      	add	r4, r3
 8003b28:	b2a3      	uxth	r3, r4
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8003b2a:	8834      	ldrh	r4, [r6, #0]
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8003b2c:	8073      	strh	r3, [r6, #2]
 8003b2e:	b2d9      	uxtb	r1, r3
    send_len = LWIP_MIN(tcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8003b30:	1ae4      	subs	r4, r4, r3
 8003b32:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003b36:	b2a4      	uxth	r4, r4
 8003b38:	429c      	cmp	r4, r3
 8003b3a:	bfa8      	it	ge
 8003b3c:	461c      	movge	r4, r3
 8003b3e:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8003b42:	429c      	cmp	r4, r3
 8003b44:	bfa8      	it	ge
 8003b46:	461c      	movge	r4, r3
 8003b48:	b2a4      	uxth	r4, r4
    err = tcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8003b4a:	3104      	adds	r1, #4
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4622      	mov	r2, r4
 8003b50:	4431      	add	r1, r6
 8003b52:	4638      	mov	r0, r7
 8003b54:	f004 fea6 	bl	80088a4 <tcp_write>
  if (err == ERR_OK) {
 8003b58:	b948      	cbnz	r0, 8003b6e <mqtt_output_send+0x9a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8003b5a:	8873      	ldrh	r3, [r6, #2]
 8003b5c:	441c      	add	r4, r3
 8003b5e:	8074      	strh	r4, [r6, #2]
    tcp_output(tpcb);
 8003b60:	4638      	mov	r0, r7
}
 8003b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    tcp_output(tpcb);
 8003b66:	f005 ba23 	b.w	8008fb0 <tcp_output>
  u8_t wrap = 0;
 8003b6a:	2500      	movs	r5, #0
 8003b6c:	e7cd      	b.n	8003b0a <mqtt_output_send+0x36>
 8003b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b70 <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct tcp_pcb *tpcb)
{
 8003b70:	b508      	push	{r3, lr}
  mqtt_client_t *client = (mqtt_client_t *)arg;
  if (client->conn_state == MQTT_CONNECTED) {
 8003b72:	7a83      	ldrb	r3, [r0, #10]
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d102      	bne.n	8003b7e <mqtt_tcp_poll_cb+0xe>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8003b78:	30ec      	adds	r0, #236	; 0xec
 8003b7a:	f7ff ffab 	bl	8003ad4 <mqtt_output_send>
  }
  return ERR_OK;
}
 8003b7e:	2000      	movs	r0, #0
 8003b80:	bd08      	pop	{r3, pc}
	...

08003b84 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8003b84:	b570      	push	{r4, r5, r6, lr}
 8003b86:	4604      	mov	r4, r0
 8003b88:	460e      	mov	r6, r1
  mqtt_client_t* client = (mqtt_client_t *)arg;

  if (err != ERR_OK) {
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	b9da      	cbnz	r2, 8003bc6 <mqtt_tcp_connect_cb+0x42>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8003b8e:	66a2      	str	r2, [r4, #104]	; 0x68

  /* Setup TCP callbacks */
  tcp_recv(tpcb, mqtt_tcp_recv_cb);
 8003b90:	490e      	ldr	r1, [pc, #56]	; (8003bcc <mqtt_tcp_connect_cb+0x48>)
 8003b92:	4630      	mov	r0, r6
 8003b94:	f002 ff56 	bl	8006a44 <tcp_recv>
  tcp_sent(tpcb, mqtt_tcp_sent_cb);
 8003b98:	490d      	ldr	r1, [pc, #52]	; (8003bd0 <mqtt_tcp_connect_cb+0x4c>)
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f002 ff68 	bl	8006a70 <tcp_sent>
  tcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	490c      	ldr	r1, [pc, #48]	; (8003bd4 <mqtt_tcp_connect_cb+0x50>)
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f002 ff91 	bl	8006acc <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE,("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8003baa:	2302      	movs	r3, #2

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 8003bac:	490a      	ldr	r1, [pc, #40]	; (8003bd8 <mqtt_tcp_connect_cb+0x54>)
  client->conn_state = MQTT_CONNECTING;
 8003bae:	72a3      	strb	r3, [r4, #10]
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, client);
 8003bb0:	f241 3088 	movw	r0, #5000	; 0x1388
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	f005 fcc9 	bl	800954c <sys_timeout>
  client->cyclic_tick = 0;
 8003bba:	4620      	mov	r0, r4

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8003bbc:	68e1      	ldr	r1, [r4, #12]
  client->cyclic_tick = 0;
 8003bbe:	f820 5bec 	strh.w	r5, [r0], #236
  mqtt_output_send(&client->output, client->conn);
 8003bc2:	f7ff ff87 	bl	8003ad4 <mqtt_output_send>

  return ERR_OK;
}
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	bf00      	nop
 8003bcc:	08003fd1 	.word	0x08003fd1
 8003bd0:	08003c91 	.word	0x08003c91
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003d11 	.word	0x08003d11

08003bdc <mqtt_close>:
{
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	460e      	mov	r6, r1
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8003be0:	4604      	mov	r4, r0
 8003be2:	b930      	cbnz	r0, 8003bf2 <mqtt_close+0x16>
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <mqtt_close+0x70>)
 8003be6:	491a      	ldr	r1, [pc, #104]	; (8003c50 <mqtt_close+0x74>)
 8003be8:	481a      	ldr	r0, [pc, #104]	; (8003c54 <mqtt_close+0x78>)
 8003bea:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8003bee:	f006 febd 	bl	800a96c <iprintf>
  if (client->conn != NULL) {
 8003bf2:	68e0      	ldr	r0, [r4, #12]
 8003bf4:	b198      	cbz	r0, 8003c1e <mqtt_close+0x42>
    tcp_recv(client->conn, NULL);
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	f002 ff24 	bl	8006a44 <tcp_recv>
    tcp_err(client->conn,  NULL);
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	68e0      	ldr	r0, [r4, #12]
 8003c00:	f002 ff4c 	bl	8006a9c <tcp_err>
    tcp_sent(client->conn, NULL);
 8003c04:	68e0      	ldr	r0, [r4, #12]
 8003c06:	2100      	movs	r1, #0
 8003c08:	f002 ff32 	bl	8006a70 <tcp_sent>
    res = tcp_close(client->conn);
 8003c0c:	68e0      	ldr	r0, [r4, #12]
 8003c0e:	f003 fa4b 	bl	80070a8 <tcp_close>
    if (res != ERR_OK) {
 8003c12:	b110      	cbz	r0, 8003c1a <mqtt_close+0x3e>
      tcp_abort(client->conn);
 8003c14:	68e0      	ldr	r0, [r4, #12]
 8003c16:	f003 fb59 	bl	80072cc <tcp_abort>
    client->conn = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60e3      	str	r3, [r4, #12]
  for (iter = *tail; iter != NULL; iter = next) {
 8003c1e:	69a5      	ldr	r5, [r4, #24]
 8003c20:	b97d      	cbnz	r5, 8003c42 <mqtt_close+0x66>
  *tail = NULL;
 8003c22:	61a5      	str	r5, [r4, #24]
  sys_untimeout(mqtt_cyclic_timer, client);
 8003c24:	4621      	mov	r1, r4
 8003c26:	480c      	ldr	r0, [pc, #48]	; (8003c58 <mqtt_close+0x7c>)
 8003c28:	f005 fd42 	bl	80096b0 <sys_untimeout>
  if (client->conn_state != TCP_DISCONNECTED) {
 8003c2c:	7aa3      	ldrb	r3, [r4, #10]
 8003c2e:	b163      	cbz	r3, 8003c4a <mqtt_close+0x6e>
    if (client->connect_cb != NULL) {
 8003c30:	6963      	ldr	r3, [r4, #20]
    client->conn_state = TCP_DISCONNECTED;
 8003c32:	72a5      	strb	r5, [r4, #10]
    if (client->connect_cb != NULL) {
 8003c34:	b14b      	cbz	r3, 8003c4a <mqtt_close+0x6e>
      client->connect_cb(client, client->connect_arg, reason);
 8003c36:	4632      	mov	r2, r6
 8003c38:	6921      	ldr	r1, [r4, #16]
 8003c3a:	4620      	mov	r0, r4
}
 8003c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      client->connect_cb(client, client->connect_arg, reason);
 8003c40:	4718      	bx	r3
    next = iter->next;
 8003c42:	682b      	ldr	r3, [r5, #0]
    r->next = r;
 8003c44:	602d      	str	r5, [r5, #0]
 8003c46:	461d      	mov	r5, r3
 8003c48:	e7ea      	b.n	8003c20 <mqtt_close+0x44>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	0800be6d 	.word	0x0800be6d
 8003c50:	0800be52 	.word	0x0800be52
 8003c54:	0800bc05 	.word	0x0800bc05
 8003c58:	08003d11 	.word	0x08003d11

08003c5c <mqtt_tcp_err_cb>:
{
 8003c5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8003c5e:	4604      	mov	r4, r0
 8003c60:	b930      	cbnz	r0, 8003c70 <mqtt_tcp_err_cb+0x14>
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <mqtt_tcp_err_cb+0x28>)
 8003c64:	4908      	ldr	r1, [pc, #32]	; (8003c88 <mqtt_tcp_err_cb+0x2c>)
 8003c66:	4809      	ldr	r0, [pc, #36]	; (8003c8c <mqtt_tcp_err_cb+0x30>)
 8003c68:	f240 32ae 	movw	r2, #942	; 0x3ae
 8003c6c:	f006 fe7e 	bl	800a96c <iprintf>
  client->conn = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60e3      	str	r3, [r4, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003c74:	4620      	mov	r0, r4
 8003c76:	f44f 7180 	mov.w	r1, #256	; 0x100
}
 8003c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8003c7e:	f7ff bfad 	b.w	8003bdc <mqtt_close>
 8003c82:	bf00      	nop
 8003c84:	0800be6d 	.word	0x0800be6d
 8003c88:	0800c095 	.word	0x0800c095
 8003c8c:	0800bc05 	.word	0x0800bc05

08003c90 <mqtt_tcp_sent_cb>:
{
 8003c90:	b570      	push	{r4, r5, r6, lr}
  if (client->conn_state == MQTT_CONNECTED) {
 8003c92:	7a83      	ldrb	r3, [r0, #10]
 8003c94:	2b03      	cmp	r3, #3
{
 8003c96:	4604      	mov	r4, r0
  if (client->conn_state == MQTT_CONNECTED) {
 8003c98:	d10f      	bne.n	8003cba <mqtt_tcp_sent_cb+0x2a>
    client->cyclic_tick = 0;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	8003      	strh	r3, [r0, #0]
    client->server_watchdog = 0;
 8003c9e:	8083      	strh	r3, [r0, #4]
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8003ca0:	f100 0618 	add.w	r6, r0, #24
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f7ff feea 	bl	8003a80 <mqtt_take_request>
 8003cac:	4605      	mov	r5, r0
 8003cae:	b930      	cbnz	r0, 8003cbe <mqtt_tcp_sent_cb+0x2e>
    mqtt_output_send(&client->output, client->conn);
 8003cb0:	68e1      	ldr	r1, [r4, #12]
 8003cb2:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8003cb6:	f7ff ff0d 	bl	8003ad4 <mqtt_output_send>
}
 8003cba:	2000      	movs	r0, #0
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
      if (r->cb != NULL) {
 8003cbe:	686b      	ldr	r3, [r5, #4]
 8003cc0:	b113      	cbz	r3, 8003cc8 <mqtt_tcp_sent_cb+0x38>
        r->cb(r->arg, ERR_OK);
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	68a8      	ldr	r0, [r5, #8]
 8003cc6:	4798      	blx	r3
    r->next = r;
 8003cc8:	602d      	str	r5, [r5, #0]
 8003cca:	e7eb      	b.n	8003ca4 <mqtt_tcp_sent_cb+0x14>

08003ccc <mqtt_output_append_fixed_header.constprop.5>:
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
 8003ccc:	b570      	push	{r4, r5, r6, lr}
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003cce:	0052      	lsls	r2, r2, #1
  mqtt_ringbuf_put(rb, value);
 8003cd0:	8806      	ldrh	r6, [r0, #0]
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t dup,
 8003cd2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003cd6:	f002 0206 	and.w	r2, r2, #6
  mqtt_ringbuf_put(rb, value);
 8003cda:	1c74      	adds	r4, r6, #1
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003cdc:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  mqtt_ringbuf_put(rb, value);
 8003ce0:	fa50 f686 	uxtab	r6, r0, r6
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((dup & 1) << 3) | ((qos & 3) << 1) | (retain & 1)));
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	431a      	orrs	r2, r3
  mqtt_ringbuf_put(rb, value);
 8003cea:	b2a4      	uxth	r4, r4
 8003cec:	7132      	strb	r2, [r6, #4]
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8003cee:	2d7f      	cmp	r5, #127	; 0x7f
 8003cf0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8003cf4:	bf8c      	ite	hi
 8003cf6:	f06f 017f 	mvnhi.w	r1, #127	; 0x7f
 8003cfa:	2100      	movls	r1, #0
  mqtt_ringbuf_put(rb, value);
 8003cfc:	1c62      	adds	r2, r4, #1
 8003cfe:	fa50 f484 	uxtab	r4, r0, r4
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 8003d02:	430b      	orrs	r3, r1
  } while (r_length > 0);
 8003d04:	09ed      	lsrs	r5, r5, #7
  mqtt_ringbuf_put(rb, value);
 8003d06:	7123      	strb	r3, [r4, #4]
 8003d08:	b294      	uxth	r4, r2
  } while (r_length > 0);
 8003d0a:	d1f0      	bne.n	8003cee <mqtt_output_append_fixed_header.constprop.5+0x22>
 8003d0c:	8004      	strh	r4, [r0, #0]
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}

08003d10 <mqtt_cyclic_timer>:
{
 8003d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8003d12:	4604      	mov	r4, r0
 8003d14:	b930      	cbnz	r0, 8003d24 <mqtt_cyclic_timer+0x14>
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <mqtt_cyclic_timer+0xe4>)
 8003d18:	4937      	ldr	r1, [pc, #220]	; (8003df8 <mqtt_cyclic_timer+0xe8>)
 8003d1a:	4838      	ldr	r0, [pc, #224]	; (8003dfc <mqtt_cyclic_timer+0xec>)
 8003d1c:	f240 2225 	movw	r2, #549	; 0x225
 8003d20:	f006 fe24 	bl	800a96c <iprintf>
  if (client->conn_state == MQTT_CONNECTING) {
 8003d24:	7aa3      	ldrb	r3, [r4, #10]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d118      	bne.n	8003d5c <mqtt_cyclic_timer+0x4c>
    client->cyclic_tick++;
 8003d2a:	8823      	ldrh	r3, [r4, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	8023      	strh	r3, [r4, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8003d32:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d36:	2b63      	cmp	r3, #99	; 0x63
 8003d38:	dc08      	bgt.n	8003d4c <mqtt_cyclic_timer+0x3c>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 8003d3a:	4931      	ldr	r1, [pc, #196]	; (8003e00 <mqtt_cyclic_timer+0xf0>)
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	f241 3088 	movw	r0, #5000	; 0x1388
}
 8003d42:	b003      	add	sp, #12
 8003d44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL*1000, mqtt_cyclic_timer, arg);
 8003d48:	f005 bc00 	b.w	800954c <sys_timeout>
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8003d4c:	f240 1101 	movw	r1, #257	; 0x101
 8003d50:	4620      	mov	r0, r4
}
 8003d52:	b003      	add	sp, #12
 8003d54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8003d58:	f7ff bf40 	b.w	8003bdc <mqtt_close>
  } else if (client->conn_state == MQTT_CONNECTED) {
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d13f      	bne.n	8003de0 <mqtt_cyclic_timer+0xd0>
  r = *tail;
 8003d60:	69a5      	ldr	r5, [r4, #24]
 8003d62:	2605      	movs	r6, #5
  while (t > 0 && r != NULL) {
 8003d64:	b18d      	cbz	r5, 8003d8a <mqtt_cyclic_timer+0x7a>
    if (t >= r->timeout_diff) {
 8003d66:	89eb      	ldrh	r3, [r5, #14]
 8003d68:	b2b2      	uxth	r2, r6
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d33a      	bcc.n	8003de4 <mqtt_cyclic_timer+0xd4>
      t -= (u8_t)r->timeout_diff;
 8003d6e:	1af6      	subs	r6, r6, r3
      *tail = r->next;
 8003d70:	682b      	ldr	r3, [r5, #0]
 8003d72:	61a3      	str	r3, [r4, #24]
      if (r->cb != NULL) {
 8003d74:	686b      	ldr	r3, [r5, #4]
      t -= (u8_t)r->timeout_diff;
 8003d76:	b2f6      	uxtb	r6, r6
      if (r->cb != NULL) {
 8003d78:	b11b      	cbz	r3, 8003d82 <mqtt_cyclic_timer+0x72>
        r->cb(r->arg, ERR_TIMEOUT);
 8003d7a:	f06f 0102 	mvn.w	r1, #2
 8003d7e:	68a8      	ldr	r0, [r5, #8]
 8003d80:	4798      	blx	r3
    r->next = r;
 8003d82:	602d      	str	r5, [r5, #0]
      r = *(struct mqtt_request_t * const volatile *)tail;
 8003d84:	69a5      	ldr	r5, [r4, #24]
  while (t > 0 && r != NULL) {
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d1ec      	bne.n	8003d64 <mqtt_cyclic_timer+0x54>
    if (client->keep_alive > 0) {
 8003d8a:	8862      	ldrh	r2, [r4, #2]
 8003d8c:	2a00      	cmp	r2, #0
 8003d8e:	d0d4      	beq.n	8003d3a <mqtt_cyclic_timer+0x2a>
      client->server_watchdog++;
 8003d90:	88a3      	ldrh	r3, [r4, #4]
 8003d92:	3301      	adds	r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	80a3      	strh	r3, [r4, #4]
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive/2)) {
 8003d98:	eb02 0252 	add.w	r2, r2, r2, lsr #1
 8003d9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003da0:	4293      	cmp	r3, r2
 8003da2:	dd22      	ble.n	8003dea <mqtt_cyclic_timer+0xda>
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8003da4:	f240 1101 	movw	r1, #257	; 0x101
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff ff17 	bl	8003bdc <mqtt_close>
        restart_timer = 0;
 8003dae:	2600      	movs	r6, #0
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 8003db0:	8823      	ldrh	r3, [r4, #0]
 8003db2:	8862      	ldrh	r2, [r4, #2]
 8003db4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8003db8:	4291      	cmp	r1, r2
 8003dba:	db18      	blt.n	8003dee <mqtt_cyclic_timer+0xde>
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 8003dbc:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f7ff fe0c 	bl	80039e0 <mqtt_output_check_space>
 8003dc8:	b140      	cbz	r0, 8003ddc <mqtt_cyclic_timer+0xcc>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 8003dca:	2500      	movs	r5, #0
 8003dcc:	9500      	str	r5, [sp, #0]
 8003dce:	462b      	mov	r3, r5
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	210c      	movs	r1, #12
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff ff79 	bl	8003ccc <mqtt_output_append_fixed_header.constprop.5>
          client->cyclic_tick = 0;
 8003dda:	8025      	strh	r5, [r4, #0]
  if (restart_timer) {
 8003ddc:	2e00      	cmp	r6, #0
 8003dde:	d1ac      	bne.n	8003d3a <mqtt_cyclic_timer+0x2a>
}
 8003de0:	b003      	add	sp, #12
 8003de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      r->timeout_diff -= t;
 8003de4:	1a9e      	subs	r6, r3, r2
 8003de6:	81ee      	strh	r6, [r5, #14]
 8003de8:	e7cf      	b.n	8003d8a <mqtt_cyclic_timer+0x7a>
  u8_t restart_timer = 1;
 8003dea:	2601      	movs	r6, #1
 8003dec:	e7e0      	b.n	8003db0 <mqtt_cyclic_timer+0xa0>
        client->cyclic_tick++;
 8003dee:	3301      	adds	r3, #1
 8003df0:	8023      	strh	r3, [r4, #0]
 8003df2:	e7f3      	b.n	8003ddc <mqtt_cyclic_timer+0xcc>
 8003df4:	0800be6d 	.word	0x0800be6d
 8003df8:	0800bec6 	.word	0x0800bec6
 8003dfc:	0800bc05 	.word	0x0800bc05
 8003e00:	08003d11 	.word	0x08003d11

08003e04 <pub_ack_rec_rel_response>:
{
 8003e04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (mqtt_output_check_space(&client->output, 2)) {
 8003e08:	f100 04ec 	add.w	r4, r0, #236	; 0xec
{
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	460f      	mov	r7, r1
  if (mqtt_output_check_space(&client->output, 2)) {
 8003e10:	4620      	mov	r0, r4
 8003e12:	2102      	movs	r1, #2
{
 8003e14:	4616      	mov	r6, r2
 8003e16:	4698      	mov	r8, r3
  if (mqtt_output_check_space(&client->output, 2)) {
 8003e18:	f7ff fde2 	bl	80039e0 <mqtt_output_check_space>
 8003e1c:	b198      	cbz	r0, 8003e46 <pub_ack_rec_rel_response+0x42>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8003e1e:	2302      	movs	r3, #2
 8003e20:	4642      	mov	r2, r8
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4639      	mov	r1, r7
 8003e26:	2300      	movs	r3, #0
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f7ff ff4f 	bl	8003ccc <mqtt_output_append_fixed_header.constprop.5>
    mqtt_output_append_u16(&client->output, pkt_id);
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4620      	mov	r0, r4
 8003e32:	f7ff fd8b 	bl	800394c <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 8003e36:	4620      	mov	r0, r4
 8003e38:	68e9      	ldr	r1, [r5, #12]
 8003e3a:	f7ff fe4b 	bl	8003ad4 <mqtt_output_send>
  err_t err = ERR_OK;
 8003e3e:	2000      	movs	r0, #0
}
 8003e40:	b002      	add	sp, #8
 8003e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    err = ERR_MEM;
 8003e46:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4a:	e7f9      	b.n	8003e40 <pub_ack_rec_rel_response+0x3c>

08003e4c <mqtt_message_received>:
{
 8003e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8003e50:	f890 a06c 	ldrb.w	sl, [r0, #108]	; 0x6c
 8003e54:	ea4f 161a 	mov.w	r6, sl, lsr #4
{
 8003e58:	461c      	mov	r4, r3
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8003e5a:	2e02      	cmp	r6, #2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8003e5c:	f100 036c 	add.w	r3, r0, #108	; 0x6c
{
 8003e60:	4605      	mov	r5, r0
 8003e62:	4690      	mov	r8, r2
  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 8003e64:	eb03 0901 	add.w	r9, r3, r1
  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 8003e68:	d114      	bne.n	8003e94 <mqtt_message_received+0x48>
    if (client->conn_state == MQTT_CONNECTING) {
 8003e6a:	7a83      	ldrb	r3, [r0, #10]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d001      	beq.n	8003e74 <mqtt_message_received+0x28>
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 8003e70:	2400      	movs	r4, #0
 8003e72:	e00b      	b.n	8003e8c <mqtt_message_received+0x40>
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 8003e74:	f899 4001 	ldrb.w	r4, [r9, #1]
      if (res == MQTT_CONNECT_ACCEPTED) {
 8003e78:	b944      	cbnz	r4, 8003e8c <mqtt_message_received+0x40>
        client->conn_state = MQTT_CONNECTED;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	7283      	strb	r3, [r0, #10]
        if (client->connect_cb != 0) {
 8003e7e:	6943      	ldr	r3, [r0, #20]
        client->cyclic_tick = 0;
 8003e80:	8004      	strh	r4, [r0, #0]
        if (client->connect_cb != 0) {
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f4      	beq.n	8003e70 <mqtt_message_received+0x24>
          client->connect_cb(client, client->connect_arg, res);
 8003e86:	4622      	mov	r2, r4
 8003e88:	6901      	ldr	r1, [r0, #16]
 8003e8a:	4798      	blx	r3
}
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	b003      	add	sp, #12
 8003e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 8003e94:	2e0d      	cmp	r6, #13
 8003e96:	d0eb      	beq.n	8003e70 <mqtt_message_received+0x24>
  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 8003e98:	2e03      	cmp	r6, #3
 8003e9a:	d15e      	bne.n	8003f5a <mqtt_message_received+0x10e>
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8003e9c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8003e9e:	2a80      	cmp	r2, #128	; 0x80
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 8003ea0:	f3ca 0a41 	ubfx	sl, sl, #1, #2
    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 8003ea4:	d857      	bhi.n	8003f56 <mqtt_message_received+0x10a>
      u16_t topic_len = var_hdr_payload[0];
 8003ea6:	5c5b      	ldrb	r3, [r3, r1]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8003ea8:	f899 7001 	ldrb.w	r7, [r9, #1]
 8003eac:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 8003eb0:	b2bf      	uxth	r7, r7
      if ((after_topic + (qos? 2 : 1)) > length) {
 8003eb2:	f1ba 0f00 	cmp.w	sl, #0
      after_topic = 2 + topic_len;
 8003eb6:	f107 0602 	add.w	r6, r7, #2
      if ((after_topic + (qos? 2 : 1)) > length) {
 8003eba:	bf14      	ite	ne
 8003ebc:	2302      	movne	r3, #2
 8003ebe:	2301      	moveq	r3, #1
      after_topic = 2 + topic_len;
 8003ec0:	b2b6      	uxth	r6, r6
      if ((after_topic + (qos? 2 : 1)) > length) {
 8003ec2:	4433      	add	r3, r6
 8003ec4:	4543      	cmp	r3, r8
 8003ec6:	dd02      	ble.n	8003ece <mqtt_message_received+0x82>
  return MQTT_CONNECT_DISCONNECTED;
 8003ec8:	f44f 7480 	mov.w	r4, #256	; 0x100
 8003ecc:	e7de      	b.n	8003e8c <mqtt_message_received+0x40>
      if (qos > 0) {
 8003ece:	f1ba 0f00 	cmp.w	sl, #0
 8003ed2:	d03d      	beq.n	8003f50 <mqtt_message_received+0x104>
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8003ed4:	f819 2006 	ldrb.w	r2, [r9, r6]
 8003ed8:	444e      	add	r6, r9
 8003eda:	7873      	ldrb	r3, [r6, #1]
        after_topic += 2;
 8003edc:	1d3e      	adds	r6, r7, #4
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 8003ede:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003ee2:	8103      	strh	r3, [r0, #8]
        after_topic += 2;
 8003ee4:	b2b6      	uxth	r6, r6
      topic = var_hdr_payload + 2;
 8003ee6:	f109 0b02 	add.w	fp, r9, #2
      payload_length = length - after_topic;
 8003eea:	eba8 0806 	sub.w	r8, r8, r6
      bkp = topic[topic_len];
 8003eee:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8003ef2:	9301      	str	r3, [sp, #4]
      topic[topic_len] = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f80b 3007 	strb.w	r3, [fp, r7]
      if (client->pub_cb != NULL) {
 8003efa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
      payload_length = length - after_topic;
 8003efc:	fa1f f888 	uxth.w	r8, r8
      if (client->pub_cb != NULL) {
 8003f00:	b123      	cbz	r3, 8003f0c <mqtt_message_received+0xc0>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8003f02:	eb08 0204 	add.w	r2, r8, r4
 8003f06:	4659      	mov	r1, fp
 8003f08:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8003f0a:	4798      	blx	r3
      topic[topic_len] = bkp;
 8003f0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f10:	f80b 3007 	strb.w	r3, [fp, r7]
    if (payload_length > 0 || remaining_length == 0) {
 8003f14:	f1b8 0f00 	cmp.w	r8, #0
 8003f18:	d101      	bne.n	8003f1e <mqtt_message_received+0xd2>
 8003f1a:	2c00      	cmp	r4, #0
 8003f1c:	d1a8      	bne.n	8003e70 <mqtt_message_received+0x24>
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 8003f1e:	fab4 f384 	clz	r3, r4
 8003f22:	6e2f      	ldr	r7, [r5, #96]	; 0x60
 8003f24:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	4642      	mov	r2, r8
 8003f2a:	eb09 0106 	add.w	r1, r9, r6
 8003f2e:	47b8      	blx	r7
      if (remaining_length == 0 && qos > 0) {
 8003f30:	2c00      	cmp	r4, #0
 8003f32:	d19d      	bne.n	8003e70 <mqtt_message_received+0x24>
 8003f34:	f1ba 0f00 	cmp.w	sl, #0
 8003f38:	d09a      	beq.n	8003e70 <mqtt_message_received+0x24>
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8003f3a:	f1ba 0f01 	cmp.w	sl, #1
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8003f3e:	4623      	mov	r3, r4
 8003f40:	892a      	ldrh	r2, [r5, #8]
 8003f42:	bf0c      	ite	eq
 8003f44:	2104      	moveq	r1, #4
 8003f46:	2105      	movne	r1, #5
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7ff ff5b 	bl	8003e04 <pub_ack_rec_rel_response>
 8003f4e:	e79d      	b.n	8003e8c <mqtt_message_received+0x40>
        client->inpub_pkt_id = 0;
 8003f50:	f8a0 a008 	strh.w	sl, [r0, #8]
 8003f54:	e7c7      	b.n	8003ee6 <mqtt_message_received+0x9a>
    u16_t payload_offset = 0;
 8003f56:	2600      	movs	r6, #0
 8003f58:	e7dc      	b.n	8003f14 <mqtt_message_received+0xc8>
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8003f5a:	5c59      	ldrb	r1, [r3, r1]
    pkt_id |= (u16_t)var_hdr_payload[1];
 8003f5c:	f899 2001 	ldrb.w	r2, [r9, #1]
    if (pkt_id == 0) {
 8003f60:	ea52 2201 	orrs.w	r2, r2, r1, lsl #8
 8003f64:	d0b0      	beq.n	8003ec8 <mqtt_message_received+0x7c>
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 8003f66:	2e05      	cmp	r6, #5
 8003f68:	d104      	bne.n	8003f74 <mqtt_message_received+0x128>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	2106      	movs	r1, #6
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8003f6e:	f7ff ff49 	bl	8003e04 <pub_ack_rec_rel_response>
 8003f72:	e77d      	b.n	8003e70 <mqtt_message_received+0x24>
    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 8003f74:	2e06      	cmp	r6, #6
 8003f76:	d102      	bne.n	8003f7e <mqtt_message_received+0x132>
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2107      	movs	r1, #7
 8003f7c:	e7f7      	b.n	8003f6e <mqtt_message_received+0x122>
              pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8003f7e:	2e0b      	cmp	r6, #11
 8003f80:	bf9d      	ittte	ls
 8003f82:	f44f 6329 	movls.w	r3, #2704	; 0xa90
 8003f86:	40f3      	lsrls	r3, r6
 8003f88:	43db      	mvnls	r3, r3
 8003f8a:	2301      	movhi	r3, #1
 8003f8c:	f013 0401 	ands.w	r4, r3, #1
 8003f90:	d19a      	bne.n	8003ec8 <mqtt_message_received+0x7c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8003f92:	4611      	mov	r1, r2
 8003f94:	3018      	adds	r0, #24
 8003f96:	f7ff fd73 	bl	8003a80 <mqtt_take_request>
      if (r != NULL) {
 8003f9a:	4605      	mov	r5, r0
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	f43f af67 	beq.w	8003e70 <mqtt_message_received+0x24>
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8003fa2:	2e09      	cmp	r6, #9
 8003fa4:	d10f      	bne.n	8003fc6 <mqtt_message_received+0x17a>
          if (length < 3) {
 8003fa6:	f1b8 0f02 	cmp.w	r8, #2
 8003faa:	d98d      	bls.n	8003ec8 <mqtt_message_received+0x7c>
  if (r->cb != NULL) {
 8003fac:	6843      	ldr	r3, [r0, #4]
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8003fae:	f899 2002 	ldrb.w	r2, [r9, #2]
  if (r->cb != NULL) {
 8003fb2:	b133      	cbz	r3, 8003fc2 <mqtt_message_received+0x176>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 8003fb4:	2a03      	cmp	r2, #3
 8003fb6:	bf2c      	ite	cs
 8003fb8:	f06f 010c 	mvncs.w	r1, #12
 8003fbc:	2100      	movcc	r1, #0
          r->cb(r->arg, ERR_OK);
 8003fbe:	68a8      	ldr	r0, [r5, #8]
 8003fc0:	4798      	blx	r3
    r->next = r;
 8003fc2:	602d      	str	r5, [r5, #0]
 8003fc4:	e754      	b.n	8003e70 <mqtt_message_received+0x24>
        } else if (r->cb != NULL) {
 8003fc6:	6843      	ldr	r3, [r0, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0fa      	beq.n	8003fc2 <mqtt_message_received+0x176>
          r->cb(r->arg, ERR_OK);
 8003fcc:	4621      	mov	r1, r4
 8003fce:	e7f6      	b.n	8003fbe <mqtt_message_received+0x172>

08003fd0 <mqtt_tcp_recv_cb>:
{
 8003fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd4:	460d      	mov	r5, r1
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	4691      	mov	r9, r2
 8003fda:	469a      	mov	sl, r3
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8003fdc:	4604      	mov	r4, r0
 8003fde:	b930      	cbnz	r0, 8003fee <mqtt_tcp_recv_cb+0x1e>
 8003fe0:	4b5a      	ldr	r3, [pc, #360]	; (800414c <mqtt_tcp_recv_cb+0x17c>)
 8003fe2:	495b      	ldr	r1, [pc, #364]	; (8004150 <mqtt_tcp_recv_cb+0x180>)
 8003fe4:	485b      	ldr	r0, [pc, #364]	; (8004154 <mqtt_tcp_recv_cb+0x184>)
 8003fe6:	f240 325f 	movw	r2, #863	; 0x35f
 8003fea:	f006 fcbf 	bl	800a96c <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	42ab      	cmp	r3, r5
 8003ff2:	d006      	beq.n	8004002 <mqtt_tcp_recv_cb+0x32>
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <mqtt_tcp_recv_cb+0x17c>)
 8003ff6:	4958      	ldr	r1, [pc, #352]	; (8004158 <mqtt_tcp_recv_cb+0x188>)
 8003ff8:	4856      	ldr	r0, [pc, #344]	; (8004154 <mqtt_tcp_recv_cb+0x184>)
 8003ffa:	f44f 7258 	mov.w	r2, #864	; 0x360
 8003ffe:	f006 fcb5 	bl	800a96c <iprintf>
  if (p == NULL) {
 8004002:	f1b9 0f00 	cmp.w	r9, #0
 8004006:	d109      	bne.n	800401c <mqtt_tcp_recv_cb+0x4c>
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8004008:	f44f 7180 	mov.w	r1, #256	; 0x100
 800400c:	4620      	mov	r0, r4
 800400e:	f7ff fde5 	bl	8003bdc <mqtt_close>
  return ERR_OK;
 8004012:	46ca      	mov	sl, r9
}
 8004014:	4650      	mov	r0, sl
 8004016:	b005      	add	sp, #20
 8004018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (err != ERR_OK) {
 800401c:	f1ba 0f00 	cmp.w	sl, #0
 8004020:	d003      	beq.n	800402a <mqtt_tcp_recv_cb+0x5a>
      pbuf_free(p);
 8004022:	4648      	mov	r0, r9
 8004024:	f002 f8e6 	bl	80061f4 <pbuf_free>
      return err;
 8004028:	e7f4      	b.n	8004014 <mqtt_tcp_recv_cb+0x44>
    tcp_recved(pcb, p->tot_len);
 800402a:	4628      	mov	r0, r5
 800402c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8004030:	f002 fcae 	bl	8006990 <tcp_recved>
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 8004034:	f104 036c 	add.w	r3, r4, #108	; 0x6c
  u8_t b = 0;
 8004038:	46d3      	mov	fp, sl
  u8_t fixed_hdr_idx = 0;
 800403a:	4656      	mov	r6, sl
  u32_t msg_rem_len = 0;
 800403c:	4655      	mov	r5, sl
  u16_t in_offset = 0;
 800403e:	46d0      	mov	r8, sl
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 8004040:	9303      	str	r3, [sp, #12]
  while (p->tot_len > in_offset) {
 8004042:	f8b9 7008 	ldrh.w	r7, [r9, #8]
 8004046:	45b8      	cmp	r8, r7
 8004048:	d30e      	bcc.n	8004068 <mqtt_tcp_recv_cb+0x98>
  return MQTT_CONNECT_ACCEPTED;
 800404a:	2700      	movs	r7, #0
    pbuf_free(p);
 800404c:	4648      	mov	r0, r9
 800404e:	f002 f8d1 	bl	80061f4 <pbuf_free>
    if (res != MQTT_CONNECT_ACCEPTED) {
 8004052:	b11f      	cbz	r7, 800405c <mqtt_tcp_recv_cb+0x8c>
      mqtt_close(client, res);
 8004054:	4639      	mov	r1, r7
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff fdc0 	bl	8003bdc <mqtt_close>
    if (client->keep_alive != 0) {
 800405c:	8863      	ldrh	r3, [r4, #2]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0d8      	beq.n	8004014 <mqtt_tcp_recv_cb+0x44>
      client->server_watchdog = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	80a3      	strh	r3, [r4, #4]
 8004066:	e7d5      	b.n	8004014 <mqtt_tcp_recv_cb+0x44>
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 8004068:	2e01      	cmp	r6, #1
 800406a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800406c:	d902      	bls.n	8004074 <mqtt_tcp_recv_cb+0xa4>
 800406e:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8004072:	d031      	beq.n	80040d8 <mqtt_tcp_recv_cb+0x108>
      if (fixed_hdr_idx < client->msg_idx) {
 8004074:	4296      	cmp	r6, r2
 8004076:	d21b      	bcs.n	80040b0 <mqtt_tcp_recv_cb+0xe0>
        b = client->rx_buffer[fixed_hdr_idx];
 8004078:	19a3      	adds	r3, r4, r6
 800407a:	f893 b06c 	ldrb.w	fp, [r3, #108]	; 0x6c
      fixed_hdr_idx++;
 800407e:	3601      	adds	r6, #1
 8004080:	b2f6      	uxtb	r6, r6
      if (fixed_hdr_idx >= 2) {
 8004082:	2e01      	cmp	r6, #1
 8004084:	d9dd      	bls.n	8004042 <mqtt_tcp_recv_cb+0x72>
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004086:	1eb2      	subs	r2, r6, #2
 8004088:	f00b 037f 	and.w	r3, fp, #127	; 0x7f
 800408c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8004090:	4093      	lsls	r3, r2
        if ((b & 0x80) == 0) {
 8004092:	f01b 0f80 	tst.w	fp, #128	; 0x80
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 8004096:	ea45 0503 	orr.w	r5, r5, r3
        if ((b & 0x80) == 0) {
 800409a:	d1d2      	bne.n	8004042 <mqtt_tcp_recv_cb+0x72>
          if (msg_rem_len == 0) {
 800409c:	b9c5      	cbnz	r5, 80040d0 <mqtt_tcp_recv_cb+0x100>
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 800409e:	462b      	mov	r3, r5
 80040a0:	462a      	mov	r2, r5
 80040a2:	4631      	mov	r1, r6
 80040a4:	4620      	mov	r0, r4
 80040a6:	f7ff fed1 	bl	8003e4c <mqtt_message_received>
          client->msg_idx = 0;
 80040aa:	66a5      	str	r5, [r4, #104]	; 0x68
          fixed_hdr_idx = 0;
 80040ac:	462e      	mov	r6, r5
 80040ae:	e7c8      	b.n	8004042 <mqtt_tcp_recv_cb+0x72>
        b = pbuf_get_at(p, in_offset++);
 80040b0:	4641      	mov	r1, r8
 80040b2:	4648      	mov	r0, r9
 80040b4:	f002 fb95 	bl	80067e2 <pbuf_get_at>
        client->rx_buffer[client->msg_idx++] = b;
 80040b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 80040ba:	f108 0701 	add.w	r7, r8, #1
        client->rx_buffer[client->msg_idx++] = b;
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	4423      	add	r3, r4
        b = pbuf_get_at(p, in_offset++);
 80040c2:	b2bf      	uxth	r7, r7
        client->rx_buffer[client->msg_idx++] = b;
 80040c4:	66a2      	str	r2, [r4, #104]	; 0x68
        b = pbuf_get_at(p, in_offset++);
 80040c6:	4683      	mov	fp, r0
        client->rx_buffer[client->msg_idx++] = b;
 80040c8:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
        b = pbuf_get_at(p, in_offset++);
 80040cc:	46b8      	mov	r8, r7
 80040ce:	e7d6      	b.n	800407e <mqtt_tcp_recv_cb+0xae>
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 80040d0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80040d2:	1af3      	subs	r3, r6, r3
 80040d4:	441d      	add	r5, r3
 80040d6:	e7b4      	b.n	8004042 <mqtt_tcp_recv_cb+0x72>
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80040d8:	f1c6 0180 	rsb	r1, r6, #128	; 0x80
 80040dc:	1b92      	subs	r2, r2, r6
 80040de:	fbb2 f3f1 	udiv	r3, r2, r1
 80040e2:	fb01 2213 	mls	r2, r1, r3, r2
 80040e6:	b293      	uxth	r3, r2
 80040e8:	1999      	adds	r1, r3, r6
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80040ea:	eba7 0708 	sub.w	r7, r7, r8
 80040ee:	b2bf      	uxth	r7, r7
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80040f0:	b289      	uxth	r1, r1
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80040f2:	42bd      	cmp	r5, r7
      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 80040f4:	9301      	str	r3, [sp, #4]
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80040f6:	f1c1 0380 	rsb	r3, r1, #128	; 0x80
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 80040fa:	bf98      	it	ls
 80040fc:	b2af      	uxthls	r7, r5
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 80040fe:	b29b      	uxth	r3, r3
 8004100:	429f      	cmp	r7, r3
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 8004102:	9803      	ldr	r0, [sp, #12]
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	bf28      	it	cs
 8004108:	461f      	movcs	r7, r3
      pbuf_copy_partial(p, client->rx_buffer+cpy_start, cpy_len, in_offset);
 800410a:	4401      	add	r1, r0
 800410c:	4643      	mov	r3, r8
 800410e:	463a      	mov	r2, r7
 8004110:	4648      	mov	r0, r9
 8004112:	f002 fb0d 	bl	8006730 <pbuf_copy_partial>
      client->msg_idx += cpy_len;
 8004116:	6ea3      	ldr	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 8004118:	44b8      	add	r8, r7
      client->msg_idx += cpy_len;
 800411a:	443b      	add	r3, r7
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 800411c:	1bed      	subs	r5, r5, r7
      client->msg_idx += cpy_len;
 800411e:	66a3      	str	r3, [r4, #104]	; 0x68
      in_offset += cpy_len;
 8004120:	fa1f f888 	uxth.w	r8, r8
      if (msg_rem_len == 0 || cpy_len == buffer_space) {
 8004124:	d002      	beq.n	800412c <mqtt_tcp_recv_cb+0x15c>
 8004126:	9b02      	ldr	r3, [sp, #8]
 8004128:	42bb      	cmp	r3, r7
 800412a:	d18a      	bne.n	8004042 <mqtt_tcp_recv_cb+0x72>
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 800412c:	9b01      	ldr	r3, [sp, #4]
 800412e:	443b      	add	r3, r7
 8004130:	461a      	mov	r2, r3
 8004132:	b292      	uxth	r2, r2
 8004134:	462b      	mov	r3, r5
 8004136:	4631      	mov	r1, r6
 8004138:	4620      	mov	r0, r4
 800413a:	f7ff fe87 	bl	8003e4c <mqtt_message_received>
        if (res != MQTT_CONNECT_ACCEPTED) {
 800413e:	4607      	mov	r7, r0
 8004140:	2800      	cmp	r0, #0
 8004142:	d183      	bne.n	800404c <mqtt_tcp_recv_cb+0x7c>
        if (msg_rem_len == 0) {
 8004144:	2d00      	cmp	r5, #0
 8004146:	f47f af7c 	bne.w	8004042 <mqtt_tcp_recv_cb+0x72>
 800414a:	e7ae      	b.n	80040aa <mqtt_tcp_recv_cb+0xda>
 800414c:	0800be6d 	.word	0x0800be6d
 8004150:	0800c0b5 	.word	0x0800c0b5
 8004154:	0800bc05 	.word	0x0800bc05
 8004158:	0800c0d6 	.word	0x0800c0d6

0800415c <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 800415c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004160:	b085      	sub	sp, #20
 8004162:	468b      	mov	fp, r1
 8004164:	4692      	mov	sl, r2
 8004166:	9302      	str	r3, [sp, #8]
 8004168:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
  size_t topic_strlen;
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 800416c:	4605      	mov	r5, r0
 800416e:	b930      	cbnz	r0, 800417e <mqtt_publish+0x22>
 8004170:	4b4c      	ldr	r3, [pc, #304]	; (80042a4 <mqtt_publish+0x148>)
 8004172:	494d      	ldr	r1, [pc, #308]	; (80042a8 <mqtt_publish+0x14c>)
 8004174:	484d      	ldr	r0, [pc, #308]	; (80042ac <mqtt_publish+0x150>)
 8004176:	f240 420b 	movw	r2, #1035	; 0x40b
 800417a:	f006 fbf7 	bl	800a96c <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 800417e:	f1bb 0f00 	cmp.w	fp, #0
 8004182:	d106      	bne.n	8004192 <mqtt_publish+0x36>
 8004184:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <mqtt_publish+0x148>)
 8004186:	494a      	ldr	r1, [pc, #296]	; (80042b0 <mqtt_publish+0x154>)
 8004188:	4848      	ldr	r0, [pc, #288]	; (80042ac <mqtt_publish+0x150>)
 800418a:	f240 420c 	movw	r2, #1036	; 0x40c
 800418e:	f006 fbed 	bl	800a96c <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8004192:	7aab      	ldrb	r3, [r5, #10]
 8004194:	b95b      	cbnz	r3, 80041ae <mqtt_publish+0x52>
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <mqtt_publish+0x148>)
 8004198:	4946      	ldr	r1, [pc, #280]	; (80042b4 <mqtt_publish+0x158>)
 800419a:	4844      	ldr	r0, [pc, #272]	; (80042ac <mqtt_publish+0x150>)
 800419c:	f240 420d 	movw	r2, #1037	; 0x40d
 80041a0:	f006 fbe4 	bl	800a96c <iprintf>
 80041a4:	f06f 000a 	mvn.w	r0, #10
  }

  mqtt_append_request(&client->pend_req_queue, r);
  mqtt_output_send(&client->output, client->conn);
  return ERR_OK;
}
 80041a8:	b005      	add	sp, #20
 80041aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  topic_strlen = strlen(topic);
 80041ae:	4658      	mov	r0, fp
 80041b0:	f7fc f818 	bl	80001e4 <strlen>
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80041b4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80041b8:	4298      	cmp	r0, r3
 80041ba:	d909      	bls.n	80041d0 <mqtt_publish+0x74>
 80041bc:	4b39      	ldr	r3, [pc, #228]	; (80042a4 <mqtt_publish+0x148>)
 80041be:	493e      	ldr	r1, [pc, #248]	; (80042b8 <mqtt_publish+0x15c>)
 80041c0:	f44f 6282 	mov.w	r2, #1040	; 0x410
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80041c4:	4839      	ldr	r0, [pc, #228]	; (80042ac <mqtt_publish+0x150>)
 80041c6:	f006 fbd1 	bl	800a96c <iprintf>
 80041ca:	f06f 000f 	mvn.w	r0, #15
 80041ce:	e7eb      	b.n	80041a8 <mqtt_publish+0x4c>
  topic_len = (u16_t)topic_strlen;
 80041d0:	b283      	uxth	r3, r0
 80041d2:	9303      	str	r3, [sp, #12]
  total_len = 2 + topic_len + payload_length;
 80041d4:	9b02      	ldr	r3, [sp, #8]
 80041d6:	1c84      	adds	r4, r0, #2
 80041d8:	441c      	add	r4, r3
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 80041da:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80041de:	db04      	blt.n	80041ea <mqtt_publish+0x8e>
 80041e0:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <mqtt_publish+0x148>)
 80041e2:	4936      	ldr	r1, [pc, #216]	; (80042bc <mqtt_publish+0x160>)
 80041e4:	f240 4213 	movw	r2, #1043	; 0x413
 80041e8:	e7ec      	b.n	80041c4 <mqtt_publish+0x68>
  remaining_length = (u16_t)total_len;
 80041ea:	b2a4      	uxth	r4, r4
  if (qos > 0) {
 80041ec:	f1b9 0f00 	cmp.w	r9, #0
 80041f0:	d01e      	beq.n	8004230 <mqtt_publish+0xd4>
  client->pkt_id_seq++;
 80041f2:	88ee      	ldrh	r6, [r5, #6]
 80041f4:	3601      	adds	r6, #1
 80041f6:	b2b6      	uxth	r6, r6
    client->pkt_id_seq++;
 80041f8:	2e00      	cmp	r6, #0
    remaining_length += 2;
 80041fa:	f104 0402 	add.w	r4, r4, #2
    client->pkt_id_seq++;
 80041fe:	bf08      	it	eq
 8004200:	2601      	moveq	r6, #1
    remaining_length += 2;
 8004202:	b2a4      	uxth	r4, r4
 8004204:	80ee      	strh	r6, [r5, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 8004206:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004208:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800420a:	4631      	mov	r1, r6
 800420c:	f105 001c 	add.w	r0, r5, #28
 8004210:	f7ff fbc4 	bl	800399c <mqtt_create_request>
  if (r == NULL) {
 8004214:	4680      	mov	r8, r0
 8004216:	b140      	cbz	r0, 800422a <mqtt_publish+0xce>
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8004218:	f105 07ec 	add.w	r7, r5, #236	; 0xec
 800421c:	4621      	mov	r1, r4
 800421e:	4638      	mov	r0, r7
 8004220:	f7ff fbde 	bl	80039e0 <mqtt_output_check_space>
 8004224:	b930      	cbnz	r0, 8004234 <mqtt_publish+0xd8>
    r->next = r;
 8004226:	f8c8 8000 	str.w	r8, [r8]
    return ERR_MEM;
 800422a:	f04f 30ff 	mov.w	r0, #4294967295
 800422e:	e7bb      	b.n	80041a8 <mqtt_publish+0x4c>
    pkt_id = 0;
 8004230:	464e      	mov	r6, r9
 8004232:	e7e8      	b.n	8004206 <mqtt_publish+0xaa>
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8004234:	464a      	mov	r2, r9
 8004236:	2103      	movs	r1, #3
 8004238:	4638      	mov	r0, r7
 800423a:	9400      	str	r4, [sp, #0]
 800423c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8004240:	f7ff fd44 	bl	8003ccc <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_string(&client->output, topic, topic_len);
 8004244:	9a03      	ldr	r2, [sp, #12]
 8004246:	4659      	mov	r1, fp
 8004248:	4638      	mov	r0, r7
 800424a:	f7ff fb8c 	bl	8003966 <mqtt_output_append_string>
  if (qos > 0) {
 800424e:	f1b9 0f00 	cmp.w	r9, #0
 8004252:	d003      	beq.n	800425c <mqtt_publish+0x100>
    mqtt_output_append_u16(&client->output, pkt_id);
 8004254:	4631      	mov	r1, r6
 8004256:	4638      	mov	r0, r7
 8004258:	f7ff fb78 	bl	800394c <mqtt_output_append_u16>
  if ((payload != NULL) && (payload_length > 0)) {
 800425c:	f1ba 0f00 	cmp.w	sl, #0
 8004260:	d10a      	bne.n	8004278 <mqtt_publish+0x11c>
  mqtt_append_request(&client->pend_req_queue, r);
 8004262:	4641      	mov	r1, r8
 8004264:	f105 0018 	add.w	r0, r5, #24
 8004268:	f7ff fbdc 	bl	8003a24 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 800426c:	4638      	mov	r0, r7
 800426e:	68e9      	ldr	r1, [r5, #12]
 8004270:	f7ff fc30 	bl	8003ad4 <mqtt_output_send>
  return ERR_OK;
 8004274:	2000      	movs	r0, #0
 8004276:	e797      	b.n	80041a8 <mqtt_publish+0x4c>
  if ((payload != NULL) && (payload_length > 0)) {
 8004278:	9b02      	ldr	r3, [sp, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f1      	beq.n	8004262 <mqtt_publish+0x106>
 800427e:	4652      	mov	r2, sl
  for (n = 0; n < length; n++) {
 8004280:	eba2 030a 	sub.w	r3, r2, sl
 8004284:	9902      	ldr	r1, [sp, #8]
 8004286:	b29b      	uxth	r3, r3
 8004288:	428b      	cmp	r3, r1
 800428a:	d2ea      	bcs.n	8004262 <mqtt_publish+0x106>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 800428c:	f8b5 30ec 	ldrh.w	r3, [r5, #236]	; 0xec
 8004290:	1c59      	adds	r1, r3, #1
 8004292:	f8a5 10ec 	strh.w	r1, [r5, #236]	; 0xec
 8004296:	fa55 f383 	uxtab	r3, r5, r3
 800429a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800429e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 80042a2:	e7ed      	b.n	8004280 <mqtt_publish+0x124>
 80042a4:	0800be6d 	.word	0x0800be6d
 80042a8:	0800bf0c 	.word	0x0800bf0c
 80042ac:	0800bc05 	.word	0x0800bc05
 80042b0:	0800bf29 	.word	0x0800bf29
 80042b4:	0800bf45 	.word	0x0800bf45
 80042b8:	0800bf64 	.word	0x0800bf64
 80042bc:	0800bf88 	.word	0x0800bf88

080042c0 <mqtt_sub_unsub>:
 * @param sub 1 for subscribe, 0 for unsubscribe
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_sub_unsub(mqtt_client_t *client, const char *topic, u8_t qos, mqtt_request_cb_t cb, void *arg, u8_t sub)
{
 80042c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c4:	b085      	sub	sp, #20
 80042c6:	468b      	mov	fp, r1
 80042c8:	4691      	mov	r9, r2
 80042ca:	461f      	mov	r7, r3
 80042cc:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
  u16_t topic_len;
  u16_t remaining_length;
  u16_t pkt_id;
  struct mqtt_request_t *r;

  LWIP_ASSERT("mqtt_sub_unsub: client != NULL", client);
 80042d0:	4604      	mov	r4, r0
 80042d2:	b930      	cbnz	r0, 80042e2 <mqtt_sub_unsub+0x22>
 80042d4:	4b48      	ldr	r3, [pc, #288]	; (80043f8 <mqtt_sub_unsub+0x138>)
 80042d6:	4949      	ldr	r1, [pc, #292]	; (80043fc <mqtt_sub_unsub+0x13c>)
 80042d8:	4849      	ldr	r0, [pc, #292]	; (8004400 <mqtt_sub_unsub+0x140>)
 80042da:	f240 4255 	movw	r2, #1109	; 0x455
 80042de:	f006 fb45 	bl	800a96c <iprintf>
  LWIP_ASSERT("mqtt_sub_unsub: topic != NULL", topic);
 80042e2:	f1bb 0f00 	cmp.w	fp, #0
 80042e6:	d106      	bne.n	80042f6 <mqtt_sub_unsub+0x36>
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <mqtt_sub_unsub+0x138>)
 80042ea:	4946      	ldr	r1, [pc, #280]	; (8004404 <mqtt_sub_unsub+0x144>)
 80042ec:	4844      	ldr	r0, [pc, #272]	; (8004400 <mqtt_sub_unsub+0x140>)
 80042ee:	f240 4256 	movw	r2, #1110	; 0x456
 80042f2:	f006 fb3b 	bl	800a96c <iprintf>

  topic_strlen = strlen(topic);
 80042f6:	4658      	mov	r0, fp
 80042f8:	f7fb ff74 	bl	80001e4 <strlen>
  LWIP_ERROR("mqtt_sub_unsub: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 80042fc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004300:	4298      	cmp	r0, r3
 8004302:	d90b      	bls.n	800431c <mqtt_sub_unsub+0x5c>
 8004304:	4b3c      	ldr	r3, [pc, #240]	; (80043f8 <mqtt_sub_unsub+0x138>)
 8004306:	4940      	ldr	r1, [pc, #256]	; (8004408 <mqtt_sub_unsub+0x148>)
 8004308:	f240 4259 	movw	r2, #1113	; 0x459
  topic_len = (u16_t)topic_strlen;
  /* Topic string, pkt_id, qos for subscribe */
  total_len =  topic_len + 2 + 2 + (sub != 0);
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800430c:	483c      	ldr	r0, [pc, #240]	; (8004400 <mqtt_sub_unsub+0x140>)
 800430e:	f006 fb2d 	bl	800a96c <iprintf>
 8004312:	f06f 000f 	mvn.w	r0, #15
  }

  mqtt_append_request(&client->pend_req_queue, r);
  mqtt_output_send(&client->output, client->conn);
  return ERR_OK;
}
 8004316:	b005      	add	sp, #20
 8004318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  total_len =  topic_len + 2 + 2 + (sub != 0);
 800431c:	1d05      	adds	r5, r0, #4
 800431e:	f1ba 0f00 	cmp.w	sl, #0
 8004322:	bf18      	it	ne
 8004324:	3501      	addne	r5, #1
  topic_len = (u16_t)topic_strlen;
 8004326:	b283      	uxth	r3, r0
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8004328:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
  topic_len = (u16_t)topic_strlen;
 800432c:	9303      	str	r3, [sp, #12]
  LWIP_ERROR("mqtt_sub_unsub: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 800432e:	db04      	blt.n	800433a <mqtt_sub_unsub+0x7a>
 8004330:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <mqtt_sub_unsub+0x138>)
 8004332:	4936      	ldr	r1, [pc, #216]	; (800440c <mqtt_sub_unsub+0x14c>)
 8004334:	f240 425d 	movw	r2, #1117	; 0x45d
 8004338:	e7e8      	b.n	800430c <mqtt_sub_unsub+0x4c>
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 800433a:	f1b9 0f02 	cmp.w	r9, #2
  remaining_length = (u16_t)total_len;
 800433e:	b2ad      	uxth	r5, r5
  LWIP_ASSERT("mqtt_sub_unsub: qos < 3", qos < 3);
 8004340:	d906      	bls.n	8004350 <mqtt_sub_unsub+0x90>
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <mqtt_sub_unsub+0x138>)
 8004344:	4932      	ldr	r1, [pc, #200]	; (8004410 <mqtt_sub_unsub+0x150>)
 8004346:	482e      	ldr	r0, [pc, #184]	; (8004400 <mqtt_sub_unsub+0x140>)
 8004348:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800434c:	f006 fb0e 	bl	800a96c <iprintf>
  if (client->conn_state == TCP_DISCONNECTED) {
 8004350:	7aa3      	ldrb	r3, [r4, #10]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04c      	beq.n	80043f0 <mqtt_sub_unsub+0x130>
  client->pkt_id_seq++;
 8004356:	88e6      	ldrh	r6, [r4, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 8004358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  client->pkt_id_seq++;
 800435a:	3601      	adds	r6, #1
 800435c:	b2b6      	uxth	r6, r6
    client->pkt_id_seq++;
 800435e:	2e00      	cmp	r6, #0
 8004360:	bf08      	it	eq
 8004362:	2601      	moveq	r6, #1
 8004364:	80e6      	strh	r6, [r4, #6]
  r = mqtt_create_request(client->req_list, pkt_id, cb, arg);
 8004366:	463a      	mov	r2, r7
 8004368:	4631      	mov	r1, r6
 800436a:	f104 001c 	add.w	r0, r4, #28
 800436e:	f7ff fb15 	bl	800399c <mqtt_create_request>
  if (r == NULL) {
 8004372:	4680      	mov	r8, r0
 8004374:	b140      	cbz	r0, 8004388 <mqtt_sub_unsub+0xc8>
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8004376:	f104 07ec 	add.w	r7, r4, #236	; 0xec
 800437a:	4629      	mov	r1, r5
 800437c:	4638      	mov	r0, r7
 800437e:	f7ff fb2f 	bl	80039e0 <mqtt_output_check_space>
 8004382:	b920      	cbnz	r0, 800438e <mqtt_sub_unsub+0xce>
    r->next = r;
 8004384:	f8c8 8000 	str.w	r8, [r8]
    return ERR_MEM;
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	e7c3      	b.n	8004316 <mqtt_sub_unsub+0x56>
  mqtt_output_append_fixed_header(&client->output, sub ? MQTT_MSG_TYPE_SUBSCRIBE : MQTT_MSG_TYPE_UNSUBSCRIBE, 0, 1, 0, remaining_length);
 800438e:	f1ba 0f00 	cmp.w	sl, #0
 8004392:	bf14      	ite	ne
 8004394:	2108      	movne	r1, #8
 8004396:	210a      	moveq	r1, #10
 8004398:	2201      	movs	r2, #1
 800439a:	2300      	movs	r3, #0
 800439c:	4638      	mov	r0, r7
 800439e:	9500      	str	r5, [sp, #0]
 80043a0:	f7ff fc94 	bl	8003ccc <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_u16(&client->output, pkt_id);
 80043a4:	4631      	mov	r1, r6
 80043a6:	4638      	mov	r0, r7
 80043a8:	f7ff fad0 	bl	800394c <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, topic, topic_len);
 80043ac:	9a03      	ldr	r2, [sp, #12]
 80043ae:	4659      	mov	r1, fp
 80043b0:	4638      	mov	r0, r7
 80043b2:	f7ff fad8 	bl	8003966 <mqtt_output_append_string>
  if (sub != 0) {
 80043b6:	f1ba 0f00 	cmp.w	sl, #0
 80043ba:	d00e      	beq.n	80043da <mqtt_sub_unsub+0x11a>
  mqtt_ringbuf_put(rb, value);
 80043bc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 80043c0:	f1b9 0f02 	cmp.w	r9, #2
  mqtt_ringbuf_put(rb, value);
 80043c4:	f103 0201 	add.w	r2, r3, #1
 80043c8:	fa54 f383 	uxtab	r3, r4, r3
    mqtt_output_append_u8(&client->output, LWIP_MIN(qos, 2));
 80043cc:	bf28      	it	cs
 80043ce:	f04f 0902 	movcs.w	r9, #2
  mqtt_ringbuf_put(rb, value);
 80043d2:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
 80043d6:	f883 90f0 	strb.w	r9, [r3, #240]	; 0xf0
  mqtt_append_request(&client->pend_req_queue, r);
 80043da:	4641      	mov	r1, r8
 80043dc:	f104 0018 	add.w	r0, r4, #24
 80043e0:	f7ff fb20 	bl	8003a24 <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 80043e4:	4638      	mov	r0, r7
 80043e6:	68e1      	ldr	r1, [r4, #12]
 80043e8:	f7ff fb74 	bl	8003ad4 <mqtt_output_send>
  return ERR_OK;
 80043ec:	2000      	movs	r0, #0
 80043ee:	e792      	b.n	8004316 <mqtt_sub_unsub+0x56>
    return ERR_CONN;
 80043f0:	f06f 000a 	mvn.w	r0, #10
 80043f4:	e78f      	b.n	8004316 <mqtt_sub_unsub+0x56>
 80043f6:	bf00      	nop
 80043f8:	0800be6d 	.word	0x0800be6d
 80043fc:	0800bfd4 	.word	0x0800bfd4
 8004400:	0800bc05 	.word	0x0800bc05
 8004404:	0800bff3 	.word	0x0800bff3
 8004408:	0800c011 	.word	0x0800c011
 800440c:	0800c037 	.word	0x0800c037
 8004410:	0800c05d 	.word	0x0800c05d

08004414 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                             mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	460e      	mov	r6, r1
 8004418:	4617      	mov	r7, r2
 800441a:	461d      	mov	r5, r3
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 800441c:	4604      	mov	r4, r0
 800441e:	b930      	cbnz	r0, 800442e <mqtt_set_inpub_callback+0x1a>
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <mqtt_set_inpub_callback+0x24>)
 8004422:	4906      	ldr	r1, [pc, #24]	; (800443c <mqtt_set_inpub_callback+0x28>)
 8004424:	4806      	ldr	r0, [pc, #24]	; (8004440 <mqtt_set_inpub_callback+0x2c>)
 8004426:	f240 428f 	movw	r2, #1167	; 0x48f
 800442a:	f006 fa9f 	bl	800a96c <iprintf>
  client->data_cb = data_cb;
 800442e:	6627      	str	r7, [r4, #96]	; 0x60
  client->pub_cb = pub_cb;
 8004430:	6666      	str	r6, [r4, #100]	; 0x64
  client->inpub_arg = arg;
 8004432:	65e5      	str	r5, [r4, #92]	; 0x5c
 8004434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004436:	bf00      	nop
 8004438:	0800be6d 	.word	0x0800be6d
 800443c:	0800bfac 	.word	0x0800bfac
 8004440:	0800bc05 	.word	0x0800bc05

08004444 <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8004444:	b510      	push	{r4, lr}
  mqtt_client_t *client = (mqtt_client_t *)mem_malloc(sizeof(mqtt_client_t));
 8004446:	f44f 70f8 	mov.w	r0, #496	; 0x1f0
 800444a:	f001 fc63 	bl	8005d14 <mem_malloc>
  if (client != NULL) {
 800444e:	4604      	mov	r4, r0
 8004450:	b120      	cbz	r0, 800445c <mqtt_client_new+0x18>
    memset(client, 0, sizeof(mqtt_client_t));
 8004452:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8004456:	2100      	movs	r1, #0
 8004458:	f006 fa80 	bl	800a95c <memset>
  }
  return client;
}
 800445c:	4620      	mov	r0, r4
 800445e:	bd10      	pop	{r4, pc}

08004460 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	b087      	sub	sp, #28
 8004466:	461e      	mov	r6, r3
 8004468:	9104      	str	r1, [sp, #16]
 800446a:	9205      	str	r2, [sp, #20]
 800446c:	9f11      	ldr	r7, [sp, #68]	; 0x44
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;

  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 800446e:	4604      	mov	r4, r0
 8004470:	b930      	cbnz	r0, 8004480 <mqtt_client_connect+0x20>
 8004472:	4b7d      	ldr	r3, [pc, #500]	; (8004668 <mqtt_client_connect+0x208>)
 8004474:	497d      	ldr	r1, [pc, #500]	; (800466c <mqtt_client_connect+0x20c>)
 8004476:	487e      	ldr	r0, [pc, #504]	; (8004670 <mqtt_client_connect+0x210>)
 8004478:	f240 42bb 	movw	r2, #1211	; 0x4bb
 800447c:	f006 fa76 	bl	800a96c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8004480:	9b04      	ldr	r3, [sp, #16]
 8004482:	b933      	cbnz	r3, 8004492 <mqtt_client_connect+0x32>
 8004484:	4b78      	ldr	r3, [pc, #480]	; (8004668 <mqtt_client_connect+0x208>)
 8004486:	497b      	ldr	r1, [pc, #492]	; (8004674 <mqtt_client_connect+0x214>)
 8004488:	4879      	ldr	r0, [pc, #484]	; (8004670 <mqtt_client_connect+0x210>)
 800448a:	f240 42bc 	movw	r2, #1212	; 0x4bc
 800448e:	f006 fa6d 	bl	800a96c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8004492:	b937      	cbnz	r7, 80044a2 <mqtt_client_connect+0x42>
 8004494:	4b74      	ldr	r3, [pc, #464]	; (8004668 <mqtt_client_connect+0x208>)
 8004496:	4978      	ldr	r1, [pc, #480]	; (8004678 <mqtt_client_connect+0x218>)
 8004498:	4875      	ldr	r0, [pc, #468]	; (8004670 <mqtt_client_connect+0x210>)
 800449a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800449e:	f006 fa65 	bl	800a96c <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b933      	cbnz	r3, 80044b4 <mqtt_client_connect+0x54>
 80044a6:	4b70      	ldr	r3, [pc, #448]	; (8004668 <mqtt_client_connect+0x208>)
 80044a8:	4974      	ldr	r1, [pc, #464]	; (800467c <mqtt_client_connect+0x21c>)
 80044aa:	4871      	ldr	r0, [pc, #452]	; (8004670 <mqtt_client_connect+0x210>)
 80044ac:	f240 42be 	movw	r2, #1214	; 0x4be
 80044b0:	f006 fa5c 	bl	800a96c <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 80044b4:	7aa5      	ldrb	r5, [r4, #10]
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	f040 80d2 	bne.w	8004660 <mqtt_client_connect+0x200>
    LWIP_DEBUGF(MQTT_DEBUG_WARN,("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 80044bc:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 80044c0:	4629      	mov	r1, r5
 80044c2:	4620      	mov	r0, r4
 80044c4:	f006 fa4a 	bl	800a95c <memset>
  client->connect_arg = arg;
 80044c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044ca:	6123      	str	r3, [r4, #16]
  client->connect_cb = cb;
  client->keep_alive = client_info->keep_alive;
 80044cc:	89bb      	ldrh	r3, [r7, #12]
 80044ce:	8063      	strh	r3, [r4, #2]
  mqtt_init_requests(client->req_list);
 80044d0:	f104 031c 	add.w	r3, r4, #28
    r_objs[n].next = &r_objs[n];
 80044d4:	61e3      	str	r3, [r4, #28]
 80044d6:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 80044da:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 80044dc:	6938      	ldr	r0, [r7, #16]
  client->connect_cb = cb;
 80044de:	6166      	str	r6, [r4, #20]
    r_objs[n].next = &r_objs[n];
 80044e0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80044e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80044e6:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 80044ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d043      	beq.n	8004578 <mqtt_client_connect+0x118>
 80044f0:	f8d7 8014 	ldr.w	r8, [r7, #20]
 80044f4:	f1b8 0f00 	cmp.w	r8, #0
 80044f8:	d03e      	beq.n	8004578 <mqtt_client_connect+0x118>
    flags |= MQTT_CONNECT_FLAG_WILL;
    flags |= (client_info->will_qos & 3) << 3;
 80044fa:	7e3d      	ldrb	r5, [r7, #24]
    if (client_info->will_retain) {
 80044fc:	7e7b      	ldrb	r3, [r7, #25]
    flags |= (client_info->will_qos & 3) << 3;
 80044fe:	00ed      	lsls	r5, r5, #3
 8004500:	f005 0518 	and.w	r5, r5, #24
 8004504:	f045 0504 	orr.w	r5, r5, #4
    if (client_info->will_retain) {
 8004508:	b10b      	cbz	r3, 800450e <mqtt_client_connect+0xae>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800450a:	f045 0520 	orr.w	r5, r5, #32
    }
    len = strlen(client_info->will_topic);
 800450e:	f7fb fe69 	bl	80001e4 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8004512:	28ff      	cmp	r0, #255	; 0xff
    len = strlen(client_info->will_topic);
 8004514:	4606      	mov	r6, r0
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 8004516:	d90c      	bls.n	8004532 <mqtt_client_connect+0xd2>
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <mqtt_client_connect+0x208>)
 800451a:	4959      	ldr	r1, [pc, #356]	; (8004680 <mqtt_client_connect+0x220>)
 800451c:	f240 42d4 	movw	r2, #1236	; 0x4d4
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8004520:	4853      	ldr	r0, [pc, #332]	; (8004670 <mqtt_client_connect+0x210>)
 8004522:	f006 fa23 	bl	800a96c <iprintf>
 8004526:	f06f 0605 	mvn.w	r6, #5

tcp_fail:
  tcp_abort(client->conn);
  client->conn = NULL;
  return err;
}
 800452a:	4630      	mov	r0, r6
 800452c:	b007      	add	sp, #28
 800452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 8004532:	b920      	cbnz	r0, 800453e <mqtt_client_connect+0xde>
 8004534:	4b4c      	ldr	r3, [pc, #304]	; (8004668 <mqtt_client_connect+0x208>)
 8004536:	4953      	ldr	r1, [pc, #332]	; (8004684 <mqtt_client_connect+0x224>)
 8004538:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800453c:	e7f0      	b.n	8004520 <mqtt_client_connect+0xc0>
    will_topic_len = (u8_t)len;
 800453e:	fa5f fa80 	uxtb.w	sl, r0
    len = strlen(client_info->will_msg);
 8004542:	4640      	mov	r0, r8
 8004544:	f7fb fe4e 	bl	80001e4 <strlen>
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 8004548:	28ff      	cmp	r0, #255	; 0xff
 800454a:	d904      	bls.n	8004556 <mqtt_client_connect+0xf6>
 800454c:	4b46      	ldr	r3, [pc, #280]	; (8004668 <mqtt_client_connect+0x208>)
 800454e:	494e      	ldr	r1, [pc, #312]	; (8004688 <mqtt_client_connect+0x228>)
 8004550:	f44f 629b 	mov.w	r2, #1240	; 0x4d8
 8004554:	e7e4      	b.n	8004520 <mqtt_client_connect+0xc0>
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 8004556:	360e      	adds	r6, #14
 8004558:	4406      	add	r6, r0
    will_msg_len = (u8_t)len;
 800455a:	fa5f f980 	uxtb.w	r9, r0
    remaining_length = (u16_t)len;
 800455e:	b2b6      	uxth	r6, r6
  len = strlen(client_info->client_id);
 8004560:	6838      	ldr	r0, [r7, #0]
 8004562:	f7fb fe3f 	bl	80001e4 <strlen>
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 8004566:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(client_info->client_id);
 800456a:	4683      	mov	fp, r0
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800456c:	d308      	bcc.n	8004580 <mqtt_client_connect+0x120>
 800456e:	4b3e      	ldr	r3, [pc, #248]	; (8004668 <mqtt_client_connect+0x208>)
 8004570:	4946      	ldr	r1, [pc, #280]	; (800468c <mqtt_client_connect+0x22c>)
 8004572:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8004576:	e7d3      	b.n	8004520 <mqtt_client_connect+0xc0>
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8004578:	46a9      	mov	r9, r5
 800457a:	46aa      	mov	sl, r5
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 800457c:	260a      	movs	r6, #10
 800457e:	e7ef      	b.n	8004560 <mqtt_client_connect+0x100>
  len = remaining_length + 2 + client_id_length;
 8004580:	3602      	adds	r6, #2
 8004582:	4406      	add	r6, r0
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 8004584:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004588:	db04      	blt.n	8004594 <mqtt_client_connect+0x134>
 800458a:	4b37      	ldr	r3, [pc, #220]	; (8004668 <mqtt_client_connect+0x208>)
 800458c:	4940      	ldr	r1, [pc, #256]	; (8004690 <mqtt_client_connect+0x230>)
 800458e:	f240 42e6 	movw	r2, #1254	; 0x4e6
 8004592:	e7c5      	b.n	8004520 <mqtt_client_connect+0xc0>
  remaining_length = (u16_t)len;
 8004594:	b2b3      	uxth	r3, r6
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8004596:	f104 08ec 	add.w	r8, r4, #236	; 0xec
 800459a:	4619      	mov	r1, r3
 800459c:	4640      	mov	r0, r8
  remaining_length = (u16_t)len;
 800459e:	9303      	str	r3, [sp, #12]
  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 80045a0:	f7ff fa1e 	bl	80039e0 <mqtt_output_check_space>
 80045a4:	b910      	cbnz	r0, 80045ac <mqtt_client_connect+0x14c>
    return ERR_MEM;
 80045a6:	f04f 36ff 	mov.w	r6, #4294967295
 80045aa:	e7be      	b.n	800452a <mqtt_client_connect+0xca>
  client->conn = tcp_new();
 80045ac:	f002 ff58 	bl	8007460 <tcp_new>
 80045b0:	60e0      	str	r0, [r4, #12]
  if (client->conn == NULL) {
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d0f7      	beq.n	80045a6 <mqtt_client_connect+0x146>
  tcp_arg(client->conn, client);
 80045b6:	4621      	mov	r1, r4
 80045b8:	f002 fa40 	bl	8006a3c <tcp_arg>
  err = tcp_bind(client->conn, IP_ADDR_ANY, 0);
 80045bc:	2200      	movs	r2, #0
 80045be:	4935      	ldr	r1, [pc, #212]	; (8004694 <mqtt_client_connect+0x234>)
 80045c0:	68e0      	ldr	r0, [r4, #12]
 80045c2:	f002 f96f 	bl	80068a4 <tcp_bind>
  if (err != ERR_OK) {
 80045c6:	4606      	mov	r6, r0
 80045c8:	2800      	cmp	r0, #0
 80045ca:	d143      	bne.n	8004654 <mqtt_client_connect+0x1f4>
  err = tcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 80045cc:	4b32      	ldr	r3, [pc, #200]	; (8004698 <mqtt_client_connect+0x238>)
 80045ce:	9a05      	ldr	r2, [sp, #20]
 80045d0:	9904      	ldr	r1, [sp, #16]
 80045d2:	68e0      	ldr	r0, [r4, #12]
 80045d4:	f002 ff64 	bl	80074a0 <tcp_connect>
  if (err != ERR_OK) {
 80045d8:	4606      	mov	r6, r0
 80045da:	2800      	cmp	r0, #0
 80045dc:	d13a      	bne.n	8004654 <mqtt_client_connect+0x1f4>
  tcp_err(client->conn, mqtt_tcp_err_cb);
 80045de:	68e0      	ldr	r0, [r4, #12]
 80045e0:	492e      	ldr	r1, [pc, #184]	; (800469c <mqtt_client_connect+0x23c>)
 80045e2:	f002 fa5b 	bl	8006a9c <tcp_err>
  client->conn_state = TCP_CONNECTING;
 80045e6:	2101      	movs	r1, #1
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80045e8:	9b03      	ldr	r3, [sp, #12]
  client->conn_state = TCP_CONNECTING;
 80045ea:	72a1      	strb	r1, [r4, #10]
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 80045ec:	4632      	mov	r2, r6
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	4640      	mov	r0, r8
 80045f2:	4633      	mov	r3, r6
 80045f4:	f7ff fb6a 	bl	8003ccc <mqtt_output_append_fixed_header.constprop.5>
  mqtt_output_append_string(&client->output, "MQTT", 4);
 80045f8:	2204      	movs	r2, #4
 80045fa:	4929      	ldr	r1, [pc, #164]	; (80046a0 <mqtt_client_connect+0x240>)
 80045fc:	4640      	mov	r0, r8
 80045fe:	f7ff f9b2 	bl	8003966 <mqtt_output_append_string>
  mqtt_ringbuf_put(rb, value);
 8004602:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8004606:	fa54 f283 	uxtab	r2, r4, r3
 800460a:	2104      	movs	r1, #4
 800460c:	f882 10f0 	strb.w	r1, [r2, #240]	; 0xf0
 8004610:	1c9a      	adds	r2, r3, #2
 8004612:	3301      	adds	r3, #1
 8004614:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
 8004618:	fa54 f483 	uxtab	r4, r4, r3
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800461c:	f045 0302 	orr.w	r3, r5, #2
  mqtt_ringbuf_put(rb, value);
 8004620:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 8004624:	89b9      	ldrh	r1, [r7, #12]
 8004626:	4640      	mov	r0, r8
 8004628:	f7ff f990 	bl	800394c <mqtt_output_append_u16>
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800462c:	fa1f f28b 	uxth.w	r2, fp
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	4640      	mov	r0, r8
 8004634:	f7ff f997 	bl	8003966 <mqtt_output_append_string>
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 8004638:	076b      	lsls	r3, r5, #29
 800463a:	f57f af76 	bpl.w	800452a <mqtt_client_connect+0xca>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800463e:	4652      	mov	r2, sl
 8004640:	6939      	ldr	r1, [r7, #16]
 8004642:	4640      	mov	r0, r8
 8004644:	f7ff f98f 	bl	8003966 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 8004648:	464a      	mov	r2, r9
 800464a:	6979      	ldr	r1, [r7, #20]
 800464c:	4640      	mov	r0, r8
 800464e:	f7ff f98a 	bl	8003966 <mqtt_output_append_string>
 8004652:	e76a      	b.n	800452a <mqtt_client_connect+0xca>
  tcp_abort(client->conn);
 8004654:	68e0      	ldr	r0, [r4, #12]
 8004656:	f002 fe39 	bl	80072cc <tcp_abort>
  client->conn = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	60e3      	str	r3, [r4, #12]
  return err;
 800465e:	e764      	b.n	800452a <mqtt_client_connect+0xca>
    return ERR_ISCONN;
 8004660:	f06f 0609 	mvn.w	r6, #9
 8004664:	e761      	b.n	800452a <mqtt_client_connect+0xca>
 8004666:	bf00      	nop
 8004668:	0800be6d 	.word	0x0800be6d
 800466c:	0800bc84 	.word	0x0800bc84
 8004670:	0800bc05 	.word	0x0800bc05
 8004674:	0800bca8 	.word	0x0800bca8
 8004678:	0800bccd 	.word	0x0800bccd
 800467c:	0800bcf6 	.word	0x0800bcf6
 8004680:	0800bd2a 	.word	0x0800bd2a
 8004684:	0800bd67 	.word	0x0800bd67
 8004688:	0800bda7 	.word	0x0800bda7
 800468c:	0800bde2 	.word	0x0800bde2
 8004690:	0800be1e 	.word	0x0800be1e
 8004694:	0800c3e0 	.word	0x0800c3e0
 8004698:	08003b85 	.word	0x08003b85
 800469c:	08003c5d 	.word	0x08003c5d
 80046a0:	0800be4d 	.word	0x0800be4d

080046a4 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 80046a4:	ba40      	rev16	r0, r0
}
 80046a6:	b280      	uxth	r0, r0
 80046a8:	4770      	bx	lr

080046aa <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 80046aa:	ba00      	rev	r0, r0
 80046ac:	4770      	bx	lr

080046ae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80046ae:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80046b0:	f005 f9ec 	bl	8009a8c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80046b4:	f001 f9b6 	bl	8005a24 <mem_init>
  memp_init();
 80046b8:	f001 fc18 	bl	8005eec <memp_init>
  pbuf_init();
  netif_init();
 80046bc:	f001 fc63 	bl	8005f86 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80046c0:	f005 f86c 	bl	800979c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80046c4:	f002 f8ec 	bl	80068a0 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80046c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80046cc:	f004 bfc6 	b.w	800965c <sys_timeouts_init>

080046d0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80046d0:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80046d2:	2618      	movs	r6, #24
 80046d4:	4c07      	ldr	r4, [pc, #28]	; (80046f4 <etharp_free_entry+0x24>)
 80046d6:	4346      	muls	r6, r0
{
 80046d8:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80046da:	59a0      	ldr	r0, [r4, r6]
 80046dc:	b118      	cbz	r0, 80046e6 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80046de:	f001 fd89 	bl	80061f4 <pbuf_free>
    arp_table[i].q = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80046e6:	2318      	movs	r3, #24
 80046e8:	fb03 4405 	mla	r4, r3, r5, r4
 80046ec:	2300      	movs	r3, #0
 80046ee:	7523      	strb	r3, [r4, #20]
 80046f0:	bd70      	pop	{r4, r5, r6, pc}
 80046f2:	bf00      	nop
 80046f4:	200051ec 	.word	0x200051ec

080046f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80046f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80046fe:	4689      	mov	r9, r1
 8004700:	4692      	mov	sl, r2
 8004702:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004704:	4607      	mov	r7, r0
 8004706:	b930      	cbnz	r0, 8004716 <etharp_raw+0x1e>
 8004708:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <etharp_raw+0xc4>)
 800470a:	492d      	ldr	r1, [pc, #180]	; (80047c0 <etharp_raw+0xc8>)
 800470c:	482d      	ldr	r0, [pc, #180]	; (80047c4 <etharp_raw+0xcc>)
 800470e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8004712:	f006 f92b 	bl	800a96c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8004716:	2200      	movs	r2, #0
 8004718:	211c      	movs	r1, #28
 800471a:	2002      	movs	r0, #2
 800471c:	f001 fdd4 	bl	80062c8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8004720:	4606      	mov	r6, r0
 8004722:	2800      	cmp	r0, #0
 8004724:	d047      	beq.n	80047b6 <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8004726:	8943      	ldrh	r3, [r0, #10]
 8004728:	2b1b      	cmp	r3, #27
 800472a:	d806      	bhi.n	800473a <etharp_raw+0x42>
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <etharp_raw+0xc4>)
 800472e:	4926      	ldr	r1, [pc, #152]	; (80047c8 <etharp_raw+0xd0>)
 8004730:	4824      	ldr	r0, [pc, #144]	; (80047c4 <etharp_raw+0xcc>)
 8004732:	f240 4264 	movw	r2, #1124	; 0x464
 8004736:	f006 f919 	bl	800a96c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800473a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
  hdr = (struct etharp_hdr *)p->payload;
 800473e:	6874      	ldr	r4, [r6, #4]
  hdr->opcode = lwip_htons(opcode);
 8004740:	f7ff ffb0 	bl	80046a4 <lwip_htons>
 8004744:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8004746:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800474a:	2b06      	cmp	r3, #6
 800474c:	d006      	beq.n	800475c <etharp_raw+0x64>
 800474e:	4b1b      	ldr	r3, [pc, #108]	; (80047bc <etharp_raw+0xc4>)
 8004750:	491e      	ldr	r1, [pc, #120]	; (80047cc <etharp_raw+0xd4>)
 8004752:	481c      	ldr	r0, [pc, #112]	; (80047c4 <etharp_raw+0xcc>)
 8004754:	f240 426b 	movw	r2, #1131	; 0x46b
 8004758:	f006 f908 	bl	800a96c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800475c:	f8d8 3000 	ldr.w	r3, [r8]
 8004760:	60a3      	str	r3, [r4, #8]
 8004762:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8004766:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	f8c4 3012 	str.w	r3, [r4, #18]
 800476e:	88ab      	ldrh	r3, [r5, #4]
 8004770:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8004772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800477a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004780:	2301      	movs	r3, #1
 8004782:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004784:	2308      	movs	r3, #8
 8004786:	70a3      	strb	r3, [r4, #2]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8004788:	2306      	movs	r3, #6
 800478a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800478c:	2304      	movs	r3, #4
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800478e:	2500      	movs	r5, #0
  hdr->protolen = sizeof(ip4_addr_t);
 8004790:	7163      	strb	r3, [r4, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8004792:	f640 0306 	movw	r3, #2054	; 0x806
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8004796:	7025      	strb	r5, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8004798:	70e5      	strb	r5, [r4, #3]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800479a:	464a      	mov	r2, r9
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4631      	mov	r1, r6
 80047a0:	4653      	mov	r3, sl
 80047a2:	4638      	mov	r0, r7
 80047a4:	f005 f8f6 	bl	8009994 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80047a8:	4630      	mov	r0, r6
 80047aa:	f001 fd23 	bl	80061f4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80047ae:	4628      	mov	r0, r5
}
 80047b0:	b002      	add	sp, #8
 80047b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	e7f9      	b.n	80047b0 <etharp_raw+0xb8>
 80047bc:	0800c1f1 	.word	0x0800c1f1
 80047c0:	0800c228 	.word	0x0800c228
 80047c4:	0800bc05 	.word	0x0800bc05
 80047c8:	0800c236 	.word	0x0800c236
 80047cc:	0800c267 	.word	0x0800c267

080047d0 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80047d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d4:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <etharp_find_entry.isra.0+0x100>)
 80047d6:	9101      	str	r1, [sp, #4]
  s8_t old_queue = ARP_TABLE_SIZE;
 80047d8:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80047da:	4605      	mov	r5, r0
 80047dc:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80047de:	4694      	mov	ip, r2
 80047e0:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80047e2:	4681      	mov	r9, r0
 80047e4:	4680      	mov	r8, r0
 80047e6:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 80047e8:	4696      	mov	lr, r2
 80047ea:	461e      	mov	r6, r3
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80047ec:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 80047f0:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80047f2:	d112      	bne.n	800481a <etharp_find_entry.isra.0+0x4a>
 80047f4:	b99f      	cbnz	r7, 800481e <etharp_find_entry.isra.0+0x4e>
      empty = i;
 80047f6:	fa4f fe80 	sxtb.w	lr, r0
 80047fa:	3001      	adds	r0, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80047fc:	280a      	cmp	r0, #10
 80047fe:	f103 0318 	add.w	r3, r3, #24
 8004802:	d1f3      	bne.n	80047ec <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8004804:	9b01      	ldr	r3, [sp, #4]
 8004806:	0799      	lsls	r1, r3, #30
 8004808:	d404      	bmi.n	8004814 <etharp_find_entry.isra.0+0x44>
 800480a:	f1be 0f0a 	cmp.w	lr, #10
 800480e:	d11c      	bne.n	800484a <etharp_find_entry.isra.0+0x7a>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8004810:	07db      	lsls	r3, r3, #31
 8004812:	d435      	bmi.n	8004880 <etharp_find_entry.isra.0+0xb0>
    return (s8_t)ERR_MEM;
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	e009      	b.n	800482e <etharp_find_entry.isra.0+0x5e>
    } else if (state != ETHARP_STATE_EMPTY) {
 800481a:	2f00      	cmp	r7, #0
 800481c:	d0ed      	beq.n	80047fa <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800481e:	2d00      	cmp	r5, #0
 8004820:	d04a      	beq.n	80048b8 <etharp_find_entry.isra.0+0xe8>
 8004822:	6829      	ldr	r1, [r5, #0]
 8004824:	468a      	mov	sl, r1
 8004826:	6859      	ldr	r1, [r3, #4]
 8004828:	458a      	cmp	sl, r1
 800482a:	d145      	bne.n	80048b8 <etharp_find_entry.isra.0+0xe8>
        return i;
 800482c:	b240      	sxtb	r0, r0
}
 800482e:	b003      	add	sp, #12
 8004830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8004834:	45c2      	cmp	sl, r8
 8004836:	d3e0      	bcc.n	80047fa <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 8004838:	fa4f fc80 	sxtb.w	ip, r0
 800483c:	46d0      	mov	r8, sl
 800483e:	e7dc      	b.n	80047fa <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8004840:	45ca      	cmp	sl, r9
            old_stable = i;
 8004842:	bf24      	itt	cs
 8004844:	b244      	sxtbcs	r4, r0
 8004846:	46d1      	movcs	r9, sl
 8004848:	e7d7      	b.n	80047fa <etharp_find_entry.isra.0+0x2a>
    i = empty;
 800484a:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800484e:	2318      	movs	r3, #24
 8004850:	fb03 6307 	mla	r3, r3, r7, r6
 8004854:	7d1b      	ldrb	r3, [r3, #20]
 8004856:	b133      	cbz	r3, 8004866 <etharp_find_entry.isra.0+0x96>
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <etharp_find_entry.isra.0+0x104>)
 800485a:	491f      	ldr	r1, [pc, #124]	; (80048d8 <etharp_find_entry.isra.0+0x108>)
 800485c:	481f      	ldr	r0, [pc, #124]	; (80048dc <etharp_find_entry.isra.0+0x10c>)
 800485e:	f240 1287 	movw	r2, #391	; 0x187
 8004862:	f006 f883 	bl	800a96c <iprintf>
  if (ipaddr != NULL) {
 8004866:	b125      	cbz	r5, 8004872 <etharp_find_entry.isra.0+0xa2>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8004868:	2318      	movs	r3, #24
 800486a:	fb03 6307 	mla	r3, r3, r7, r6
 800486e:	682a      	ldr	r2, [r5, #0]
 8004870:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8004872:	2318      	movs	r3, #24
 8004874:	fb03 6607 	mla	r6, r3, r7, r6
 8004878:	2300      	movs	r3, #0
 800487a:	8273      	strh	r3, [r6, #18]
  return (err_t)i;
 800487c:	b278      	sxtb	r0, r7
 800487e:	e7d6      	b.n	800482e <etharp_find_entry.isra.0+0x5e>
    if (old_stable < ARP_TABLE_SIZE) {
 8004880:	2c0a      	cmp	r4, #10
 8004882:	d00f      	beq.n	80048a4 <etharp_find_entry.isra.0+0xd4>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004884:	2318      	movs	r3, #24
      i = old_stable;
 8004886:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8004888:	435c      	muls	r4, r3
 800488a:	5933      	ldr	r3, [r6, r4]
 800488c:	b133      	cbz	r3, 800489c <etharp_find_entry.isra.0+0xcc>
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <etharp_find_entry.isra.0+0x104>)
 8004890:	4913      	ldr	r1, [pc, #76]	; (80048e0 <etharp_find_entry.isra.0+0x110>)
 8004892:	4812      	ldr	r0, [pc, #72]	; (80048dc <etharp_find_entry.isra.0+0x10c>)
 8004894:	f240 126f 	movw	r2, #367	; 0x16f
 8004898:	f006 f868 	bl	800a96c <iprintf>
    etharp_free_entry(i);
 800489c:	4638      	mov	r0, r7
 800489e:	f7ff ff17 	bl	80046d0 <etharp_free_entry>
 80048a2:	e7d4      	b.n	800484e <etharp_find_entry.isra.0+0x7e>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80048a4:	f1bc 0f0a 	cmp.w	ip, #10
 80048a8:	d002      	beq.n	80048b0 <etharp_find_entry.isra.0+0xe0>
      i = old_pending;
 80048aa:	fa5f f78c 	uxtb.w	r7, ip
 80048ae:	e7f5      	b.n	800489c <etharp_find_entry.isra.0+0xcc>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80048b0:	2a0a      	cmp	r2, #10
 80048b2:	d0af      	beq.n	8004814 <etharp_find_entry.isra.0+0x44>
      i = old_queue;
 80048b4:	b2d7      	uxtb	r7, r2
 80048b6:	e7f1      	b.n	800489c <etharp_find_entry.isra.0+0xcc>
      if (state == ETHARP_STATE_PENDING) {
 80048b8:	2f01      	cmp	r7, #1
 80048ba:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 80048be:	d1bf      	bne.n	8004840 <etharp_find_entry.isra.0+0x70>
        if (arp_table[i].q != NULL) {
 80048c0:	681f      	ldr	r7, [r3, #0]
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	d0b6      	beq.n	8004834 <etharp_find_entry.isra.0+0x64>
          if (arp_table[i].ctime >= age_queue) {
 80048c6:	45da      	cmp	sl, fp
 80048c8:	d397      	bcc.n	80047fa <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 80048ca:	b242      	sxtb	r2, r0
 80048cc:	46d3      	mov	fp, sl
 80048ce:	e794      	b.n	80047fa <etharp_find_entry.isra.0+0x2a>
 80048d0:	200051ec 	.word	0x200051ec
 80048d4:	0800c1f1 	.word	0x0800c1f1
 80048d8:	0800c113 	.word	0x0800c113
 80048dc:	0800bc05 	.word	0x0800bc05
 80048e0:	0800c0fc 	.word	0x0800c0fc

080048e4 <etharp_cleanup_netif>:
{
 80048e4:	b570      	push	{r4, r5, r6, lr}
 80048e6:	4d08      	ldr	r5, [pc, #32]	; (8004908 <etharp_cleanup_netif+0x24>)
 80048e8:	4606      	mov	r6, r0
 80048ea:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80048ec:	7d2b      	ldrb	r3, [r5, #20]
 80048ee:	b12b      	cbz	r3, 80048fc <etharp_cleanup_netif+0x18>
 80048f0:	68ab      	ldr	r3, [r5, #8]
 80048f2:	42b3      	cmp	r3, r6
 80048f4:	d102      	bne.n	80048fc <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff feea 	bl	80046d0 <etharp_free_entry>
 80048fc:	3401      	adds	r4, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80048fe:	2c0a      	cmp	r4, #10
 8004900:	f105 0518 	add.w	r5, r5, #24
 8004904:	d1f2      	bne.n	80048ec <etharp_cleanup_netif+0x8>
}
 8004906:	bd70      	pop	{r4, r5, r6, pc}
 8004908:	200051ec 	.word	0x200051ec

0800490c <etharp_input>:
{
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4680      	mov	r8, r0
 8004912:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004914:	460c      	mov	r4, r1
 8004916:	b949      	cbnz	r1, 800492c <etharp_input+0x20>
 8004918:	4b46      	ldr	r3, [pc, #280]	; (8004a34 <etharp_input+0x128>)
 800491a:	4947      	ldr	r1, [pc, #284]	; (8004a38 <etharp_input+0x12c>)
 800491c:	4847      	ldr	r0, [pc, #284]	; (8004a3c <etharp_input+0x130>)
 800491e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8004922:	f006 f823 	bl	800a96c <iprintf>
}
 8004926:	b006      	add	sp, #24
 8004928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800492c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800492e:	882b      	ldrh	r3, [r5, #0]
 8004930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004934:	d108      	bne.n	8004948 <etharp_input+0x3c>
 8004936:	792b      	ldrb	r3, [r5, #4]
 8004938:	2b06      	cmp	r3, #6
 800493a:	d105      	bne.n	8004948 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800493c:	796b      	ldrb	r3, [r5, #5]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d102      	bne.n	8004948 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8004942:	886b      	ldrh	r3, [r5, #2]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d003      	beq.n	8004950 <etharp_input+0x44>
  pbuf_free(p);
 8004948:	4640      	mov	r0, r8
 800494a:	f001 fc53 	bl	80061f4 <pbuf_free>
 800494e:	e7ea      	b.n	8004926 <etharp_input+0x1a>
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004950:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8004952:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8004956:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8004958:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800495a:	b116      	cbz	r6, 8004962 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800495c:	1b9b      	subs	r3, r3, r6
 800495e:	425e      	negs	r6, r3
 8004960:	415e      	adcs	r6, r3
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004962:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004966:	2e00      	cmp	r6, #0
 8004968:	bf14      	ite	ne
 800496a:	f04f 0901 	movne.w	r9, #1
 800496e:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004972:	2b06      	cmp	r3, #6
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8004974:	f105 0708 	add.w	r7, r5, #8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8004978:	d006      	beq.n	8004988 <etharp_input+0x7c>
 800497a:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <etharp_input+0x128>)
 800497c:	4930      	ldr	r1, [pc, #192]	; (8004a40 <etharp_input+0x134>)
 800497e:	482f      	ldr	r0, [pc, #188]	; (8004a3c <etharp_input+0x130>)
 8004980:	f240 12ab 	movw	r2, #427	; 0x1ab
 8004984:	f005 fff2 	bl	800a96c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8004988:	9805      	ldr	r0, [sp, #20]
 800498a:	2800      	cmp	r0, #0
 800498c:	d03c      	beq.n	8004a08 <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800498e:	4621      	mov	r1, r4
 8004990:	f000 fc95 	bl	80052be <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8004994:	4682      	mov	sl, r0
 8004996:	bbb8      	cbnz	r0, 8004a08 <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 8004998:	9b05      	ldr	r3, [sp, #20]
 800499a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800499e:	2be0      	cmp	r3, #224	; 0xe0
 80049a0:	d032      	beq.n	8004a08 <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 80049a2:	4649      	mov	r1, r9
 80049a4:	a805      	add	r0, sp, #20
 80049a6:	f7ff ff13 	bl	80047d0 <etharp_find_entry.isra.0>
  if (i < 0) {
 80049aa:	2800      	cmp	r0, #0
 80049ac:	db2c      	blt.n	8004a08 <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <etharp_input+0x138>)
 80049b0:	2218      	movs	r2, #24
 80049b2:	fb02 f100 	mul.w	r1, r2, r0
 80049b6:	eb03 0e01 	add.w	lr, r3, r1
 80049ba:	f04f 0c02 	mov.w	ip, #2
 80049be:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80049c2:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80049c6:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80049ca:	fb12 c200 	smlabb	r2, r2, r0, ip
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	5098      	str	r0, [r3, r2]
 80049d2:	eb03 0c02 	add.w	ip, r3, r2
 80049d6:	88ba      	ldrh	r2, [r7, #4]
 80049d8:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80049dc:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 80049e0:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 80049e4:	f1b9 0f00 	cmp.w	r9, #0
 80049e8:	d00e      	beq.n	8004a08 <etharp_input+0xfc>
    arp_table[i].q = NULL;
 80049ea:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80049ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80049f8:	463b      	mov	r3, r7
 80049fa:	4649      	mov	r1, r9
 80049fc:	4620      	mov	r0, r4
 80049fe:	f004 ffc9 	bl	8009994 <ethernet_output>
    pbuf_free(p);
 8004a02:	4648      	mov	r0, r9
 8004a04:	f001 fbf6 	bl	80061f4 <pbuf_free>
  switch (hdr->opcode) {
 8004a08:	88eb      	ldrh	r3, [r5, #6]
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0e:	d19b      	bne.n	8004948 <etharp_input+0x3c>
    if (for_us) {
 8004a10:	2e00      	cmp	r6, #0
 8004a12:	d099      	beq.n	8004948 <etharp_input+0x3c>
      etharp_raw(netif,
 8004a14:	2202      	movs	r2, #2
 8004a16:	9203      	str	r2, [sp, #12]
 8004a18:	aa05      	add	r2, sp, #20
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8004a1a:	f104 0325 	add.w	r3, r4, #37	; 0x25
      etharp_raw(netif,
 8004a1e:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8004a20:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 8004a22:	9200      	str	r2, [sp, #0]
 8004a24:	9701      	str	r7, [sp, #4]
 8004a26:	463a      	mov	r2, r7
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7ff fe64 	bl	80046f8 <etharp_raw>
 8004a30:	e78a      	b.n	8004948 <etharp_input+0x3c>
 8004a32:	bf00      	nop
 8004a34:	0800c1f1 	.word	0x0800c1f1
 8004a38:	0800c228 	.word	0x0800c228
 8004a3c:	0800bc05 	.word	0x0800bc05
 8004a40:	0800c15b 	.word	0x0800c15b
 8004a44:	200051ec 	.word	0x200051ec

08004a48 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004a48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a4a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004a4c:	f100 0325 	add.w	r3, r0, #37	; 0x25
 8004a50:	9102      	str	r1, [sp, #8]
 8004a52:	2401      	movs	r4, #1
 8004a54:	4905      	ldr	r1, [pc, #20]	; (8004a6c <etharp_request+0x24>)
 8004a56:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004a58:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004a5a:	9200      	str	r2, [sp, #0]
 8004a5c:	9403      	str	r4, [sp, #12]
 8004a5e:	4a04      	ldr	r2, [pc, #16]	; (8004a70 <etharp_request+0x28>)
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7ff fe49 	bl	80046f8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8004a66:	b004      	add	sp, #16
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop
 8004a6c:	0800d800 	.word	0x0800d800
 8004a70:	0800d794 	.word	0x0800d794

08004a74 <etharp_tmr>:
{
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	4c13      	ldr	r4, [pc, #76]	; (8004ac4 <etharp_tmr+0x50>)
 8004a78:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004a7a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004a7c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8004a7e:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8004a80:	b16a      	cbz	r2, 8004a9e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8004a82:	89e3      	ldrh	r3, [r4, #14]
 8004a84:	3301      	adds	r3, #1
 8004a86:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004a88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8004a8c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8004a8e:	d203      	bcs.n	8004a98 <etharp_tmr+0x24>
 8004a90:	2a01      	cmp	r2, #1
 8004a92:	d10a      	bne.n	8004aaa <etharp_tmr+0x36>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d90c      	bls.n	8004ab2 <etharp_tmr+0x3e>
        etharp_free_entry(i);
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7ff fe19 	bl	80046d0 <etharp_free_entry>
 8004a9e:	3501      	adds	r5, #1
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8004aa0:	2d0a      	cmp	r5, #10
 8004aa2:	f104 0418 	add.w	r4, r4, #24
 8004aa6:	d1ea      	bne.n	8004a7e <etharp_tmr+0xa>
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8004aaa:	2a03      	cmp	r2, #3
 8004aac:	d106      	bne.n	8004abc <etharp_tmr+0x48>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8004aae:	7427      	strb	r7, [r4, #16]
 8004ab0:	e7f5      	b.n	8004a9e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	6860      	ldr	r0, [r4, #4]
 8004ab6:	f7ff ffc7 	bl	8004a48 <etharp_request>
 8004aba:	e7f0      	b.n	8004a9e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8004abc:	2a04      	cmp	r2, #4
 8004abe:	d1ee      	bne.n	8004a9e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8004ac0:	7426      	strb	r6, [r4, #16]
 8004ac2:	e7ec      	b.n	8004a9e <etharp_tmr+0x2a>
 8004ac4:	200051f0 	.word	0x200051f0

08004ac8 <etharp_output_to_arp_index>:
{
 8004ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004acc:	4d27      	ldr	r5, [pc, #156]	; (8004b6c <etharp_output_to_arp_index+0xa4>)
{
 8004ace:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004ad0:	2218      	movs	r2, #24
 8004ad2:	fb02 5204 	mla	r2, r2, r4, r5
{
 8004ad6:	b085      	sub	sp, #20
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004ad8:	7d12      	ldrb	r2, [r2, #20]
 8004ada:	2a01      	cmp	r2, #1
{
 8004adc:	4606      	mov	r6, r0
 8004ade:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8004ae0:	d806      	bhi.n	8004af0 <etharp_output_to_arp_index+0x28>
 8004ae2:	4b23      	ldr	r3, [pc, #140]	; (8004b70 <etharp_output_to_arp_index+0xa8>)
 8004ae4:	4923      	ldr	r1, [pc, #140]	; (8004b74 <etharp_output_to_arp_index+0xac>)
 8004ae6:	4824      	ldr	r0, [pc, #144]	; (8004b78 <etharp_output_to_arp_index+0xb0>)
 8004ae8:	f240 22ed 	movw	r2, #749	; 0x2ed
 8004aec:	f005 ff3e 	bl	800a96c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8004af0:	2118      	movs	r1, #24
 8004af2:	fb01 5904 	mla	r9, r1, r4, r5
 8004af6:	f106 0725 	add.w	r7, r6, #37	; 0x25
 8004afa:	f899 3014 	ldrb.w	r3, [r9, #20]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d10d      	bne.n	8004b1e <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8004b02:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8004b06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8004b0a:	d917      	bls.n	8004b3c <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	3104      	adds	r1, #4
 8004b10:	4630      	mov	r0, r6
 8004b12:	f7ff ff99 	bl	8004a48 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004b16:	b910      	cbnz	r0, 8004b1e <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8004b1e:	2318      	movs	r3, #24
 8004b20:	fb03 5304 	mla	r3, r3, r4, r5
 8004b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b28:	9200      	str	r2, [sp, #0]
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	463a      	mov	r2, r7
 8004b2e:	4641      	mov	r1, r8
 8004b30:	4630      	mov	r0, r6
 8004b32:	f004 ff2f 	bl	8009994 <ethernet_output>
}
 8004b36:	b005      	add	sp, #20
 8004b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8004b3c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8004b40:	d3ed      	bcc.n	8004b1e <etharp_output_to_arp_index+0x56>
 8004b42:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004b46:	00db      	lsls	r3, r3, #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8004b48:	f103 020c 	add.w	r2, r3, #12
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <etharp_output_to_arp_index+0xb4>)
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	2101      	movs	r1, #1
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8004b58:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8004b5a:	9103      	str	r1, [sp, #12]
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	442a      	add	r2, r5
 8004b60:	463b      	mov	r3, r7
 8004b62:	4639      	mov	r1, r7
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7ff fdc7 	bl	80046f8 <etharp_raw>
 8004b6a:	e7d4      	b.n	8004b16 <etharp_output_to_arp_index+0x4e>
 8004b6c:	200051ec 	.word	0x200051ec
 8004b70:	0800c1f1 	.word	0x0800c1f1
 8004b74:	0800c17f 	.word	0x0800c17f
 8004b78:	0800bc05 	.word	0x0800bc05
 8004b7c:	0800d800 	.word	0x0800d800

08004b80 <etharp_query>:
{
 8004b80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	4689      	mov	r9, r1
 8004b86:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004b88:	4601      	mov	r1, r0
 8004b8a:	f8d9 0000 	ldr.w	r0, [r9]
{
 8004b8e:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004b90:	f000 fb95 	bl	80052be <ip4_addr_isbroadcast_u32>
 8004b94:	4604      	mov	r4, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d15e      	bne.n	8004c58 <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 8004b9a:	f8d9 3000 	ldr.w	r3, [r9]
 8004b9e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8004ba2:	2ae0      	cmp	r2, #224	; 0xe0
 8004ba4:	d058      	beq.n	8004c58 <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d056      	beq.n	8004c58 <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8004baa:	2101      	movs	r1, #1
 8004bac:	4648      	mov	r0, r9
 8004bae:	f7ff fe0f 	bl	80047d0 <etharp_find_entry.isra.0>
  if (i < 0) {
 8004bb2:	1e05      	subs	r5, r0, #0
 8004bb4:	db53      	blt.n	8004c5e <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8004bb6:	4f40      	ldr	r7, [pc, #256]	; (8004cb8 <etharp_query+0x138>)
 8004bb8:	2318      	movs	r3, #24
 8004bba:	fb03 7305 	mla	r3, r3, r5, r7
 8004bbe:	7d1a      	ldrb	r2, [r3, #20]
 8004bc0:	b91a      	cbnz	r2, 8004bca <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8004bc2:	2401      	movs	r4, #1
 8004bc4:	751c      	strb	r4, [r3, #20]
    arp_table[i].netif = netif;
 8004bc6:	f8c3 8008 	str.w	r8, [r3, #8]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8004bca:	2318      	movs	r3, #24
 8004bcc:	fb03 7305 	mla	r3, r3, r5, r7
 8004bd0:	7d1b      	ldrb	r3, [r3, #20]
 8004bd2:	b933      	cbnz	r3, 8004be2 <etharp_query+0x62>
 8004bd4:	4b39      	ldr	r3, [pc, #228]	; (8004cbc <etharp_query+0x13c>)
 8004bd6:	493a      	ldr	r1, [pc, #232]	; (8004cc0 <etharp_query+0x140>)
 8004bd8:	483a      	ldr	r0, [pc, #232]	; (8004cc4 <etharp_query+0x144>)
 8004bda:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004bde:	f005 fec5 	bl	800a96c <iprintf>
  if (is_new_entry || (q == NULL)) {
 8004be2:	b90c      	cbnz	r4, 8004be8 <etharp_query+0x68>
 8004be4:	2e00      	cmp	r6, #0
 8004be6:	d13c      	bne.n	8004c62 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8004be8:	4649      	mov	r1, r9
 8004bea:	4640      	mov	r0, r8
 8004bec:	f7ff ff2c 	bl	8004a48 <etharp_request>
    if (q == NULL) {
 8004bf0:	2e00      	cmp	r6, #0
 8004bf2:	d138      	bne.n	8004c66 <etharp_query+0xe6>
}
 8004bf4:	b002      	add	sp, #8
 8004bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8004bfa:	d1fb      	bne.n	8004bf4 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004bfc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004cbc <etharp_query+0x13c>
 8004c00:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8004ccc <etharp_query+0x14c>
 8004c04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004cc4 <etharp_query+0x144>
 8004c08:	4634      	mov	r4, r6
    while (p) {
 8004c0a:	b99c      	cbnz	r4, 8004c34 <etharp_query+0xb4>
      pbuf_ref(p);
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	f001 fcaf 	bl	8006570 <pbuf_ref>
    if (p != NULL) {
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	d04c      	beq.n	8004cb0 <etharp_query+0x130>
 8004c16:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8004c18:	2318      	movs	r3, #24
 8004c1a:	fb03 f205 	mul.w	r2, r3, r5
 8004c1e:	461c      	mov	r4, r3
 8004c20:	58b8      	ldr	r0, [r7, r2]
 8004c22:	b108      	cbz	r0, 8004c28 <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8004c24:	f001 fae6 	bl	80061f4 <pbuf_free>
      arp_table[i].q = p;
 8004c28:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8004c2c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8004c2e:	f847 8003 	str.w	r8, [r7, r3]
 8004c32:	e7df      	b.n	8004bf4 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8004c34:	8962      	ldrh	r2, [r4, #10]
 8004c36:	8923      	ldrh	r3, [r4, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d108      	bne.n	8004c4e <etharp_query+0xce>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	b133      	cbz	r3, 8004c4e <etharp_query+0xce>
 8004c40:	4643      	mov	r3, r8
 8004c42:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8004c46:	4649      	mov	r1, r9
 8004c48:	4650      	mov	r0, sl
 8004c4a:	f005 fe8f 	bl	800a96c <iprintf>
      if (p->type != PBUF_ROM) {
 8004c4e:	7b23      	ldrb	r3, [r4, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d11e      	bne.n	8004c92 <etharp_query+0x112>
      p = p->next;
 8004c54:	6824      	ldr	r4, [r4, #0]
 8004c56:	e7d8      	b.n	8004c0a <etharp_query+0x8a>
    return ERR_ARG;
 8004c58:	f06f 000f 	mvn.w	r0, #15
 8004c5c:	e7ca      	b.n	8004bf4 <etharp_query+0x74>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	e7c8      	b.n	8004bf4 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8004c66:	2318      	movs	r3, #24
 8004c68:	fb03 7205 	mla	r2, r3, r5, r7
 8004c6c:	7d12      	ldrb	r2, [r2, #20]
 8004c6e:	2a01      	cmp	r2, #1
 8004c70:	d9c3      	bls.n	8004bfa <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8004c72:	4a15      	ldr	r2, [pc, #84]	; (8004cc8 <etharp_query+0x148>)
 8004c74:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8004c76:	220c      	movs	r2, #12
 8004c78:	fb13 2305 	smlabb	r3, r3, r5, r2
 8004c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c80:	9200      	str	r2, [sp, #0]
 8004c82:	443b      	add	r3, r7
 8004c84:	f108 0225 	add.w	r2, r8, #37	; 0x25
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	f004 fe82 	bl	8009994 <ethernet_output>
 8004c90:	e7b0      	b.n	8004bf4 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8004c92:	2200      	movs	r2, #0
 8004c94:	8921      	ldrh	r1, [r4, #8]
 8004c96:	2002      	movs	r0, #2
 8004c98:	f001 fb16 	bl	80062c8 <pbuf_alloc>
      if (p != NULL) {
 8004c9c:	4680      	mov	r8, r0
 8004c9e:	b138      	cbz	r0, 8004cb0 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	f001 fcbb 	bl	800661c <pbuf_copy>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	d0b6      	beq.n	8004c18 <etharp_query+0x98>
          pbuf_free(p);
 8004caa:	4640      	mov	r0, r8
 8004cac:	f001 faa2 	bl	80061f4 <pbuf_free>
      result = ERR_MEM;
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e79e      	b.n	8004bf4 <etharp_query+0x74>
 8004cb6:	bf00      	nop
 8004cb8:	200051ec 	.word	0x200051ec
 8004cbc:	0800c1f1 	.word	0x0800c1f1
 8004cc0:	0800c1af 	.word	0x0800c1af
 8004cc4:	0800bc05 	.word	0x0800bc05
 8004cc8:	200052dc 	.word	0x200052dc
 8004ccc:	0800c1d7 	.word	0x0800c1d7

08004cd0 <etharp_output>:
{
 8004cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	b085      	sub	sp, #20
 8004cd6:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8004cd8:	4604      	mov	r4, r0
 8004cda:	b930      	cbnz	r0, 8004cea <etharp_output+0x1a>
 8004cdc:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <etharp_output+0x108>)
 8004cde:	493f      	ldr	r1, [pc, #252]	; (8004ddc <etharp_output+0x10c>)
 8004ce0:	483f      	ldr	r0, [pc, #252]	; (8004de0 <etharp_output+0x110>)
 8004ce2:	f240 321b 	movw	r2, #795	; 0x31b
 8004ce6:	f005 fe41 	bl	800a96c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8004cea:	b936      	cbnz	r6, 8004cfa <etharp_output+0x2a>
 8004cec:	4b3a      	ldr	r3, [pc, #232]	; (8004dd8 <etharp_output+0x108>)
 8004cee:	493d      	ldr	r1, [pc, #244]	; (8004de4 <etharp_output+0x114>)
 8004cf0:	483b      	ldr	r0, [pc, #236]	; (8004de0 <etharp_output+0x110>)
 8004cf2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8004cf6:	f005 fe39 	bl	800a96c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8004cfa:	b935      	cbnz	r5, 8004d0a <etharp_output+0x3a>
 8004cfc:	4b36      	ldr	r3, [pc, #216]	; (8004dd8 <etharp_output+0x108>)
 8004cfe:	493a      	ldr	r1, [pc, #232]	; (8004de8 <etharp_output+0x118>)
 8004d00:	4837      	ldr	r0, [pc, #220]	; (8004de0 <etharp_output+0x110>)
 8004d02:	f240 321d 	movw	r2, #797	; 0x31d
 8004d06:	f005 fe31 	bl	800a96c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	6828      	ldr	r0, [r5, #0]
 8004d0e:	f000 fad6 	bl	80052be <ip4_addr_isbroadcast_u32>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d15b      	bne.n	8004dce <etharp_output+0xfe>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d1c:	2ae0      	cmp	r2, #224	; 0xe0
 8004d1e:	d11d      	bne.n	8004d5c <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8004d26:	235e      	movs	r3, #94	; 0x5e
 8004d28:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004d2c:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8004d2e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8004d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d36:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8004d3a:	78ab      	ldrb	r3, [r5, #2]
 8004d3c:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8004d40:	78eb      	ldrb	r3, [r5, #3]
 8004d42:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8004d46:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8004d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d4c:	9200      	str	r2, [sp, #0]
 8004d4e:	4631      	mov	r1, r6
 8004d50:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8004d54:	4620      	mov	r0, r4
 8004d56:	f004 fe1d 	bl	8009994 <ethernet_output>
 8004d5a:	e01f      	b.n	8004d9c <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004d5c:	6862      	ldr	r2, [r4, #4]
 8004d5e:	68a1      	ldr	r1, [r4, #8]
 8004d60:	405a      	eors	r2, r3
 8004d62:	420a      	tst	r2, r1
 8004d64:	d008      	beq.n	8004d78 <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8004d66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8004d68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8004d70:	68e3      	ldr	r3, [r4, #12]
 8004d72:	b373      	cbz	r3, 8004dd2 <etharp_output+0x102>
            dst_addr = netif_ip4_gw(netif);
 8004d74:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8004d78:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <etharp_output+0x11c>)
 8004d7a:	491d      	ldr	r1, [pc, #116]	; (8004df0 <etharp_output+0x120>)
 8004d7c:	781a      	ldrb	r2, [r3, #0]
 8004d7e:	2018      	movs	r0, #24
 8004d80:	fb00 1002 	mla	r0, r0, r2, r1
 8004d84:	7d01      	ldrb	r1, [r0, #20]
 8004d86:	2901      	cmp	r1, #1
 8004d88:	4619      	mov	r1, r3
 8004d8a:	d909      	bls.n	8004da0 <etharp_output+0xd0>
 8004d8c:	682f      	ldr	r7, [r5, #0]
 8004d8e:	6843      	ldr	r3, [r0, #4]
 8004d90:	429f      	cmp	r7, r3
 8004d92:	d105      	bne.n	8004da0 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8004d94:	4631      	mov	r1, r6
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff fe96 	bl	8004ac8 <etharp_output_to_arp_index>
}
 8004d9c:	b005      	add	sp, #20
 8004d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <etharp_output+0x120>)
{
 8004da2:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8004da4:	7d18      	ldrb	r0, [r3, #20]
 8004da6:	2801      	cmp	r0, #1
 8004da8:	d906      	bls.n	8004db8 <etharp_output+0xe8>
 8004daa:	682f      	ldr	r7, [r5, #0]
 8004dac:	6858      	ldr	r0, [r3, #4]
 8004dae:	4287      	cmp	r7, r0
 8004db0:	d102      	bne.n	8004db8 <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	700a      	strb	r2, [r1, #0]
 8004db6:	e7ed      	b.n	8004d94 <etharp_output+0xc4>
 8004db8:	3201      	adds	r2, #1
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8004dba:	2a0a      	cmp	r2, #10
 8004dbc:	f103 0318 	add.w	r3, r3, #24
 8004dc0:	d1f0      	bne.n	8004da4 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8004dc2:	4632      	mov	r2, r6
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f7ff feda 	bl	8004b80 <etharp_query>
 8004dcc:	e7e6      	b.n	8004d9c <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <etharp_output+0x124>)
 8004dd0:	e7ba      	b.n	8004d48 <etharp_output+0x78>
            return ERR_RTE;
 8004dd2:	f06f 0003 	mvn.w	r0, #3
 8004dd6:	e7e1      	b.n	8004d9c <etharp_output+0xcc>
 8004dd8:	0800c1f1 	.word	0x0800c1f1
 8004ddc:	0800c228 	.word	0x0800c228
 8004de0:	0800bc05 	.word	0x0800bc05
 8004de4:	0800cc33 	.word	0x0800cc33
 8004de8:	0800c13c 	.word	0x0800c13c
 8004dec:	200052dc 	.word	0x200052dc
 8004df0:	200051ec 	.word	0x200051ec
 8004df4:	0800d794 	.word	0x0800d794

08004df8 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8004df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	b087      	sub	sp, #28
 8004dfe:	460f      	mov	r7, r1
 8004e00:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8004e02:	2124      	movs	r1, #36	; 0x24
 8004e04:	2200      	movs	r2, #0
 8004e06:	2001      	movs	r0, #1
 8004e08:	f001 fa5e 	bl	80062c8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	b3a0      	cbz	r0, 8004e7a <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8004e10:	8943      	ldrh	r3, [r0, #10]
 8004e12:	2b23      	cmp	r3, #35	; 0x23
 8004e14:	d806      	bhi.n	8004e24 <icmp_send_response.isra.0+0x2c>
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <icmp_send_response.isra.0+0x88>)
 8004e18:	491a      	ldr	r1, [pc, #104]	; (8004e84 <icmp_send_response.isra.0+0x8c>)
 8004e1a:	481b      	ldr	r0, [pc, #108]	; (8004e88 <icmp_send_response.isra.0+0x90>)
 8004e1c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8004e20:	f005 fda4 	bl	800a96c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8004e24:	6822      	ldr	r2, [r4, #0]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8004e26:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	7123      	strb	r3, [r4, #4]
 8004e2c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8004e2e:	71a3      	strb	r3, [r4, #6]
 8004e30:	71e3      	strb	r3, [r4, #7]
  icmphdr->type = type;
 8004e32:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8004e34:	7066      	strb	r6, [r4, #1]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8004e36:	4613      	mov	r3, r2
 8004e38:	f104 0108 	add.w	r1, r4, #8
 8004e3c:	f102 001c 	add.w	r0, r2, #28
 8004e40:	f853 6b04 	ldr.w	r6, [r3], #4
 8004e44:	f841 6b04 	str.w	r6, [r1], #4
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	d1f9      	bne.n	8004e40 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8004e4c:	ae06      	add	r6, sp, #24
 8004e4e:	68d3      	ldr	r3, [r2, #12]
 8004e50:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8004e54:	4630      	mov	r0, r6
 8004e56:	f000 f8bb 	bl	8004fd0 <ip4_route>
#endif
  if (netif != NULL) {
 8004e5a:	b158      	cbz	r0, 8004e74 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8004e5c:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004e5e:	2301      	movs	r3, #1
    icmphdr->chksum = 0;
 8004e60:	70a1      	strb	r1, [r4, #2]
 8004e62:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8004e64:	4632      	mov	r2, r6
 8004e66:	9002      	str	r0, [sp, #8]
 8004e68:	e88d 000a 	stmia.w	sp, {r1, r3}
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	23ff      	movs	r3, #255	; 0xff
 8004e70:	f000 fa14 	bl	800529c <ip4_output_if>
  }
  pbuf_free(q);
 8004e74:	4628      	mov	r0, r5
 8004e76:	f001 f9bd 	bl	80061f4 <pbuf_free>
}
 8004e7a:	b007      	add	sp, #28
 8004e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	0800c30f 	.word	0x0800c30f
 8004e84:	0800c344 	.word	0x0800c344
 8004e88:	0800bc05 	.word	0x0800bc05

08004e8c <icmp_input>:
{
 8004e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8004e90:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <icmp_input+0x118>)
 8004e92:	f8d3 9008 	ldr.w	r9, [r3, #8]
  hlen = IPH_HL(iphdr_in) * 4;
 8004e96:	f899 5000 	ldrb.w	r5, [r9]
 8004e9a:	f005 050f 	and.w	r5, r5, #15
 8004e9e:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8004ea0:	2d13      	cmp	r5, #19
{
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4688      	mov	r8, r1
 8004ea8:	461f      	mov	r7, r3
  if (hlen < IP_HLEN) {
 8004eaa:	d92a      	bls.n	8004f02 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8004eac:	8942      	ldrh	r2, [r0, #10]
 8004eae:	2a03      	cmp	r2, #3
 8004eb0:	d927      	bls.n	8004f02 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8004eb2:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8004eb4:	7812      	ldrb	r2, [r2, #0]
 8004eb6:	2a08      	cmp	r2, #8
 8004eb8:	d123      	bne.n	8004f02 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8004eba:	6958      	ldr	r0, [r3, #20]
 8004ebc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8004ec0:	2ae0      	cmp	r2, #224	; 0xe0
 8004ec2:	d01e      	beq.n	8004f02 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8004ec4:	6819      	ldr	r1, [r3, #0]
 8004ec6:	f000 f9fa 	bl	80052be <ip4_addr_isbroadcast_u32>
 8004eca:	4606      	mov	r6, r0
 8004ecc:	b9c8      	cbnz	r0, 8004f02 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8004ece:	8923      	ldrh	r3, [r4, #8]
 8004ed0:	2b07      	cmp	r3, #7
 8004ed2:	d916      	bls.n	8004f02 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004ed4:	f105 010e 	add.w	r1, r5, #14
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f001 f985 	bl	80061e8 <pbuf_header>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d04f      	beq.n	8004f82 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8004ee2:	8921      	ldrh	r1, [r4, #8]
 8004ee4:	4429      	add	r1, r5
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	b289      	uxth	r1, r1
 8004eea:	2002      	movs	r0, #2
 8004eec:	f001 f9ec 	bl	80062c8 <pbuf_alloc>
      if (r == NULL) {
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	b130      	cbz	r0, 8004f02 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8004ef4:	8942      	ldrh	r2, [r0, #10]
 8004ef6:	f105 0308 	add.w	r3, r5, #8
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d207      	bcs.n	8004f0e <icmp_input+0x82>
        pbuf_free(r);
 8004efe:	f001 f979 	bl	80061f4 <pbuf_free>
  pbuf_free(p);
 8004f02:	4620      	mov	r0, r4
}
 8004f04:	b005      	add	sp, #20
 8004f06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8004f0a:	f001 b973 	b.w	80061f4 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8004f0e:	4649      	mov	r1, r9
 8004f10:	462a      	mov	r2, r5
 8004f12:	6840      	ldr	r0, [r0, #4]
 8004f14:	f005 fd17 	bl	800a946 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8004f18:	4269      	negs	r1, r5
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f001 f964 	bl	80061e8 <pbuf_header>
 8004f20:	b138      	cbz	r0, 8004f32 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8004f22:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <icmp_input+0x11c>)
 8004f24:	4921      	ldr	r1, [pc, #132]	; (8004fac <icmp_input+0x120>)
 8004f26:	4822      	ldr	r0, [pc, #136]	; (8004fb0 <icmp_input+0x124>)
 8004f28:	22af      	movs	r2, #175	; 0xaf
 8004f2a:	f005 fd1f 	bl	800a96c <iprintf>
        pbuf_free(r);
 8004f2e:	4630      	mov	r0, r6
 8004f30:	e7e5      	b.n	8004efe <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8004f32:	4621      	mov	r1, r4
 8004f34:	4630      	mov	r0, r6
 8004f36:	f001 fb71 	bl	800661c <pbuf_copy>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d1f7      	bne.n	8004f2e <icmp_input+0xa2>
      pbuf_free(p);
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f001 f958 	bl	80061f4 <pbuf_free>
 8004f44:	4634      	mov	r4, r6
    if (pbuf_header(p, (s16_t)hlen)) {
 8004f46:	4629      	mov	r1, r5
 8004f48:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8004f4a:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8004f4c:	f001 f94c 	bl	80061e8 <pbuf_header>
 8004f50:	4602      	mov	r2, r0
 8004f52:	2800      	cmp	r0, #0
 8004f54:	d1d5      	bne.n	8004f02 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8004f56:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004f60:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8004f62:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8004f64:	70b0      	strb	r0, [r6, #2]
 8004f66:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8004f68:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8004f6a:	7288      	strb	r0, [r1, #10]
 8004f6c:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8004f6e:	2101      	movs	r1, #1
 8004f70:	9101      	str	r1, [sp, #4]
 8004f72:	9000      	str	r0, [sp, #0]
 8004f74:	f8cd 8008 	str.w	r8, [sp, #8]
 8004f78:	490e      	ldr	r1, [pc, #56]	; (8004fb4 <icmp_input+0x128>)
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 f98e 	bl	800529c <ip4_output_if>
 8004f80:	e7bf      	b.n	8004f02 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8004f82:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8004f86:	31f2      	adds	r1, #242	; 0xf2
 8004f88:	b209      	sxth	r1, r1
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f001 f92c 	bl	80061e8 <pbuf_header>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	d0d8      	beq.n	8004f46 <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8004f94:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <icmp_input+0x11c>)
 8004f96:	4908      	ldr	r1, [pc, #32]	; (8004fb8 <icmp_input+0x12c>)
 8004f98:	4805      	ldr	r0, [pc, #20]	; (8004fb0 <icmp_input+0x124>)
 8004f9a:	22c0      	movs	r2, #192	; 0xc0
 8004f9c:	f005 fce6 	bl	800a96c <iprintf>
        goto icmperr;
 8004fa0:	e7af      	b.n	8004f02 <icmp_input+0x76>
 8004fa2:	bf00      	nop
 8004fa4:	200055ec 	.word	0x200055ec
 8004fa8:	0800c30f 	.word	0x0800c30f
 8004fac:	0800c2a8 	.word	0x0800c2a8
 8004fb0:	0800bc05 	.word	0x0800bc05
 8004fb4:	20005600 	.word	0x20005600
 8004fb8:	0800c2dd 	.word	0x0800c2dd

08004fbc <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	3004      	adds	r0, #4
 8004fc0:	2103      	movs	r1, #3
 8004fc2:	f7ff bf19 	b.w	8004df8 <icmp_send_response.isra.0>

08004fc6 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8004fc6:	460a      	mov	r2, r1
 8004fc8:	3004      	adds	r0, #4
 8004fca:	210b      	movs	r1, #11
 8004fcc:	f7ff bf14 	b.w	8004df8 <icmp_send_response.isra.0>

08004fd0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8004fd0:	b530      	push	{r4, r5, lr}
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <ip4_route+0x50>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	b96b      	cbnz	r3, 8004ff4 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8004fd8:	4a12      	ldr	r2, [pc, #72]	; (8005024 <ip4_route+0x54>)
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	b1ea      	cbz	r2, 800501a <ip4_route+0x4a>
 8004fde:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
 8004fe2:	f001 0105 	and.w	r1, r1, #5
 8004fe6:	2905      	cmp	r1, #5
 8004fe8:	d117      	bne.n	800501a <ip4_route+0x4a>
 8004fea:	6851      	ldr	r1, [r2, #4]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	bf18      	it	ne
 8004ff0:	4613      	movne	r3, r2
 8004ff2:	e012      	b.n	800501a <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004ff4:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 8004ff8:	f004 0205 	and.w	r2, r4, #5
 8004ffc:	2a05      	cmp	r2, #5
 8004ffe:	d1e9      	bne.n	8004fd4 <ip4_route+0x4>
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	2a00      	cmp	r2, #0
 8005004:	d0e6      	beq.n	8004fd4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005006:	6801      	ldr	r1, [r0, #0]
 8005008:	689d      	ldr	r5, [r3, #8]
 800500a:	404a      	eors	r2, r1
 800500c:	422a      	tst	r2, r5
 800500e:	d004      	beq.n	800501a <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005010:	07a2      	lsls	r2, r4, #30
 8005012:	d4df      	bmi.n	8004fd4 <ip4_route+0x4>
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	4291      	cmp	r1, r2
 8005018:	d1dc      	bne.n	8004fd4 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800501a:	4618      	mov	r0, r3
 800501c:	bd30      	pop	{r4, r5, pc}
 800501e:	bf00      	nop
 8005020:	2000d918 	.word	0x2000d918
 8005024:	2000d91c 	.word	0x2000d91c

08005028 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800502c:	6847      	ldr	r7, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800502e:	f897 9000 	ldrb.w	r9, [r7]
 8005032:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005036:	2b04      	cmp	r3, #4
{
 8005038:	4605      	mov	r5, r0
 800503a:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 800503c:	d005      	beq.n	800504a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800503e:	4628      	mov	r0, r5
 8005040:	f001 f8d8 	bl	80061f4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005044:	2000      	movs	r0, #0
 8005046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800504a:	8878      	ldrh	r0, [r7, #2]
 800504c:	f7ff fb2a 	bl	80046a4 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005050:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL(iphdr);
 8005052:	f009 090f 	and.w	r9, r9, #15
  if (iphdr_len < p->tot_len) {
 8005056:	4283      	cmp	r3, r0
  iphdr_hlen *= 4;
 8005058:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800505c:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 800505e:	d903      	bls.n	8005068 <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8005060:	4601      	mov	r1, r0
 8005062:	4628      	mov	r0, r5
 8005064:	f001 fa0c 	bl	8006480 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005068:	896b      	ldrh	r3, [r5, #10]
 800506a:	454b      	cmp	r3, r9
 800506c:	d3e7      	bcc.n	800503e <ip4_input+0x16>
 800506e:	892b      	ldrh	r3, [r5, #8]
 8005070:	42a3      	cmp	r3, r4
 8005072:	d3e4      	bcc.n	800503e <ip4_input+0x16>
 8005074:	f1b9 0f13 	cmp.w	r9, #19
 8005078:	d9e1      	bls.n	800503e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4c49      	ldr	r4, [pc, #292]	; (80051a4 <ip4_input+0x17c>)
 800507e:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005088:	2be0      	cmp	r3, #224	; 0xe0
 800508a:	d139      	bne.n	8005100 <ip4_input+0xd8>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800508c:	f898 302b 	ldrb.w	r3, [r8, #43]	; 0x2b
 8005090:	07da      	lsls	r2, r3, #31
 8005092:	d503      	bpl.n	800509c <ip4_input+0x74>
 8005094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d158      	bne.n	800514e <ip4_input+0x126>
      netif = NULL;
 800509c:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800509e:	4641      	mov	r1, r8
 80050a0:	6920      	ldr	r0, [r4, #16]
 80050a2:	f000 f90c 	bl	80052be <ip4_addr_isbroadcast_u32>
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1c9      	bne.n	800503e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80050b0:	2be0      	cmp	r3, #224	; 0xe0
 80050b2:	d0c4      	beq.n	800503e <ip4_input+0x16>
  if (netif == NULL) {
 80050b4:	2e00      	cmp	r6, #0
 80050b6:	d0c2      	beq.n	800503e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050be:	b133      	cbz	r3, 80050ce <ip4_input+0xa6>
    p = ip4_reass(p);
 80050c0:	4628      	mov	r0, r5
 80050c2:	f000 fa2b 	bl	800551c <ip4_reass>
    if (p == NULL) {
 80050c6:	4605      	mov	r5, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d0bb      	beq.n	8005044 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 80050cc:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 80050ce:	60a7      	str	r7, [r4, #8]
  ip_data.current_input_netif = inp;
 80050d0:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80050d4:	783b      	ldrb	r3, [r7, #0]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	009b      	lsls	r3, r3, #2
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80050dc:	f1c9 0100 	rsb	r1, r9, #0
 80050e0:	4628      	mov	r0, r5
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80050e2:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80050e4:	f001 f880 	bl	80061e8 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 80050e8:	7a7b      	ldrb	r3, [r7, #9]
 80050ea:	2b06      	cmp	r3, #6
 80050ec:	d03d      	beq.n	800516a <ip4_input+0x142>
 80050ee:	2b11      	cmp	r3, #17
 80050f0:	d02f      	beq.n	8005152 <ip4_input+0x12a>
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d13e      	bne.n	8005174 <ip4_input+0x14c>
      icmp_input(p, inp);
 80050f6:	4641      	mov	r1, r8
 80050f8:	4628      	mov	r0, r5
 80050fa:	f7ff fec7 	bl	8004e8c <icmp_input>
      break;
 80050fe:	e02c      	b.n	800515a <ip4_input+0x132>
        netif = netif_list;
 8005100:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80051a8 <ip4_input+0x180>
 8005104:	4646      	mov	r6, r8
 8005106:	f04f 0a01 	mov.w	sl, #1
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800510a:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
 800510e:	07db      	lsls	r3, r3, #31
 8005110:	d404      	bmi.n	800511c <ip4_input+0xf4>
      if (first) {
 8005112:	f1ba 0f00 	cmp.w	sl, #0
 8005116:	d10d      	bne.n	8005134 <ip4_input+0x10c>
        netif = netif->next;
 8005118:	6836      	ldr	r6, [r6, #0]
 800511a:	e010      	b.n	800513e <ip4_input+0x116>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800511c:	6873      	ldr	r3, [r6, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f7      	beq.n	8005112 <ip4_input+0xea>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005122:	6960      	ldr	r0, [r4, #20]
 8005124:	4283      	cmp	r3, r0
 8005126:	d0ba      	beq.n	800509e <ip4_input+0x76>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005128:	4631      	mov	r1, r6
 800512a:	f000 f8c8 	bl	80052be <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800512e:	2800      	cmp	r0, #0
 8005130:	d0ef      	beq.n	8005112 <ip4_input+0xea>
 8005132:	e7b4      	b.n	800509e <ip4_input+0x76>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8005134:	7d23      	ldrb	r3, [r4, #20]
 8005136:	2b7f      	cmp	r3, #127	; 0x7f
 8005138:	d0b0      	beq.n	800509c <ip4_input+0x74>
        netif = netif_list;
 800513a:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800513e:	4546      	cmp	r6, r8
        netif = netif->next;
 8005140:	bf08      	it	eq
 8005142:	6836      	ldreq	r6, [r6, #0]
 8005144:	f04f 0a00 	mov.w	sl, #0
    } while (netif != NULL);
 8005148:	2e00      	cmp	r6, #0
 800514a:	d1de      	bne.n	800510a <ip4_input+0xe2>
 800514c:	e7a6      	b.n	800509c <ip4_input+0x74>
 800514e:	4646      	mov	r6, r8
 8005150:	e7a5      	b.n	800509e <ip4_input+0x76>
      udp_input(p, inp);
 8005152:	4641      	mov	r1, r8
 8005154:	4628      	mov	r0, r5
 8005156:	f004 fb23 	bl	80097a0 <udp_input>
  ip_data.current_netif = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 800515e:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8005160:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005162:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005164:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005166:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005168:	e76c      	b.n	8005044 <ip4_input+0x1c>
      tcp_input(p, inp);
 800516a:	4641      	mov	r1, r8
 800516c:	4628      	mov	r0, r5
 800516e:	f002 fdb7 	bl	8007ce0 <tcp_input>
      break;
 8005172:	e7f2      	b.n	800515a <ip4_input+0x132>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005174:	4631      	mov	r1, r6
 8005176:	6960      	ldr	r0, [r4, #20]
 8005178:	f000 f8a1 	bl	80052be <ip4_addr_isbroadcast_u32>
 800517c:	b968      	cbnz	r0, 800519a <ip4_input+0x172>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800517e:	6963      	ldr	r3, [r4, #20]
 8005180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005184:	2be0      	cmp	r3, #224	; 0xe0
 8005186:	d008      	beq.n	800519a <ip4_input+0x172>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005188:	4649      	mov	r1, r9
 800518a:	4628      	mov	r0, r5
 800518c:	f001 f82f 	bl	80061ee <pbuf_header_force>
        p->payload = iphdr;
 8005190:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8005192:	2102      	movs	r1, #2
 8005194:	4628      	mov	r0, r5
 8005196:	f7ff ff11 	bl	8004fbc <icmp_dest_unreach>
      pbuf_free(p);
 800519a:	4628      	mov	r0, r5
 800519c:	f001 f82a 	bl	80061f4 <pbuf_free>
 80051a0:	e7db      	b.n	800515a <ip4_input+0x132>
 80051a2:	bf00      	nop
 80051a4:	200055ec 	.word	0x200055ec
 80051a8:	2000d918 	.word	0x2000d918

080051ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80051ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80051b0:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80051b2:	89c3      	ldrh	r3, [r0, #14]
{
 80051b4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80051b8:	2b01      	cmp	r3, #1
{
 80051ba:	4605      	mov	r5, r0
 80051bc:	468a      	mov	sl, r1
 80051be:	4616      	mov	r6, r2
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80051c0:	d006      	beq.n	80051d0 <ip4_output_if_src+0x24>
 80051c2:	4b30      	ldr	r3, [pc, #192]	; (8005284 <ip4_output_if_src+0xd8>)
 80051c4:	4930      	ldr	r1, [pc, #192]	; (8005288 <ip4_output_if_src+0xdc>)
 80051c6:	4831      	ldr	r0, [pc, #196]	; (800528c <ip4_output_if_src+0xe0>)
 80051c8:	f240 3233 	movw	r2, #819	; 0x333
 80051cc:	f005 fbce 	bl	800a96c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	d047      	beq.n	8005264 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 80051d4:	2114      	movs	r1, #20
 80051d6:	4628      	mov	r0, r5
 80051d8:	f001 f806 	bl	80061e8 <pbuf_header>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d14e      	bne.n	800527e <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80051e0:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80051e2:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80051e4:	2b13      	cmp	r3, #19
 80051e6:	d806      	bhi.n	80051f6 <ip4_output_if_src+0x4a>
 80051e8:	4b26      	ldr	r3, [pc, #152]	; (8005284 <ip4_output_if_src+0xd8>)
 80051ea:	4929      	ldr	r1, [pc, #164]	; (8005290 <ip4_output_if_src+0xe4>)
 80051ec:	4827      	ldr	r0, [pc, #156]	; (800528c <ip4_output_if_src+0xe0>)
 80051ee:	f240 3261 	movw	r2, #865	; 0x361
 80051f2:	f005 fbbb 	bl	800a96c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 80051f6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80051fa:	7227      	strb	r7, [r4, #8]
    IPH_PROTO_SET(iphdr, proto);
 80051fc:	7263      	strb	r3, [r4, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80051fe:	6833      	ldr	r3, [r6, #0]
 8005200:	6123      	str	r3, [r4, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8005202:	2345      	movs	r3, #69	; 0x45
 8005204:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8005206:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800520a:	7063      	strb	r3, [r4, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800520c:	8928      	ldrh	r0, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800520e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005298 <ip4_output_if_src+0xec>
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005212:	f7ff fa47 	bl	80046a4 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8005216:	2700      	movs	r7, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005218:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800521a:	71a7      	strb	r7, [r4, #6]
 800521c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800521e:	f8b9 0000 	ldrh.w	r0, [r9]
 8005222:	f7ff fa3f 	bl	80046a4 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8005226:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800522a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800522c:	3301      	adds	r3, #1
 800522e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8005232:	f1ba 0f00 	cmp.w	sl, #0
 8005236:	d112      	bne.n	800525e <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8005238:	4b16      	ldr	r3, [pc, #88]	; (8005294 <ip4_output_if_src+0xe8>)
 800523a:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800523c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800523e:	72a7      	strb	r7, [r4, #10]
 8005240:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8005242:	f8b8 3022 	ldrh.w	r3, [r8, #34]	; 0x22
 8005246:	b19b      	cbz	r3, 8005270 <ip4_output_if_src+0xc4>
 8005248:	892a      	ldrh	r2, [r5, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	d910      	bls.n	8005270 <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 800524e:	4632      	mov	r2, r6
 8005250:	4641      	mov	r1, r8
 8005252:	4628      	mov	r0, r5
 8005254:	f000 fb0c 	bl	8005870 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8005258:	b002      	add	sp, #8
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800525e:	f8da 3000 	ldr.w	r3, [sl]
 8005262:	e7eb      	b.n	800523c <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005264:	686b      	ldr	r3, [r5, #4]
 8005266:	ae02      	add	r6, sp, #8
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f846 3d04 	str.w	r3, [r6, #-4]!
 800526e:	e7e8      	b.n	8005242 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8005270:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005274:	4632      	mov	r2, r6
 8005276:	4629      	mov	r1, r5
 8005278:	4640      	mov	r0, r8
 800527a:	4798      	blx	r3
 800527c:	e7ec      	b.n	8005258 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800527e:	f06f 0001 	mvn.w	r0, #1
 8005282:	e7e9      	b.n	8005258 <ip4_output_if_src+0xac>
 8005284:	0800c370 	.word	0x0800c370
 8005288:	0800c3a4 	.word	0x0800c3a4
 800528c:	0800bc05 	.word	0x0800bc05
 8005290:	0800c3b0 	.word	0x0800c3b0
 8005294:	0800c3e0 	.word	0x0800c3e0
 8005298:	200052de 	.word	0x200052de

0800529c <ip4_output_if>:
{
 800529c:	b4f0      	push	{r4, r5, r6, r7}
 800529e:	9c06      	ldr	r4, [sp, #24]
 80052a0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80052a4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80052a8:	b11a      	cbz	r2, 80052b2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80052aa:	b109      	cbz	r1, 80052b0 <ip4_output_if+0x14>
 80052ac:	680f      	ldr	r7, [r1, #0]
 80052ae:	b907      	cbnz	r7, 80052b2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 80052b0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80052b2:	9406      	str	r4, [sp, #24]
 80052b4:	9605      	str	r6, [sp, #20]
 80052b6:	9504      	str	r5, [sp, #16]
}
 80052b8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80052ba:	f7ff bf77 	b.w	80051ac <ip4_output_if_src>

080052be <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80052be:	1e43      	subs	r3, r0, #1
 80052c0:	3303      	adds	r3, #3
 80052c2:	d811      	bhi.n	80052e8 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80052c4:	f891 302b 	ldrb.w	r3, [r1, #43]	; 0x2b
 80052c8:	f013 0302 	ands.w	r3, r3, #2
 80052cc:	d00e      	beq.n	80052ec <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80052ce:	684a      	ldr	r2, [r1, #4]
 80052d0:	4290      	cmp	r0, r2
 80052d2:	d00b      	beq.n	80052ec <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80052d4:	688b      	ldr	r3, [r1, #8]
 80052d6:	4042      	eors	r2, r0
 80052d8:	421a      	tst	r2, r3
 80052da:	d107      	bne.n	80052ec <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80052dc:	43db      	mvns	r3, r3
 80052de:	4383      	bics	r3, r0
    return 1;
 80052e0:	bf0c      	ite	eq
 80052e2:	2001      	moveq	r0, #1
 80052e4:	2000      	movne	r0, #0
 80052e6:	4770      	bx	lr
 80052e8:	2001      	movs	r0, #1
 80052ea:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80052ec:	2000      	movs	r0, #0
  }
}
 80052ee:	4770      	bx	lr

080052f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80052f0:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <ip_reass_dequeue_datagram+0x34>)
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4282      	cmp	r2, r0
{
 80052f8:	4604      	mov	r4, r0
 80052fa:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80052fc:	d107      	bne.n	800530e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80052fe:	6802      	ldr	r2, [r0, #0]
 8005300:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8005302:	4621      	mov	r1, r4
 8005304:	2004      	movs	r0, #4
}
 8005306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800530a:	f000 be19 	b.w	8005f40 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800530e:	b931      	cbnz	r1, 800531e <ip_reass_dequeue_datagram+0x2e>
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <ip_reass_dequeue_datagram+0x38>)
 8005312:	4906      	ldr	r1, [pc, #24]	; (800532c <ip_reass_dequeue_datagram+0x3c>)
 8005314:	4806      	ldr	r0, [pc, #24]	; (8005330 <ip_reass_dequeue_datagram+0x40>)
 8005316:	f240 1245 	movw	r2, #325	; 0x145
 800531a:	f005 fb27 	bl	800a96c <iprintf>
    prev->next = ipr->next;
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	602b      	str	r3, [r5, #0]
 8005322:	e7ee      	b.n	8005302 <ip_reass_dequeue_datagram+0x12>
 8005324:	200052e4 	.word	0x200052e4
 8005328:	0800c4c9 	.word	0x0800c4c9
 800532c:	0800c502 	.word	0x0800c502
 8005330:	0800bc05 	.word	0x0800bc05

08005334 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005334:	4281      	cmp	r1, r0
{
 8005336:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	4605      	mov	r5, r0
 800533c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800533e:	d105      	bne.n	800534c <ip_reass_free_complete_datagram+0x18>
 8005340:	4b2f      	ldr	r3, [pc, #188]	; (8005400 <ip_reass_free_complete_datagram+0xcc>)
 8005342:	4930      	ldr	r1, [pc, #192]	; (8005404 <ip_reass_free_complete_datagram+0xd0>)
 8005344:	4830      	ldr	r0, [pc, #192]	; (8005408 <ip_reass_free_complete_datagram+0xd4>)
 8005346:	22ab      	movs	r2, #171	; 0xab
 8005348:	f005 fb10 	bl	800a96c <iprintf>
  if (prev != NULL) {
 800534c:	b147      	cbz	r7, 8005360 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	429d      	cmp	r5, r3
 8005352:	d005      	beq.n	8005360 <ip_reass_free_complete_datagram+0x2c>
 8005354:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <ip_reass_free_complete_datagram+0xcc>)
 8005356:	492d      	ldr	r1, [pc, #180]	; (800540c <ip_reass_free_complete_datagram+0xd8>)
 8005358:	482b      	ldr	r0, [pc, #172]	; (8005408 <ip_reass_free_complete_datagram+0xd4>)
 800535a:	22ad      	movs	r2, #173	; 0xad
 800535c:	f005 fb06 	bl	800a96c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8005360:	686e      	ldr	r6, [r5, #4]
 8005362:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8005364:	889a      	ldrh	r2, [r3, #4]
 8005366:	bb92      	cbnz	r2, 80053ce <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800536c:	f105 011c 	add.w	r1, r5, #28
 8005370:	f105 0208 	add.w	r2, r5, #8
 8005374:	f852 0b04 	ldr.w	r0, [r2], #4
 8005378:	f843 0b04 	str.w	r0, [r3], #4
 800537c:	428a      	cmp	r2, r1
 800537e:	d1f9      	bne.n	8005374 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8005380:	2101      	movs	r1, #1
 8005382:	4630      	mov	r0, r6
 8005384:	f7ff fe1f 	bl	8004fc6 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005388:	4630      	mov	r0, r6
 800538a:	f001 f8e9 	bl	8006560 <pbuf_clen>
 800538e:	4604      	mov	r4, r0
    pbuf_free(p);
 8005390:	4630      	mov	r0, r6
 8005392:	f000 ff2f 	bl	80061f4 <pbuf_free>
  p = ipr->p;
 8005396:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005398:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005400 <ip_reass_free_complete_datagram+0xcc>
 800539c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005418 <ip_reass_free_complete_datagram+0xe4>
 80053a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005408 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 80053a4:	b9ae      	cbnz	r6, 80053d2 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 80053a6:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80053a8:	4d19      	ldr	r5, [pc, #100]	; (8005410 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7ff ffa0 	bl	80052f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80053b0:	882b      	ldrh	r3, [r5, #0]
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	d205      	bcs.n	80053c2 <ip_reass_free_complete_datagram+0x8e>
 80053b6:	4b12      	ldr	r3, [pc, #72]	; (8005400 <ip_reass_free_complete_datagram+0xcc>)
 80053b8:	4916      	ldr	r1, [pc, #88]	; (8005414 <ip_reass_free_complete_datagram+0xe0>)
 80053ba:	4813      	ldr	r0, [pc, #76]	; (8005408 <ip_reass_free_complete_datagram+0xd4>)
 80053bc:	22d2      	movs	r2, #210	; 0xd2
 80053be:	f005 fad5 	bl	800a96c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80053c2:	882b      	ldrh	r3, [r5, #0]
 80053c4:	1b1b      	subs	r3, r3, r4
 80053c6:	802b      	strh	r3, [r5, #0]
}
 80053c8:	4620      	mov	r0, r4
 80053ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80053ce:	2400      	movs	r4, #0
 80053d0:	e7e1      	b.n	8005396 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80053d2:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 80053d4:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 80053d6:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80053da:	f001 f8c1 	bl	8006560 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80053de:	4404      	add	r4, r0
 80053e0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80053e4:	db05      	blt.n	80053f2 <ip_reass_free_complete_datagram+0xbe>
 80053e6:	4643      	mov	r3, r8
 80053e8:	22cc      	movs	r2, #204	; 0xcc
 80053ea:	4649      	mov	r1, r9
 80053ec:	4650      	mov	r0, sl
 80053ee:	f005 fabd 	bl	800a96c <iprintf>
    pbuf_free(pcur);
 80053f2:	4630      	mov	r0, r6
    pbufs_freed += clen;
 80053f4:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80053f6:	f000 fefd 	bl	80061f4 <pbuf_free>
    p = iprh->next_pbuf;
 80053fa:	465e      	mov	r6, fp
 80053fc:	e7d2      	b.n	80053a4 <ip_reass_free_complete_datagram+0x70>
 80053fe:	bf00      	nop
 8005400:	0800c4c9 	.word	0x0800c4c9
 8005404:	0800c51b 	.word	0x0800c51b
 8005408:	0800bc05 	.word	0x0800bc05
 800540c:	0800c527 	.word	0x0800c527
 8005410:	200052e0 	.word	0x200052e0
 8005414:	0800c556 	.word	0x0800c556
 8005418:	0800c539 	.word	0x0800c539

0800541c <ip_reass_remove_oldest_datagram>:
{
 800541c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    r = reassdatagrams;
 8005420:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8005490 <ip_reass_remove_oldest_datagram+0x74>
{
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8005428:	2500      	movs	r5, #0
    other_datagrams = 0;
 800542a:	2400      	movs	r4, #0
    r = reassdatagrams;
 800542c:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8005430:	4621      	mov	r1, r4
    prev = NULL;
 8005432:	46a6      	mov	lr, r4
    oldest = NULL;
 8005434:	4620      	mov	r0, r4
    while (r != NULL) {
 8005436:	b953      	cbnz	r3, 800544e <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8005438:	b110      	cbz	r0, 8005440 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800543a:	f7ff ff7b 	bl	8005334 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800543e:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005440:	42bd      	cmp	r5, r7
 8005442:	da01      	bge.n	8005448 <ip_reass_remove_oldest_datagram+0x2c>
 8005444:	2c01      	cmp	r4, #1
 8005446:	dcf0      	bgt.n	800542a <ip_reass_remove_oldest_datagram+0xe>
}
 8005448:	4628      	mov	r0, r5
 800544a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800544e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005452:	695a      	ldr	r2, [r3, #20]
 8005454:	4562      	cmp	r2, ip
 8005456:	d109      	bne.n	800546c <ip_reass_remove_oldest_datagram+0x50>
 8005458:	f8d6 c010 	ldr.w	ip, [r6, #16]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	4562      	cmp	r2, ip
 8005460:	d104      	bne.n	800546c <ip_reass_remove_oldest_datagram+0x50>
 8005462:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005466:	88b2      	ldrh	r2, [r6, #4]
 8005468:	4594      	cmp	ip, r2
 800546a:	d008      	beq.n	800547e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800546c:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800546e:	b160      	cbz	r0, 800548a <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8005470:	7fc2      	ldrb	r2, [r0, #31]
 8005472:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005476:	4594      	cmp	ip, r2
 8005478:	bf9c      	itt	ls
 800547a:	4671      	movls	r1, lr
 800547c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	2a00      	cmp	r2, #0
 8005482:	bf18      	it	ne
 8005484:	469e      	movne	lr, r3
 8005486:	4613      	mov	r3, r2
 8005488:	e7d5      	b.n	8005436 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800548a:	4671      	mov	r1, lr
 800548c:	4618      	mov	r0, r3
 800548e:	e7f6      	b.n	800547e <ip_reass_remove_oldest_datagram+0x62>
 8005490:	200052e4 	.word	0x200052e4

08005494 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8005494:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005496:	4604      	mov	r4, r0
 8005498:	b930      	cbnz	r0, 80054a8 <ip_frag_free_pbuf_custom_ref+0x14>
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <ip_frag_free_pbuf_custom_ref+0x20>)
 800549c:	4906      	ldr	r1, [pc, #24]	; (80054b8 <ip_frag_free_pbuf_custom_ref+0x24>)
 800549e:	4807      	ldr	r0, [pc, #28]	; (80054bc <ip_frag_free_pbuf_custom_ref+0x28>)
 80054a0:	f240 22ae 	movw	r2, #686	; 0x2ae
 80054a4:	f005 fa62 	bl	800a96c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80054a8:	4621      	mov	r1, r4
 80054aa:	2005      	movs	r0, #5
}
 80054ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80054b0:	f000 bd46 	b.w	8005f40 <memp_free>
 80054b4:	0800c4c9 	.word	0x0800c4c9
 80054b8:	0800cbef 	.word	0x0800cbef
 80054bc:	0800bc05 	.word	0x0800bc05

080054c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80054c0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80054c2:	4604      	mov	r4, r0
 80054c4:	b930      	cbnz	r0, 80054d4 <ipfrag_free_pbuf_custom+0x14>
 80054c6:	4b08      	ldr	r3, [pc, #32]	; (80054e8 <ipfrag_free_pbuf_custom+0x28>)
 80054c8:	4908      	ldr	r1, [pc, #32]	; (80054ec <ipfrag_free_pbuf_custom+0x2c>)
 80054ca:	4809      	ldr	r0, [pc, #36]	; (80054f0 <ipfrag_free_pbuf_custom+0x30>)
 80054cc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80054d0:	f005 fa4c 	bl	800a96c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 80054d4:	6960      	ldr	r0, [r4, #20]
 80054d6:	b108      	cbz	r0, 80054dc <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80054d8:	f000 fe8c 	bl	80061f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80054dc:	4620      	mov	r0, r4
}
 80054de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80054e2:	f7ff bfd7 	b.w	8005494 <ip_frag_free_pbuf_custom_ref>
 80054e6:	bf00      	nop
 80054e8:	0800c4c9 	.word	0x0800c4c9
 80054ec:	0800c571 	.word	0x0800c571
 80054f0:	0800bc05 	.word	0x0800bc05

080054f4 <ip_reass_tmr>:
{
 80054f4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80054f6:	4b08      	ldr	r3, [pc, #32]	; (8005518 <ip_reass_tmr+0x24>)
 80054f8:	6818      	ldr	r0, [r3, #0]
  struct ip_reassdata *r, *prev = NULL;
 80054fa:	2400      	movs	r4, #0
  while (r != NULL) {
 80054fc:	b900      	cbnz	r0, 8005500 <ip_reass_tmr+0xc>
}
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8005500:	7fc3      	ldrb	r3, [r0, #31]
 8005502:	6805      	ldr	r5, [r0, #0]
 8005504:	b123      	cbz	r3, 8005510 <ip_reass_tmr+0x1c>
      r->timer--;
 8005506:	3b01      	subs	r3, #1
 8005508:	77c3      	strb	r3, [r0, #31]
 800550a:	4604      	mov	r4, r0
      r = r->next;
 800550c:	4628      	mov	r0, r5
 800550e:	e7f5      	b.n	80054fc <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 8005510:	4621      	mov	r1, r4
 8005512:	f7ff ff0f 	bl	8005334 <ip_reass_free_complete_datagram>
 8005516:	e7f9      	b.n	800550c <ip_reass_tmr+0x18>
 8005518:	200052e4 	.word	0x200052e4

0800551c <ip4_reass>:
{
 800551c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 8005520:	6845      	ldr	r5, [r0, #4]
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8005522:	782b      	ldrb	r3, [r5, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	2b05      	cmp	r3, #5
{
 800552a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800552c:	f040 808c 	bne.w	8005648 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005530:	88e8      	ldrh	r0, [r5, #6]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005532:	4cb4      	ldr	r4, [pc, #720]	; (8005804 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8005534:	f7ff f8b6 	bl	80046a4 <lwip_htons>
 8005538:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800553c:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005540:	8868      	ldrh	r0, [r5, #2]
 8005542:	f7ff f8af 	bl	80046a4 <lwip_htons>
 8005546:	782b      	ldrb	r3, [r5, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 8005550:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8005552:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8005554:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8005556:	f001 f803 	bl	8006560 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800555a:	8823      	ldrh	r3, [r4, #0]
 800555c:	4403      	add	r3, r0
 800555e:	2b0a      	cmp	r3, #10
  clen = pbuf_clen(p);
 8005560:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8005562:	dc68      	bgt.n	8005636 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8005564:	4ea8      	ldr	r6, [pc, #672]	; (8005808 <ip4_reass+0x2ec>)
 8005566:	6834      	ldr	r4, [r6, #0]
 8005568:	2c00      	cmp	r4, #0
 800556a:	d172      	bne.n	8005652 <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800556c:	2004      	movs	r0, #4
 800556e:	f000 fccb 	bl	8005f08 <memp_malloc>
  if (ipr == NULL) {
 8005572:	4604      	mov	r4, r0
 8005574:	b958      	cbnz	r0, 800558e <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8005576:	4651      	mov	r1, sl
 8005578:	4628      	mov	r0, r5
 800557a:	f7ff ff4f 	bl	800541c <ip_reass_remove_oldest_datagram>
 800557e:	4582      	cmp	sl, r0
 8005580:	dc62      	bgt.n	8005648 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8005582:	2004      	movs	r0, #4
 8005584:	f000 fcc0 	bl	8005f08 <memp_malloc>
    if (ipr == NULL)
 8005588:	4604      	mov	r4, r0
 800558a:	2800      	cmp	r0, #0
 800558c:	d05c      	beq.n	8005648 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800558e:	2220      	movs	r2, #32
 8005590:	2100      	movs	r1, #0
 8005592:	4620      	mov	r0, r4
 8005594:	f005 f9e2 	bl	800a95c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8005598:	2303      	movs	r3, #3
 800559a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800559c:	6833      	ldr	r3, [r6, #0]
 800559e:	6023      	str	r3, [r4, #0]
  reassdatagrams = ipr;
 80055a0:	6034      	str	r4, [r6, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80055a2:	462b      	mov	r3, r5
 80055a4:	f104 0208 	add.w	r2, r4, #8
 80055a8:	f105 0114 	add.w	r1, r5, #20
 80055ac:	f853 0b04 	ldr.w	r0, [r3], #4
 80055b0:	f842 0b04 	str.w	r0, [r2], #4
 80055b4:	428b      	cmp	r3, r1
 80055b6:	d1f9      	bne.n	80055ac <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80055b8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 80055bc:	f01b 0b20 	ands.w	fp, fp, #32
 80055c0:	d108      	bne.n	80055d4 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80055c2:	9b01      	ldr	r3, [sp, #4]
 80055c4:	444b      	add	r3, r9
 80055c6:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80055c8:	4599      	cmp	r9, r3
 80055ca:	d83d      	bhi.n	8005648 <ip4_reass+0x12c>
 80055cc:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d839      	bhi.n	8005648 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 80055d4:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80055d6:	8868      	ldrh	r0, [r5, #2]
 80055d8:	f7ff f864 	bl	80046a4 <lwip_htons>
 80055dc:	f895 8000 	ldrb.w	r8, [r5]
 80055e0:	f008 080f 	and.w	r8, r8, #15
 80055e4:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80055e8:	88e8      	ldrh	r0, [r5, #6]
 80055ea:	f7ff f85b 	bl	80046a4 <lwip_htons>
 80055ee:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80055f2:	fa1f f888 	uxth.w	r8, r8
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80055f6:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 80055f8:	687e      	ldr	r6, [r7, #4]
  for (q = ipr->p; q != NULL;) {
 80055fa:	f8d4 e004 	ldr.w	lr, [r4, #4]
  iprh->start = offset;
 80055fe:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8005600:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8005604:	2500      	movs	r5, #0
  iprh->end = offset + len;
 8005606:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8005608:	7035      	strb	r5, [r6, #0]
 800560a:	7075      	strb	r5, [r6, #1]
 800560c:	70b5      	strb	r5, [r6, #2]
 800560e:	70f5      	strb	r5, [r6, #3]
  iprh->end = offset + len;
 8005610:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8005612:	4672      	mov	r2, lr
  int valid = 1;
 8005614:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8005618:	bb52      	cbnz	r2, 8005670 <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 800561a:	2d00      	cmp	r5, #0
 800561c:	f040 8092 	bne.w	8005744 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8005620:	f1be 0f00 	cmp.w	lr, #0
 8005624:	d07d      	beq.n	8005722 <ip4_reass+0x206>
 8005626:	4b79      	ldr	r3, [pc, #484]	; (800580c <ip4_reass+0x2f0>)
 8005628:	4979      	ldr	r1, [pc, #484]	; (8005810 <ip4_reass+0x2f4>)
 800562a:	487a      	ldr	r0, [pc, #488]	; (8005814 <ip4_reass+0x2f8>)
 800562c:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8005630:	f005 f99c 	bl	800a96c <iprintf>
 8005634:	e075      	b.n	8005722 <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005636:	4601      	mov	r1, r0
 8005638:	4628      	mov	r0, r5
 800563a:	f7ff feef 	bl	800541c <ip_reass_remove_oldest_datagram>
 800563e:	b118      	cbz	r0, 8005648 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8005640:	8823      	ldrh	r3, [r4, #0]
 8005642:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8005644:	2b0a      	cmp	r3, #10
 8005646:	dd8d      	ble.n	8005564 <ip4_reass+0x48>
  pbuf_free(p);
 8005648:	4638      	mov	r0, r7
 800564a:	f000 fdd3 	bl	80061f4 <pbuf_free>
  return NULL;
 800564e:	2500      	movs	r5, #0
 8005650:	e0d4      	b.n	80057fc <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8005652:	68eb      	ldr	r3, [r5, #12]
 8005654:	6962      	ldr	r2, [r4, #20]
 8005656:	429a      	cmp	r2, r3
 8005658:	d108      	bne.n	800566c <ip4_reass+0x150>
 800565a:	692b      	ldr	r3, [r5, #16]
 800565c:	69a2      	ldr	r2, [r4, #24]
 800565e:	429a      	cmp	r2, r3
 8005660:	d104      	bne.n	800566c <ip4_reass+0x150>
 8005662:	89a2      	ldrh	r2, [r4, #12]
 8005664:	88ab      	ldrh	r3, [r5, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	f000 80dc 	beq.w	8005824 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800566c:	6824      	ldr	r4, [r4, #0]
 800566e:	e77b      	b.n	8005568 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8005670:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8005674:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8005678:	4288      	cmp	r0, r1
 800567a:	d254      	bcs.n	8005726 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 800567c:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800567e:	2d00      	cmp	r5, #0
 8005680:	d04d      	beq.n	800571e <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8005682:	88ea      	ldrh	r2, [r5, #6]
 8005684:	4290      	cmp	r0, r2
 8005686:	f0c0 8091 	bcc.w	80057ac <ip4_reass+0x290>
 800568a:	428b      	cmp	r3, r1
 800568c:	f200 808e 	bhi.w	80057ac <ip4_reass+0x290>
        iprh_prev->next_pbuf = new_p;
 8005690:	602f      	str	r7, [r5, #0]
        if (iprh_prev->end != iprh->start) {
 8005692:	4290      	cmp	r0, r2
      if (iprh_prev->end != iprh->start) {
 8005694:	f040 80e4 	bne.w	8005860 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005698:	f1bb 0f00 	cmp.w	fp, #0
 800569c:	d004      	beq.n	80056a8 <ip4_reass+0x18c>
 800569e:	7fa3      	ldrb	r3, [r4, #30]
 80056a0:	f013 0301 	ands.w	r3, r3, #1
 80056a4:	f000 80da 	beq.w	800585c <ip4_reass+0x340>
    if (valid) {
 80056a8:	f1b8 0f00 	cmp.w	r8, #0
 80056ac:	d159      	bne.n	8005762 <ip4_reass+0x246>
          q = iprh->next_pbuf;
 80056ae:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80056b2:	4e54      	ldr	r6, [pc, #336]	; (8005804 <ip4_reass+0x2e8>)
 80056b4:	8833      	ldrh	r3, [r6, #0]
 80056b6:	449a      	add	sl, r3
 80056b8:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 80056bc:	f1bb 0f00 	cmp.w	fp, #0
 80056c0:	d107      	bne.n	80056d2 <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 80056c2:	9b01      	ldr	r3, [sp, #4]
 80056c4:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80056c6:	7fa3      	ldrb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80056c8:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80056d2:	f1b8 0f01 	cmp.w	r8, #1
 80056d6:	d1ba      	bne.n	800564e <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 80056d8:	8ba3      	ldrh	r3, [r4, #28]
 80056da:	3314      	adds	r3, #20
 80056dc:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80056de:	6863      	ldr	r3, [r4, #4]
 80056e0:	685d      	ldr	r5, [r3, #4]
 80056e2:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80056e4:	f104 0308 	add.w	r3, r4, #8
 80056e8:	462a      	mov	r2, r5
 80056ea:	f104 011c 	add.w	r1, r4, #28
 80056ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80056f2:	f842 0b04 	str.w	r0, [r2], #4
 80056f6:	428b      	cmp	r3, r1
 80056f8:	d1f9      	bne.n	80056ee <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80056fa:	8ba0      	ldrh	r0, [r4, #28]
 80056fc:	f7fe ffd2 	bl	80046a4 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8005700:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8005702:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8005704:	71ab      	strb	r3, [r5, #6]
 8005706:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8005708:	72ab      	strb	r3, [r5, #10]
 800570a:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800570c:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800570e:	2f00      	cmp	r7, #0
 8005710:	d157      	bne.n	80057c2 <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 8005712:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <ip4_reass+0x2ec>)
 8005714:	6819      	ldr	r1, [r3, #0]
 8005716:	428c      	cmp	r4, r1
 8005718:	d165      	bne.n	80057e6 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 800571a:	4639      	mov	r1, r7
 800571c:	e065      	b.n	80057ea <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800571e:	428b      	cmp	r3, r1
 8005720:	d844      	bhi.n	80057ac <ip4_reass+0x290>
      ipr->p = new_p;
 8005722:	6067      	str	r7, [r4, #4]
 8005724:	e7b8      	b.n	8005698 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8005726:	d041      	beq.n	80057ac <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8005728:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800572c:	4282      	cmp	r2, r0
 800572e:	d83d      	bhi.n	80057ac <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 8005730:	b125      	cbz	r5, 800573c <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 8005732:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8005734:	428a      	cmp	r2, r1
 8005736:	bf18      	it	ne
 8005738:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 800573c:	f8dc 2000 	ldr.w	r2, [ip]
 8005740:	4665      	mov	r5, ip
 8005742:	e769      	b.n	8005618 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8005744:	88eb      	ldrh	r3, [r5, #6]
 8005746:	4283      	cmp	r3, r0
 8005748:	d906      	bls.n	8005758 <ip4_reass+0x23c>
 800574a:	4b30      	ldr	r3, [pc, #192]	; (800580c <ip4_reass+0x2f0>)
 800574c:	4932      	ldr	r1, [pc, #200]	; (8005818 <ip4_reass+0x2fc>)
 800574e:	4831      	ldr	r0, [pc, #196]	; (8005814 <ip4_reass+0x2f8>)
 8005750:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005754:	f005 f90a 	bl	800a96c <iprintf>
      iprh_prev->next_pbuf = new_p;
 8005758:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800575a:	88ea      	ldrh	r2, [r5, #6]
 800575c:	88b3      	ldrh	r3, [r6, #4]
 800575e:	429a      	cmp	r2, r3
 8005760:	e798      	b.n	8005694 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8005762:	6863      	ldr	r3, [r4, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0a2      	beq.n	80056ae <ip4_reass+0x192>
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	888b      	ldrh	r3, [r1, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d19e      	bne.n	80056ae <ip4_reass+0x192>
        q = iprh->next_pbuf;
 8005770:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 8005772:	b99b      	cbnz	r3, 800579c <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8005774:	42b1      	cmp	r1, r6
 8005776:	d106      	bne.n	8005786 <ip4_reass+0x26a>
 8005778:	4b24      	ldr	r3, [pc, #144]	; (800580c <ip4_reass+0x2f0>)
 800577a:	4928      	ldr	r1, [pc, #160]	; (800581c <ip4_reass+0x300>)
 800577c:	4825      	ldr	r0, [pc, #148]	; (8005814 <ip4_reass+0x2f8>)
 800577e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8005782:	f005 f8f3 	bl	800a96c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8005786:	6833      	ldr	r3, [r6, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d092      	beq.n	80056b2 <ip4_reass+0x196>
 800578c:	4b1f      	ldr	r3, [pc, #124]	; (800580c <ip4_reass+0x2f0>)
 800578e:	4924      	ldr	r1, [pc, #144]	; (8005820 <ip4_reass+0x304>)
 8005790:	4820      	ldr	r0, [pc, #128]	; (8005814 <ip4_reass+0x2f8>)
 8005792:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8005796:	f005 f8e9 	bl	800a96c <iprintf>
 800579a:	e78a      	b.n	80056b2 <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 800579c:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800579e:	88f0      	ldrh	r0, [r6, #6]
 80057a0:	8893      	ldrh	r3, [r2, #4]
 80057a2:	4298      	cmp	r0, r3
 80057a4:	d183      	bne.n	80056ae <ip4_reass+0x192>
          q = iprh->next_pbuf;
 80057a6:	6813      	ldr	r3, [r2, #0]
 80057a8:	4616      	mov	r6, r2
 80057aa:	e7e2      	b.n	8005772 <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80057ac:	4638      	mov	r0, r7
 80057ae:	f000 fed7 	bl	8006560 <pbuf_clen>
 80057b2:	4a14      	ldr	r2, [pc, #80]	; (8005804 <ip4_reass+0x2e8>)
 80057b4:	8813      	ldrh	r3, [r2, #0]
 80057b6:	1a18      	subs	r0, r3, r0
 80057b8:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80057ba:	4638      	mov	r0, r7
 80057bc:	f000 fd1a 	bl	80061f4 <pbuf_free>
 80057c0:	e742      	b.n	8005648 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 80057c2:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 80057c6:	f06f 0113 	mvn.w	r1, #19
 80057ca:	4638      	mov	r0, r7
 80057cc:	f000 fd0c 	bl	80061e8 <pbuf_header>
      pbuf_cat(p, r);
 80057d0:	4639      	mov	r1, r7
 80057d2:	4628      	mov	r0, r5
 80057d4:	f000 fee8 	bl	80065a8 <pbuf_cat>
      r = iprh->next_pbuf;
 80057d8:	f8d8 7000 	ldr.w	r7, [r8]
 80057dc:	e797      	b.n	800570e <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 80057de:	680b      	ldr	r3, [r1, #0]
 80057e0:	429c      	cmp	r4, r3
 80057e2:	d002      	beq.n	80057ea <ip4_reass+0x2ce>
 80057e4:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80057e6:	2900      	cmp	r1, #0
 80057e8:	d1f9      	bne.n	80057de <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff fd80 	bl	80052f0 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 feb5 	bl	8006560 <pbuf_clen>
 80057f6:	8833      	ldrh	r3, [r6, #0]
 80057f8:	1a18      	subs	r0, r3, r0
 80057fa:	8030      	strh	r0, [r6, #0]
}
 80057fc:	4628      	mov	r0, r5
 80057fe:	b003      	add	sp, #12
 8005800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005804:	200052e0 	.word	0x200052e0
 8005808:	200052e4 	.word	0x200052e4
 800580c:	0800c4c9 	.word	0x0800c4c9
 8005810:	0800c463 	.word	0x0800c463
 8005814:	0800bc05 	.word	0x0800bc05
 8005818:	0800c445 	.word	0x0800c445
 800581c:	0800c49a 	.word	0x0800c49a
 8005820:	0800c4a7 	.word	0x0800c4a7
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8005824:	88e8      	ldrh	r0, [r5, #6]
 8005826:	f7fe ff3d 	bl	80046a4 <lwip_htons>
 800582a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800582e:	2800      	cmp	r0, #0
 8005830:	f47f aec2 	bne.w	80055b8 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8005834:	89e0      	ldrh	r0, [r4, #14]
 8005836:	f7fe ff35 	bl	80046a4 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800583a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800583e:	2800      	cmp	r0, #0
 8005840:	f43f aeba 	beq.w	80055b8 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8005844:	462b      	mov	r3, r5
 8005846:	f104 0208 	add.w	r2, r4, #8
 800584a:	f105 0114 	add.w	r1, r5, #20
 800584e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005852:	f842 0b04 	str.w	r0, [r2], #4
 8005856:	428b      	cmp	r3, r1
 8005858:	d1f9      	bne.n	800584e <ip4_reass+0x332>
 800585a:	e6ad      	b.n	80055b8 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800585c:	4698      	mov	r8, r3
 800585e:	e728      	b.n	80056b2 <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8005860:	f1bb 0f00 	cmp.w	fp, #0
 8005864:	f43f af23 	beq.w	80056ae <ip4_reass+0x192>
 8005868:	f04f 0800 	mov.w	r8, #0
 800586c:	e717      	b.n	800569e <ip4_reass+0x182>
 800586e:	bf00      	nop

08005870 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8005874:	f8b1 8022 	ldrh.w	r8, [r1, #34]	; 0x22
{
 8005878:	b08b      	sub	sp, #44	; 0x2c
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800587a:	2308      	movs	r3, #8
 800587c:	f1a8 0814 	sub.w	r8, r8, #20
 8005880:	fb98 f8f3 	sdiv	r8, r8, r3
 8005884:	fa1f f388 	uxth.w	r3, r8
 8005888:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800588a:	6843      	ldr	r3, [r0, #4]
{
 800588c:	9208      	str	r2, [sp, #32]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800588e:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8005890:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8005892:	f006 060f 	and.w	r6, r6, #15
 8005896:	00b6      	lsls	r6, r6, #2
 8005898:	2e14      	cmp	r6, #20
{
 800589a:	4607      	mov	r7, r0
 800589c:	468b      	mov	fp, r1
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800589e:	d00b      	beq.n	80058b8 <ip4_frag+0x48>
 80058a0:	4b5a      	ldr	r3, [pc, #360]	; (8005a0c <ip4_frag+0x19c>)
 80058a2:	495b      	ldr	r1, [pc, #364]	; (8005a10 <ip4_frag+0x1a0>)
 80058a4:	f240 22e1 	movw	r2, #737	; 0x2e1

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80058a8:	485a      	ldr	r0, [pc, #360]	; (8005a14 <ip4_frag+0x1a4>)
 80058aa:	f005 f85f 	bl	800a96c <iprintf>
 80058ae:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80058b2:	b00b      	add	sp, #44	; 0x2c
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80058b8:	9b02      	ldr	r3, [sp, #8]
 80058ba:	88d8      	ldrh	r0, [r3, #6]
 80058bc:	f7fe fef2 	bl	80046a4 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80058c0:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80058c4:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 80058c8:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80058ca:	d004      	beq.n	80058d6 <ip4_frag+0x66>
 80058cc:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <ip4_frag+0x19c>)
 80058ce:	4952      	ldr	r1, [pc, #328]	; (8005a18 <ip4_frag+0x1a8>)
 80058d0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80058d4:	e7e8      	b.n	80058a8 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 80058d6:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 80058d8:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 80058dc:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 80058de:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 80058e2:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 80058e4:	9307      	str	r3, [sp, #28]
  while (left) {
 80058e6:	b90d      	cbnz	r5, 80058ec <ip4_frag+0x7c>
  return ERR_OK;
 80058e8:	4628      	mov	r0, r5
 80058ea:	e7e2      	b.n	80058b2 <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 80058ec:	9b07      	ldr	r3, [sp, #28]
 80058ee:	42ab      	cmp	r3, r5
 80058f0:	bfa8      	it	ge
 80058f2:	462b      	movge	r3, r5
 80058f4:	b29b      	uxth	r3, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80058f6:	2200      	movs	r2, #0
 80058f8:	2114      	movs	r1, #20
 80058fa:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 80058fc:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80058fe:	f000 fce3 	bl	80062c8 <pbuf_alloc>
    if (rambuf == NULL) {
 8005902:	4680      	mov	r8, r0
 8005904:	b370      	cbz	r0, 8005964 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8005906:	897b      	ldrh	r3, [r7, #10]
 8005908:	2b13      	cmp	r3, #19
 800590a:	d806      	bhi.n	800591a <ip4_frag+0xaa>
 800590c:	4b3f      	ldr	r3, [pc, #252]	; (8005a0c <ip4_frag+0x19c>)
 800590e:	4943      	ldr	r1, [pc, #268]	; (8005a1c <ip4_frag+0x1ac>)
 8005910:	4840      	ldr	r0, [pc, #256]	; (8005a14 <ip4_frag+0x1a4>)
 8005912:	f240 3209 	movw	r2, #777	; 0x309
 8005916:	f005 f829 	bl	800a96c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800591a:	9b02      	ldr	r3, [sp, #8]
 800591c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005920:	4619      	mov	r1, r3
 8005922:	3114      	adds	r1, #20
 8005924:	f853 0b04 	ldr.w	r0, [r3], #4
 8005928:	f842 0b04 	str.w	r0, [r2], #4
 800592c:	428b      	cmp	r3, r1
 800592e:	d1f9      	bne.n	8005924 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005930:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8005934:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8005938:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 800593a:	f1b9 0f00 	cmp.w	r9, #0
 800593e:	d037      	beq.n	80059b0 <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 8005940:	897c      	ldrh	r4, [r7, #10]
 8005942:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8005944:	b2a4      	uxth	r4, r4
 8005946:	454c      	cmp	r4, r9
 8005948:	bf28      	it	cs
 800594a:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800594c:	b914      	cbnz	r4, 8005954 <ip4_frag+0xe4>
        p = p->next;
 800594e:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 8005950:	2600      	movs	r6, #0
 8005952:	e7f2      	b.n	800593a <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8005954:	2005      	movs	r0, #5
 8005956:	f000 fad7 	bl	8005f08 <memp_malloc>
      if (pcr == NULL) {
 800595a:	4682      	mov	sl, r0
 800595c:	b928      	cbnz	r0, 800596a <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800595e:	4640      	mov	r0, r8
 8005960:	f000 fc48 	bl	80061f4 <pbuf_free>
  return ERR_MEM;
 8005964:	f04f 30ff 	mov.w	r0, #4294967295
 8005968:	e7a3      	b.n	80058b2 <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800596a:	9401      	str	r4, [sp, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4433      	add	r3, r6
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2202      	movs	r2, #2
 8005974:	4603      	mov	r3, r0
 8005976:	4621      	mov	r1, r4
 8005978:	2004      	movs	r0, #4
 800597a:	f000 fbfd 	bl	8006178 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800597e:	b918      	cbnz	r0, 8005988 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 8005980:	4650      	mov	r0, sl
 8005982:	f7ff fd87 	bl	8005494 <ip_frag_free_pbuf_custom_ref>
 8005986:	e7ea      	b.n	800595e <ip4_frag+0xee>
 8005988:	9009      	str	r0, [sp, #36]	; 0x24
      pbuf_ref(p);
 800598a:	4638      	mov	r0, r7
 800598c:	f000 fdf0 	bl	8006570 <pbuf_ref>
      left_to_copy -= newpbuflen;
 8005990:	eba9 0904 	sub.w	r9, r9, r4
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <ip4_frag+0x1b0>)
      pcr->original = p;
 8005996:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800599a:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800599e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059a0:	4640      	mov	r0, r8
      left_to_copy -= newpbuflen;
 80059a2:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80059a6:	f000 fdff 	bl	80065a8 <pbuf_cat>
      if (left_to_copy) {
 80059aa:	f1b9 0f00 	cmp.w	r9, #0
 80059ae:	d1ce      	bne.n	800594e <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 80059b0:	9b04      	ldr	r3, [sp, #16]
 80059b2:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80059b6:	f8bb 3022 	ldrh.w	r3, [fp, #34]	; 0x22
 80059ba:	3b13      	subs	r3, #19
    if (!last) {
 80059bc:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 80059be:	bfa8      	it	ge
 80059c0:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80059c4:	f7fe fe6e 	bl	80046a4 <lwip_htons>
 80059c8:	9b03      	ldr	r3, [sp, #12]
 80059ca:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80059cc:	9b05      	ldr	r3, [sp, #20]
 80059ce:	f103 0014 	add.w	r0, r3, #20
 80059d2:	b280      	uxth	r0, r0
 80059d4:	f7fe fe66 	bl	80046a4 <lwip_htons>
 80059d8:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80059da:	9a03      	ldr	r2, [sp, #12]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80059dc:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80059de:	2300      	movs	r3, #0
 80059e0:	7293      	strb	r3, [r2, #10]
 80059e2:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 80059e4:	4641      	mov	r1, r8
 80059e6:	f8db 3014 	ldr.w	r3, [fp, #20]
 80059ea:	9a08      	ldr	r2, [sp, #32]
 80059ec:	4658      	mov	r0, fp
 80059ee:	4798      	blx	r3
    pbuf_free(rambuf);
 80059f0:	4640      	mov	r0, r8
 80059f2:	f000 fbff 	bl	80061f4 <pbuf_free>
    left -= fragsize;
 80059f6:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 80059f8:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 80059fa:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 80059fc:	9b04      	ldr	r3, [sp, #16]
 80059fe:	4413      	add	r3, r2
    poff += newpbuflen;
 8005a00:	4426      	add	r6, r4
    ofo += nfb;
 8005a02:	b29b      	uxth	r3, r3
    poff += newpbuflen;
 8005a04:	b2b6      	uxth	r6, r6
    left -= fragsize;
 8005a06:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	e76c      	b.n	80058e6 <ip4_frag+0x76>
 8005a0c:	0800c4c9 	.word	0x0800c4c9
 8005a10:	0800c3e4 	.word	0x0800c3e4
 8005a14:	0800bc05 	.word	0x0800bc05
 8005a18:	0800c40b 	.word	0x0800c40b
 8005a1c:	0800c425 	.word	0x0800c425
 8005a20:	080054c1 	.word	0x080054c1

08005a24 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a24:	4b11      	ldr	r3, [pc, #68]	; (8005a6c <mem_init+0x48>)
 8005a26:	4a12      	ldr	r2, [pc, #72]	; (8005a70 <mem_init+0x4c>)
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005a28:	4812      	ldr	r0, [pc, #72]	; (8005a74 <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a2a:	f023 0303 	bic.w	r3, r3, #3
{
 8005a2e:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8005a30:	f44f 5120 	mov.w	r1, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005a34:	6013      	str	r3, [r2, #0]
  mem->prev = 0;
 8005a36:	2200      	movs	r2, #0
 8005a38:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005a3a:	711a      	strb	r2, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8005a3c:	185a      	adds	r2, r3, r1
 8005a3e:	6002      	str	r2, [r0, #0]
  ram_end->used = 1;
 8005a40:	2001      	movs	r0, #1
  mem->next = MEM_SIZE_ALIGNED;
 8005a42:	8019      	strh	r1, [r3, #0]
  ram_end->used = 1;
 8005a44:	7110      	strb	r0, [r2, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005a46:	8011      	strh	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005a48:	8051      	strh	r1, [r2, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005a4a:	4a0b      	ldr	r2, [pc, #44]	; (8005a78 <mem_init+0x54>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8005a4c:	480b      	ldr	r0, [pc, #44]	; (8005a7c <mem_init+0x58>)
  lfree = (struct mem *)(void *)ram;
 8005a4e:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8005a50:	f004 f828 	bl	8009aa4 <sys_mutex_new>
 8005a54:	b140      	cbz	r0, 8005a68 <mem_init+0x44>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8005a56:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <mem_init+0x5c>)
 8005a58:	490a      	ldr	r1, [pc, #40]	; (8005a84 <mem_init+0x60>)
 8005a5a:	480b      	ldr	r0, [pc, #44]	; (8005a88 <mem_init+0x64>)
 8005a5c:	f44f 72cc 	mov.w	r2, #408	; 0x198
  }
}
 8005a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8005a64:	f004 bf82 	b.w	800a96c <iprintf>
 8005a68:	bd10      	pop	{r4, pc}
 8005a6a:	bf00      	nop
 8005a6c:	20005607 	.word	0x20005607
 8005a70:	200052f0 	.word	0x200052f0
 8005a74:	200052f4 	.word	0x200052f4
 8005a78:	200052e8 	.word	0x200052e8
 8005a7c:	200052ec 	.word	0x200052ec
 8005a80:	0800c63f 	.word	0x0800c63f
 8005a84:	0800c66e 	.word	0x0800c66e
 8005a88:	0800bc05 	.word	0x0800bc05

08005a8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005a90:	4604      	mov	r4, r0
 8005a92:	2800      	cmp	r0, #0
 8005a94:	f000 8096 	beq.w	8005bc4 <mem_free+0x138>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8005a98:	0783      	lsls	r3, r0, #30
 8005a9a:	d006      	beq.n	8005aaa <mem_free+0x1e>
 8005a9c:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <mem_free+0x13c>)
 8005a9e:	494b      	ldr	r1, [pc, #300]	; (8005bcc <mem_free+0x140>)
 8005aa0:	484b      	ldr	r0, [pc, #300]	; (8005bd0 <mem_free+0x144>)
 8005aa2:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8005aa6:	f004 ff61 	bl	800a96c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005aaa:	4f4a      	ldr	r7, [pc, #296]	; (8005bd4 <mem_free+0x148>)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	429c      	cmp	r4, r3
 8005ab0:	d303      	bcc.n	8005aba <mem_free+0x2e>
 8005ab2:	4b49      	ldr	r3, [pc, #292]	; (8005bd8 <mem_free+0x14c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	429c      	cmp	r4, r3
 8005ab8:	d306      	bcc.n	8005ac8 <mem_free+0x3c>
 8005aba:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <mem_free+0x13c>)
 8005abc:	4947      	ldr	r1, [pc, #284]	; (8005bdc <mem_free+0x150>)
 8005abe:	4844      	ldr	r0, [pc, #272]	; (8005bd0 <mem_free+0x144>)
 8005ac0:	f240 12af 	movw	r2, #431	; 0x1af
 8005ac4:	f004 ff52 	bl	800a96c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d304      	bcc.n	8005ad8 <mem_free+0x4c>
 8005ace:	4b42      	ldr	r3, [pc, #264]	; (8005bd8 <mem_free+0x14c>)
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	4294      	cmp	r4, r2
 8005ad4:	4698      	mov	r8, r3
 8005ad6:	d305      	bcc.n	8005ae4 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8005ad8:	f004 f812 	bl	8009b00 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8005ae0:	f004 b81a 	b.w	8009b18 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8005ae4:	483e      	ldr	r0, [pc, #248]	; (8005be0 <mem_free+0x154>)
 8005ae6:	f003 ffec 	bl	8009ac2 <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005aea:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005aee:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8005af2:	b933      	cbnz	r3, 8005b02 <mem_free+0x76>
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <mem_free+0x13c>)
 8005af6:	493b      	ldr	r1, [pc, #236]	; (8005be4 <mem_free+0x158>)
 8005af8:	4835      	ldr	r0, [pc, #212]	; (8005bd0 <mem_free+0x144>)
 8005afa:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8005afe:	f004 ff35 	bl	800a96c <iprintf>
  if (mem < lfree) {
 8005b02:	4e39      	ldr	r6, [pc, #228]	; (8005be8 <mem_free+0x15c>)
  mem->used = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8005b0a:	6833      	ldr	r3, [r6, #0]
 8005b0c:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b0e:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8005b10:	bf38      	it	cc
 8005b12:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005b14:	429d      	cmp	r5, r3
 8005b16:	d206      	bcs.n	8005b26 <mem_free+0x9a>
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <mem_free+0x13c>)
 8005b1a:	4934      	ldr	r1, [pc, #208]	; (8005bec <mem_free+0x160>)
 8005b1c:	482c      	ldr	r0, [pc, #176]	; (8005bd0 <mem_free+0x144>)
 8005b1e:	f240 125d 	movw	r2, #349	; 0x15d
 8005b22:	f004 ff23 	bl	800a96c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005b26:	f8d8 3000 	ldr.w	r3, [r8]
 8005b2a:	429d      	cmp	r5, r3
 8005b2c:	d306      	bcc.n	8005b3c <mem_free+0xb0>
 8005b2e:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <mem_free+0x13c>)
 8005b30:	492f      	ldr	r1, [pc, #188]	; (8005bf0 <mem_free+0x164>)
 8005b32:	4827      	ldr	r0, [pc, #156]	; (8005bd0 <mem_free+0x144>)
 8005b34:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005b38:	f004 ff18 	bl	800a96c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005b3c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005b40:	b133      	cbz	r3, 8005b50 <mem_free+0xc4>
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <mem_free+0x13c>)
 8005b44:	492b      	ldr	r1, [pc, #172]	; (8005bf4 <mem_free+0x168>)
 8005b46:	4822      	ldr	r0, [pc, #136]	; (8005bd0 <mem_free+0x144>)
 8005b48:	f240 125f 	movw	r2, #351	; 0x15f
 8005b4c:	f004 ff0e 	bl	800a96c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005b50:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8005b54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005b58:	d906      	bls.n	8005b68 <mem_free+0xdc>
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <mem_free+0x13c>)
 8005b5c:	4926      	ldr	r1, [pc, #152]	; (8005bf8 <mem_free+0x16c>)
 8005b5e:	481c      	ldr	r0, [pc, #112]	; (8005bd0 <mem_free+0x144>)
 8005b60:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005b64:	f004 ff02 	bl	800a96c <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005b6e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005b70:	4295      	cmp	r5, r2
 8005b72:	d010      	beq.n	8005b96 <mem_free+0x10a>
 8005b74:	7910      	ldrb	r0, [r2, #4]
 8005b76:	b970      	cbnz	r0, 8005b96 <mem_free+0x10a>
 8005b78:	f8d8 0000 	ldr.w	r0, [r8]
 8005b7c:	4282      	cmp	r2, r0
 8005b7e:	d00a      	beq.n	8005b96 <mem_free+0x10a>
    if (lfree == nmem) {
 8005b80:	6830      	ldr	r0, [r6, #0]
 8005b82:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8005b84:	5a5a      	ldrh	r2, [r3, r1]
 8005b86:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005b8a:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8005b8c:	bf08      	it	eq
 8005b8e:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8005b90:	441a      	add	r2, r3
 8005b92:	1ae9      	subs	r1, r5, r3
 8005b94:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8005b96:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8005b9a:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8005b9c:	428d      	cmp	r5, r1
 8005b9e:	d00c      	beq.n	8005bba <mem_free+0x12e>
 8005ba0:	7908      	ldrb	r0, [r1, #4]
 8005ba2:	b950      	cbnz	r0, 8005bba <mem_free+0x12e>
    if (lfree == mem) {
 8005ba4:	6830      	ldr	r0, [r6, #0]
 8005ba6:	4285      	cmp	r5, r0
      lfree = pmem;
 8005ba8:	bf08      	it	eq
 8005baa:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8005bac:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005bb0:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8005bb2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005bb6:	440b      	add	r3, r1
 8005bb8:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8005bba:	4809      	ldr	r0, [pc, #36]	; (8005be0 <mem_free+0x154>)
}
 8005bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8005bc0:	f003 bf84 	b.w	8009acc <sys_mutex_unlock>
 8005bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc8:	0800c63f 	.word	0x0800c63f
 8005bcc:	0800c57d 	.word	0x0800c57d
 8005bd0:	0800bc05 	.word	0x0800bc05
 8005bd4:	200052f0 	.word	0x200052f0
 8005bd8:	200052f4 	.word	0x200052f4
 8005bdc:	0800c59e 	.word	0x0800c59e
 8005be0:	200052ec 	.word	0x200052ec
 8005be4:	0800c5b5 	.word	0x0800c5b5
 8005be8:	200052e8 	.word	0x200052e8
 8005bec:	0800c5c9 	.word	0x0800c5c9
 8005bf0:	0800c5e0 	.word	0x0800c5e0
 8005bf4:	0800c5fa 	.word	0x0800c5fa
 8005bf8:	0800c615 	.word	0x0800c615

08005bfc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8005bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8005c00:	3103      	adds	r1, #3
 8005c02:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005c06:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8005c08:	2d0b      	cmp	r5, #11
{
 8005c0a:	4604      	mov	r4, r0
  if (newsize < MIN_SIZE_ALIGNED) {
 8005c0c:	d904      	bls.n	8005c18 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8005c0e:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8005c12:	d902      	bls.n	8005c1a <mem_trim+0x1e>
    return NULL;
 8005c14:	2400      	movs	r4, #0
 8005c16:	e01c      	b.n	8005c52 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8005c18:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <mem_trim+0xf8>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	42a2      	cmp	r2, r4
 8005c20:	4698      	mov	r8, r3
 8005c22:	d803      	bhi.n	8005c2c <mem_trim+0x30>
 8005c24:	4b34      	ldr	r3, [pc, #208]	; (8005cf8 <mem_trim+0xfc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	429c      	cmp	r4, r3
 8005c2a:	d306      	bcc.n	8005c3a <mem_trim+0x3e>
 8005c2c:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <mem_trim+0x100>)
 8005c2e:	4934      	ldr	r1, [pc, #208]	; (8005d00 <mem_trim+0x104>)
 8005c30:	4834      	ldr	r0, [pc, #208]	; (8005d04 <mem_trim+0x108>)
 8005c32:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005c36:	f004 fe99 	bl	800a96c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c3e:	429c      	cmp	r4, r3
 8005c40:	d303      	bcc.n	8005c4a <mem_trim+0x4e>
 8005c42:	4a2d      	ldr	r2, [pc, #180]	; (8005cf8 <mem_trim+0xfc>)
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	4294      	cmp	r4, r2
 8005c48:	d306      	bcc.n	8005c58 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8005c4a:	f003 ff59 	bl	8009b00 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8005c4e:	f003 ff63 	bl	8009b18 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8005c52:	4620      	mov	r0, r4
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8005c58:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005c5c:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8005c60:	1af6      	subs	r6, r6, r3
 8005c62:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8005c64:	3f08      	subs	r7, #8
 8005c66:	1bbf      	subs	r7, r7, r6
 8005c68:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005c6a:	42af      	cmp	r7, r5
 8005c6c:	d219      	bcs.n	8005ca2 <mem_trim+0xa6>
 8005c6e:	4b23      	ldr	r3, [pc, #140]	; (8005cfc <mem_trim+0x100>)
 8005c70:	4925      	ldr	r1, [pc, #148]	; (8005d08 <mem_trim+0x10c>)
 8005c72:	4824      	ldr	r0, [pc, #144]	; (8005d04 <mem_trim+0x108>)
 8005c74:	f240 2206 	movw	r2, #518	; 0x206
 8005c78:	f004 fe78 	bl	800a96c <iprintf>
 8005c7c:	e7ca      	b.n	8005c14 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005c7e:	f105 0214 	add.w	r2, r5, #20
 8005c82:	42ba      	cmp	r2, r7
 8005c84:	d831      	bhi.n	8005cea <mem_trim+0xee>
    if (mem2 < lfree) {
 8005c86:	4821      	ldr	r0, [pc, #132]	; (8005d0c <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005c88:	f106 0208 	add.w	r2, r6, #8
 8005c8c:	4415      	add	r5, r2
    if (mem2 < lfree) {
 8005c8e:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005c90:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8005c92:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8005c94:	42ba      	cmp	r2, r7
      lfree = mem2;
 8005c96:	bf38      	it	cc
 8005c98:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8005c9e:	5359      	strh	r1, [r3, r5]
 8005ca0:	e01a      	b.n	8005cd8 <mem_trim+0xdc>
  if (newsize == size) {
 8005ca2:	d0d6      	beq.n	8005c52 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 8005ca4:	481a      	ldr	r0, [pc, #104]	; (8005d10 <mem_trim+0x114>)
 8005ca6:	f003 ff0c 	bl	8009ac2 <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8005caa:	f8d8 3000 	ldr.w	r3, [r8]
 8005cae:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8005cb2:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8005cb4:	7902      	ldrb	r2, [r0, #4]
 8005cb6:	2a00      	cmp	r2, #0
 8005cb8:	d1e1      	bne.n	8005c7e <mem_trim+0x82>
    next = mem2->next;
 8005cba:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 8005cbc:	4913      	ldr	r1, [pc, #76]	; (8005d0c <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005cbe:	f106 0208 	add.w	r2, r6, #8
 8005cc2:	4415      	add	r5, r2
    if (lfree == mem2) {
 8005cc4:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8005cc6:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8005cc8:	4290      	cmp	r0, r2
 8005cca:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8005cce:	bf08      	it	eq
 8005cd0:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8005cd6:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8005cd8:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8005cda:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005cde:	5b5a      	ldrh	r2, [r3, r5]
 8005ce0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005ce4:	bf1c      	itt	ne
 8005ce6:	189b      	addne	r3, r3, r2
 8005ce8:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8005cea:	4809      	ldr	r0, [pc, #36]	; (8005d10 <mem_trim+0x114>)
 8005cec:	f003 feee 	bl	8009acc <sys_mutex_unlock>
  return rmem;
 8005cf0:	e7af      	b.n	8005c52 <mem_trim+0x56>
 8005cf2:	bf00      	nop
 8005cf4:	200052f0 	.word	0x200052f0
 8005cf8:	200052f4 	.word	0x200052f4
 8005cfc:	0800c63f 	.word	0x0800c63f
 8005d00:	0800c724 	.word	0x0800c724
 8005d04:	0800bc05 	.word	0x0800bc05
 8005d08:	0800c73b 	.word	0x0800c73b
 8005d0c:	200052e8 	.word	0x200052e8
 8005d10:	200052ec 	.word	0x200052ec

08005d14 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8005d18:	b148      	cbz	r0, 8005d2e <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8005d1a:	3003      	adds	r0, #3
 8005d1c:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8005d20:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8005d22:	2d0b      	cmp	r5, #11
 8005d24:	d905      	bls.n	8005d32 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8005d26:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8005d2a:	d903      	bls.n	8005d34 <mem_malloc+0x20>
    return NULL;
 8005d2c:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8005d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8005d32:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 8005d34:	483c      	ldr	r0, [pc, #240]	; (8005e28 <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d36:	4e3d      	ldr	r6, [pc, #244]	; (8005e2c <mem_malloc+0x118>)
  sys_mutex_lock(&mem_mutex);
 8005d38:	f003 fec3 	bl	8009ac2 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d3c:	483c      	ldr	r0, [pc, #240]	; (8005e30 <mem_malloc+0x11c>)
 8005d3e:	6831      	ldr	r1, [r6, #0]
 8005d40:	6807      	ldr	r7, [r0, #0]
 8005d42:	1a7b      	subs	r3, r7, r1
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f5c5 5820 	rsb	r8, r5, #10240	; 0x2800
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d4a:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8005d4e:	4543      	cmp	r3, r8
 8005d50:	d303      	bcc.n	8005d5a <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 8005d52:	4835      	ldr	r0, [pc, #212]	; (8005e28 <mem_malloc+0x114>)
 8005d54:	f003 feba 	bl	8009acc <sys_mutex_unlock>
 8005d58:	e7e8      	b.n	8005d2c <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8005d5a:	18cc      	adds	r4, r1, r3
 8005d5c:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8005d60:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005d64:	f1bc 0f00 	cmp.w	ip, #0
 8005d68:	d15b      	bne.n	8005e22 <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005d6a:	eba9 0203 	sub.w	r2, r9, r3
 8005d6e:	4472      	add	r2, lr
      if ((!mem->used) &&
 8005d70:	4295      	cmp	r5, r2
 8005d72:	d856      	bhi.n	8005e22 <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d74:	f105 0814 	add.w	r8, r5, #20
 8005d78:	4542      	cmp	r2, r8
 8005d7a:	d34c      	bcc.n	8005e16 <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8005d7c:	f105 0208 	add.w	r2, r5, #8
 8005d80:	441a      	add	r2, r3
 8005d82:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8005d84:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8005d88:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 8005d8c:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8005d90:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8005d94:	2301      	movs	r3, #1
          mem->next = ptr2;
 8005d96:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8005d98:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d9a:	5a8b      	ldrh	r3, [r1, r2]
 8005d9c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8005da0:	d001      	beq.n	8005da6 <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8005da2:	4419      	add	r1, r3
 8005da4:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8005da6:	42a7      	cmp	r7, r4
 8005da8:	4f22      	ldr	r7, [pc, #136]	; (8005e34 <mem_malloc+0x120>)
 8005daa:	d111      	bne.n	8005dd0 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 8005dac:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8005dae:	6836      	ldr	r6, [r6, #0]
 8005db0:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8005db2:	791a      	ldrb	r2, [r3, #4]
 8005db4:	b10a      	cbz	r2, 8005dba <mem_malloc+0xa6>
 8005db6:	428b      	cmp	r3, r1
 8005db8:	d130      	bne.n	8005e1c <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005dba:	428b      	cmp	r3, r1
          lfree = cur;
 8005dbc:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005dbe:	d007      	beq.n	8005dd0 <mem_malloc+0xbc>
 8005dc0:	b132      	cbz	r2, 8005dd0 <mem_malloc+0xbc>
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	; (8005e38 <mem_malloc+0x124>)
 8005dc4:	491d      	ldr	r1, [pc, #116]	; (8005e3c <mem_malloc+0x128>)
 8005dc6:	481e      	ldr	r0, [pc, #120]	; (8005e40 <mem_malloc+0x12c>)
 8005dc8:	f240 22cf 	movw	r2, #719	; 0x2cf
 8005dcc:	f004 fdce 	bl	800a96c <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8005dd0:	4815      	ldr	r0, [pc, #84]	; (8005e28 <mem_malloc+0x114>)
 8005dd2:	f003 fe7b 	bl	8009acc <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005dd6:	3508      	adds	r5, #8
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4425      	add	r5, r4
 8005ddc:	42ab      	cmp	r3, r5
 8005dde:	d206      	bcs.n	8005dee <mem_malloc+0xda>
 8005de0:	4b15      	ldr	r3, [pc, #84]	; (8005e38 <mem_malloc+0x124>)
 8005de2:	4918      	ldr	r1, [pc, #96]	; (8005e44 <mem_malloc+0x130>)
 8005de4:	4816      	ldr	r0, [pc, #88]	; (8005e40 <mem_malloc+0x12c>)
 8005de6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8005dea:	f004 fdbf 	bl	800a96c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005dee:	07a3      	lsls	r3, r4, #30
 8005df0:	d00d      	beq.n	8005e0e <mem_malloc+0xfa>
 8005df2:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <mem_malloc+0x124>)
 8005df4:	4914      	ldr	r1, [pc, #80]	; (8005e48 <mem_malloc+0x134>)
 8005df6:	4812      	ldr	r0, [pc, #72]	; (8005e40 <mem_malloc+0x12c>)
 8005df8:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005dfc:	f004 fdb6 	bl	800a96c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e00:	4b0d      	ldr	r3, [pc, #52]	; (8005e38 <mem_malloc+0x124>)
 8005e02:	4912      	ldr	r1, [pc, #72]	; (8005e4c <mem_malloc+0x138>)
 8005e04:	480e      	ldr	r0, [pc, #56]	; (8005e40 <mem_malloc+0x12c>)
 8005e06:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8005e0a:	f004 fdaf 	bl	800a96c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8005e0e:	f104 0008 	add.w	r0, r4, #8
 8005e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8005e16:	2301      	movs	r3, #1
 8005e18:	7123      	strb	r3, [r4, #4]
 8005e1a:	e7c4      	b.n	8005da6 <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8005e1c:	881b      	ldrh	r3, [r3, #0]
 8005e1e:	4433      	add	r3, r6
 8005e20:	e7c7      	b.n	8005db2 <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8005e22:	4673      	mov	r3, lr
 8005e24:	e793      	b.n	8005d4e <mem_malloc+0x3a>
 8005e26:	bf00      	nop
 8005e28:	200052ec 	.word	0x200052ec
 8005e2c:	200052f0 	.word	0x200052f0
 8005e30:	200052e8 	.word	0x200052e8
 8005e34:	200052f4 	.word	0x200052f4
 8005e38:	0800c63f 	.word	0x0800c63f
 8005e3c:	0800c689 	.word	0x0800c689
 8005e40:	0800bc05 	.word	0x0800bc05
 8005e44:	0800c6a2 	.word	0x0800c6a2
 8005e48:	0800c6d2 	.word	0x0800c6d2
 8005e4c:	0800c701 	.word	0x0800c701

08005e50 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8005e54:	f003 fe54 	bl	8009b00 <sys_arch_protect>

  memp = *desc->tab;
 8005e58:	6823      	ldr	r3, [r4, #0]
 8005e5a:	681c      	ldr	r4, [r3, #0]
  SYS_ARCH_PROTECT(old_level);
 8005e5c:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005e5e:	b15c      	cbz	r4, 8005e78 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005e60:	6822      	ldr	r2, [r4, #0]
 8005e62:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005e64:	07a3      	lsls	r3, r4, #30
 8005e66:	d006      	beq.n	8005e76 <do_memp_malloc_pool.isra.0+0x26>
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <do_memp_malloc_pool.isra.0+0x30>)
 8005e6a:	4906      	ldr	r1, [pc, #24]	; (8005e84 <do_memp_malloc_pool.isra.0+0x34>)
 8005e6c:	4806      	ldr	r0, [pc, #24]	; (8005e88 <do_memp_malloc_pool.isra.0+0x38>)
 8005e6e:	f240 1249 	movw	r2, #329	; 0x149
 8005e72:	f004 fd7b 	bl	800a96c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8005e76:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8005e78:	f003 fe4e 	bl	8009b18 <sys_arch_unprotect>
  return NULL;
}
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	0800c77b 	.word	0x0800c77b
 8005e84:	0800c7ab 	.word	0x0800c7ab
 8005e88:	0800bc05 	.word	0x0800bc05

08005e8c <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005e8c:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005e8e:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8005e90:	4605      	mov	r5, r0
 8005e92:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8005e94:	d006      	beq.n	8005ea4 <do_memp_free_pool.isra.1+0x18>
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <do_memp_free_pool.isra.1+0x2c>)
 8005e98:	4908      	ldr	r1, [pc, #32]	; (8005ebc <do_memp_free_pool.isra.1+0x30>)
 8005e9a:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <do_memp_free_pool.isra.1+0x34>)
 8005e9c:	f240 129d 	movw	r2, #413	; 0x19d
 8005ea0:	f004 fd64 	bl	800a96c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8005ea4:	f003 fe2c 	bl	8009b00 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8005eae:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8005eb4:	f003 be30 	b.w	8009b18 <sys_arch_unprotect>
 8005eb8:	0800c77b 	.word	0x0800c77b
 8005ebc:	0800c75b 	.word	0x0800c75b
 8005ec0:	0800bc05 	.word	0x0800bc05

08005ec4 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005ec4:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8005ec6:	6881      	ldr	r1, [r0, #8]
{
 8005ec8:	b530      	push	{r4, r5, lr}
  *desc->tab = NULL;
 8005eca:	2200      	movs	r2, #0
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005ecc:	3303      	adds	r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005ece:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8005ed0:	600a      	str	r2, [r1, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8005ed6:	42a2      	cmp	r2, r4
 8005ed8:	db00      	blt.n	8005edc <memp_init_pool+0x18>
}
 8005eda:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8005edc:	680d      	ldr	r5, [r1, #0]
 8005ede:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ee0:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8005ee2:	600b      	str	r3, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8005ee4:	3201      	adds	r2, #1
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005ee6:	442b      	add	r3, r5
 8005ee8:	e7f5      	b.n	8005ed6 <memp_init_pool+0x12>
	...

08005eec <memp_init>:
{
 8005eec:	b538      	push	{r3, r4, r5, lr}
    memp_init_pool(memp_pools[i]);
 8005eee:	4d05      	ldr	r5, [pc, #20]	; (8005f04 <memp_init+0x18>)
{
 8005ef0:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8005ef2:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005ef6:	3401      	adds	r4, #1
 8005ef8:	f7ff ffe4 	bl	8005ec4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005efc:	2c0d      	cmp	r4, #13
 8005efe:	d1f8      	bne.n	8005ef2 <memp_init+0x6>
}
 8005f00:	bd38      	pop	{r3, r4, r5, pc}
 8005f02:	bf00      	nop
 8005f04:	0800c8a4 	.word	0x0800c8a4

08005f08 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005f08:	280c      	cmp	r0, #12
{
 8005f0a:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005f0c:	d807      	bhi.n	8005f1e <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005f0e:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <memp_malloc+0x28>)
 8005f10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8005f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005f18:	3008      	adds	r0, #8
 8005f1a:	f7ff bf99 	b.w	8005e50 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <memp_malloc+0x2c>)
 8005f20:	4905      	ldr	r1, [pc, #20]	; (8005f38 <memp_malloc+0x30>)
 8005f22:	4806      	ldr	r0, [pc, #24]	; (8005f3c <memp_malloc+0x34>)
 8005f24:	f240 1287 	movw	r2, #391	; 0x187
 8005f28:	f004 fd20 	bl	800a96c <iprintf>
}
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	bd08      	pop	{r3, pc}
 8005f30:	0800c8a4 	.word	0x0800c8a4
 8005f34:	0800c77b 	.word	0x0800c77b
 8005f38:	0800c887 	.word	0x0800c887
 8005f3c:	0800bc05 	.word	0x0800bc05

08005f40 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005f40:	280c      	cmp	r0, #12
 8005f42:	d906      	bls.n	8005f52 <memp_free+0x12>
 8005f44:	4b07      	ldr	r3, [pc, #28]	; (8005f64 <memp_free+0x24>)
 8005f46:	4908      	ldr	r1, [pc, #32]	; (8005f68 <memp_free+0x28>)
 8005f48:	4808      	ldr	r0, [pc, #32]	; (8005f6c <memp_free+0x2c>)
 8005f4a:	f240 12db 	movw	r2, #475	; 0x1db
 8005f4e:	f004 bd0d 	b.w	800a96c <iprintf>

  if (mem == NULL) {
 8005f52:	b129      	cbz	r1, 8005f60 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <memp_free+0x30>)
 8005f56:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005f5a:	3008      	adds	r0, #8
 8005f5c:	f7ff bf96 	b.w	8005e8c <do_memp_free_pool.isra.1>
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	0800c77b 	.word	0x0800c77b
 8005f68:	0800c86c 	.word	0x0800c86c
 8005f6c:	0800bc05 	.word	0x0800bc05
 8005f70:	0800c8a4 	.word	0x0800c8a4

08005f74 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005f74:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 8005f78:	071b      	lsls	r3, r3, #28
netif_issue_reports(struct netif* netif, u8_t report_type)
 8005f7a:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005f7c:	d502      	bpl.n	8005f84 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8005f7e:	3104      	adds	r1, #4
 8005f80:	f7fe bd62 	b.w	8004a48 <etharp_request>
 8005f84:	4770      	bx	lr

08005f86 <netif_init>:
{
 8005f86:	4770      	bx	lr

08005f88 <netif_set_ipaddr>:
{
 8005f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f8a:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	b1b9      	cbz	r1, 8005fc0 <netif_set_ipaddr+0x38>
 8005f90:	680b      	ldr	r3, [r1, #0]
 8005f92:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8005f94:	9a01      	ldr	r2, [sp, #4]
 8005f96:	686b      	ldr	r3, [r5, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d00f      	beq.n	8005fbc <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005f9c:	1d2e      	adds	r6, r5, #4
 8005f9e:	a901      	add	r1, sp, #4
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f001 fafd 	bl	80075a0 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8005fa6:	a901      	add	r1, sp, #4
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f003 fc91 	bl	80098d0 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005fae:	b104      	cbz	r4, 8005fb2 <netif_set_ipaddr+0x2a>
 8005fb0:	6824      	ldr	r4, [r4, #0]
 8005fb2:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005fb4:	b114      	cbz	r4, 8005fbc <netif_set_ipaddr+0x34>
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7ff ffdc 	bl	8005f74 <netif_issue_reports.part.0>
}
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8005fc0:	4b01      	ldr	r3, [pc, #4]	; (8005fc8 <netif_set_ipaddr+0x40>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	e7e5      	b.n	8005f92 <netif_set_ipaddr+0xa>
 8005fc6:	bf00      	nop
 8005fc8:	0800c3e0 	.word	0x0800c3e0

08005fcc <netif_set_addr>:
{
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	4606      	mov	r6, r0
 8005fd0:	4615      	mov	r5, r2
 8005fd2:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8005fd4:	b109      	cbz	r1, 8005fda <netif_set_addr+0xe>
 8005fd6:	680b      	ldr	r3, [r1, #0]
 8005fd8:	b94b      	cbnz	r3, 8005fee <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ffd4 	bl	8005f88 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005fe0:	b105      	cbz	r5, 8005fe4 <netif_set_addr+0x18>
 8005fe2:	682d      	ldr	r5, [r5, #0]
 8005fe4:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005fe6:	b104      	cbz	r4, 8005fea <netif_set_addr+0x1e>
 8005fe8:	6824      	ldr	r4, [r4, #0]
 8005fea:	60f4      	str	r4, [r6, #12]
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005fee:	b102      	cbz	r2, 8005ff2 <netif_set_addr+0x26>
 8005ff0:	6815      	ldr	r5, [r2, #0]
 8005ff2:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005ff4:	b104      	cbz	r4, 8005ff8 <netif_set_addr+0x2c>
 8005ff6:	6824      	ldr	r4, [r4, #0]
 8005ff8:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8005ffa:	4630      	mov	r0, r6
}
 8005ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8006000:	f7ff bfc2 	b.w	8005f88 <netif_set_ipaddr>

08006004 <netif_add>:
{
 8006004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006008:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800600a:	4604      	mov	r4, r0
 800600c:	460f      	mov	r7, r1
 800600e:	4690      	mov	r8, r2
 8006010:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8006012:	b92e      	cbnz	r6, 8006020 <netif_add+0x1c>
 8006014:	4b15      	ldr	r3, [pc, #84]	; (800606c <netif_add+0x68>)
 8006016:	4916      	ldr	r1, [pc, #88]	; (8006070 <netif_add+0x6c>)
 8006018:	4816      	ldr	r0, [pc, #88]	; (8006074 <netif_add+0x70>)
 800601a:	22fb      	movs	r2, #251	; 0xfb
 800601c:	f004 fca6 	bl	800a96c <iprintf>
  netif->num = netif_num++;
 8006020:	4a15      	ldr	r2, [pc, #84]	; (8006078 <netif_add+0x74>)
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006022:	2303      	movs	r3, #3
 8006024:	f884 3020 	strb.w	r3, [r4, #32]
  netif->state = state;
 8006028:	9b08      	ldr	r3, [sp, #32]
 800602a:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 800602c:	7813      	ldrb	r3, [r2, #0]
 800602e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006032:	2500      	movs	r5, #0
  netif->num = netif_num++;
 8006034:	1c59      	adds	r1, r3, #1
  netif->input = input;
 8006036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8006038:	7011      	strb	r1, [r2, #0]
  netif->input = input;
 800603a:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800603c:	4620      	mov	r0, r4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800603e:	6065      	str	r5, [r4, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006040:	60a5      	str	r5, [r4, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006042:	60e5      	str	r5, [r4, #12]
  netif->flags = 0;
 8006044:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006048:	464b      	mov	r3, r9
 800604a:	4642      	mov	r2, r8
 800604c:	4639      	mov	r1, r7
 800604e:	f7ff ffbd 	bl	8005fcc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8006052:	4620      	mov	r0, r4
 8006054:	47b0      	blx	r6
 8006056:	b930      	cbnz	r0, 8006066 <netif_add+0x62>
  netif->next = netif_list;
 8006058:	4b08      	ldr	r3, [pc, #32]	; (800607c <netif_add+0x78>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 800605e:	601c      	str	r4, [r3, #0]
}
 8006060:	4620      	mov	r0, r4
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006066:	462c      	mov	r4, r5
 8006068:	e7fa      	b.n	8006060 <netif_add+0x5c>
 800606a:	bf00      	nop
 800606c:	0800c8d8 	.word	0x0800c8d8
 8006070:	0800c909 	.word	0x0800c909
 8006074:	0800bc05 	.word	0x0800bc05
 8006078:	2000532c 	.word	0x2000532c
 800607c:	2000d918 	.word	0x2000d918

08006080 <netif_set_default>:
  netif_default = netif;
 8006080:	4b01      	ldr	r3, [pc, #4]	; (8006088 <netif_set_default+0x8>)
 8006082:	6018      	str	r0, [r3, #0]
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	2000d91c 	.word	0x2000d91c

0800608c <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800608c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
 8006090:	07d1      	lsls	r1, r2, #31
 8006092:	d409      	bmi.n	80060a8 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8006094:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006098:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800609a:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800609e:	d503      	bpl.n	80060a8 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80060a0:	6843      	ldr	r3, [r0, #4]
 80060a2:	b10b      	cbz	r3, 80060a8 <netif_set_up+0x1c>
 80060a4:	f7ff bf66 	b.w	8005f74 <netif_issue_reports.part.0>
 80060a8:	4770      	bx	lr

080060aa <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 80060aa:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
 80060ae:	07d9      	lsls	r1, r3, #31
 80060b0:	d507      	bpl.n	80060c2 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 80060b2:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80060b6:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 80060b8:	f880 102b 	strb.w	r1, [r0, #43]	; 0x2b
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80060bc:	d501      	bpl.n	80060c2 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 80060be:	f7fe bc11 	b.w	80048e4 <etharp_cleanup_netif>
 80060c2:	4770      	bx	lr

080060c4 <pbuf_skip_const>:
{
  u16_t offset_left = in_offset;
  const struct pbuf* q = in;

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80060c4:	b110      	cbz	r0, 80060cc <pbuf_skip_const+0x8>
 80060c6:	8943      	ldrh	r3, [r0, #10]
 80060c8:	4299      	cmp	r1, r3
 80060ca:	d202      	bcs.n	80060d2 <pbuf_skip_const+0xe>
    offset_left -= q->len;
    q = q->next;
  }
  if (out_offset != NULL) {
 80060cc:	b102      	cbz	r2, 80060d0 <pbuf_skip_const+0xc>
    *out_offset = offset_left;
 80060ce:	8011      	strh	r1, [r2, #0]
  }
  return q;
}
 80060d0:	4770      	bx	lr
    offset_left -= q->len;
 80060d2:	1ac9      	subs	r1, r1, r3
 80060d4:	b289      	uxth	r1, r1
    q = q->next;
 80060d6:	6800      	ldr	r0, [r0, #0]
 80060d8:	e7f4      	b.n	80060c4 <pbuf_skip_const>
	...

080060dc <pbuf_header_impl>:
{
 80060dc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80060de:	4604      	mov	r4, r0
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d12f      	bne.n	8006144 <pbuf_header_impl+0x68>
 80060e4:	4b1f      	ldr	r3, [pc, #124]	; (8006164 <pbuf_header_impl+0x88>)
 80060e6:	4920      	ldr	r1, [pc, #128]	; (8006168 <pbuf_header_impl+0x8c>)
 80060e8:	4820      	ldr	r0, [pc, #128]	; (800616c <pbuf_header_impl+0x90>)
 80060ea:	f240 223f 	movw	r2, #575	; 0x23f
 80060ee:	f004 fc3d 	bl	800a96c <iprintf>
  return 0;
 80060f2:	2000      	movs	r0, #0
 80060f4:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 80060f6:	b288      	uxth	r0, r1
  type = p->type;
 80060f8:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 80060fa:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80060fc:	b10d      	cbz	r5, 8006102 <pbuf_header_impl+0x26>
 80060fe:	2d03      	cmp	r5, #3
 8006100:	d106      	bne.n	8006110 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006102:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006104:	f104 0210 	add.w	r2, r4, #16
 8006108:	4293      	cmp	r3, r2
 800610a:	d20a      	bcs.n	8006122 <pbuf_header_impl+0x46>
      return 1;
 800610c:	2001      	movs	r0, #1
 800610e:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006110:	3d01      	subs	r5, #1
 8006112:	2d01      	cmp	r5, #1
 8006114:	d811      	bhi.n	800613a <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006116:	2900      	cmp	r1, #0
 8006118:	da0c      	bge.n	8006134 <pbuf_header_impl+0x58>
 800611a:	8962      	ldrh	r2, [r4, #10]
 800611c:	4282      	cmp	r2, r0
 800611e:	d3f5      	bcc.n	800610c <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006120:	1a5b      	subs	r3, r3, r1
  p->tot_len += header_size_increment;
 8006122:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006124:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8006126:	8963      	ldrh	r3, [r4, #10]
 8006128:	b289      	uxth	r1, r1
 800612a:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 800612c:	4401      	add	r1, r0
  p->len += header_size_increment;
 800612e:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8006130:	8121      	strh	r1, [r4, #8]
 8006132:	e7de      	b.n	80060f2 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8006134:	2a00      	cmp	r2, #0
 8006136:	d1f3      	bne.n	8006120 <pbuf_header_impl+0x44>
 8006138:	e7e8      	b.n	800610c <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <pbuf_header_impl+0x88>)
 800613c:	490c      	ldr	r1, [pc, #48]	; (8006170 <pbuf_header_impl+0x94>)
 800613e:	f240 2277 	movw	r2, #631	; 0x277
 8006142:	e00b      	b.n	800615c <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006144:	2900      	cmp	r1, #0
 8006146:	d0d4      	beq.n	80060f2 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8006148:	dad5      	bge.n	80060f6 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 800614a:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800614c:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800614e:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006150:	4283      	cmp	r3, r0
 8006152:	d2d1      	bcs.n	80060f8 <pbuf_header_impl+0x1c>
 8006154:	4b03      	ldr	r3, [pc, #12]	; (8006164 <pbuf_header_impl+0x88>)
 8006156:	4907      	ldr	r1, [pc, #28]	; (8006174 <pbuf_header_impl+0x98>)
 8006158:	f240 2247 	movw	r2, #583	; 0x247
    LWIP_ASSERT("bad pbuf type", 0);
 800615c:	4803      	ldr	r0, [pc, #12]	; (800616c <pbuf_header_impl+0x90>)
 800615e:	f004 fc05 	bl	800a96c <iprintf>
 8006162:	e7d3      	b.n	800610c <pbuf_header_impl+0x30>
 8006164:	0800cb85 	.word	0x0800cb85
 8006168:	0800cbef 	.word	0x0800cbef
 800616c:	0800bc05 	.word	0x0800bc05
 8006170:	0800cbd3 	.word	0x0800cbd3
 8006174:	0800cbb5 	.word	0x0800cbb5

08006178 <pbuf_alloced_custom>:
{
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 800617c:	2804      	cmp	r0, #4
 800617e:	d81e      	bhi.n	80061be <pbuf_alloced_custom+0x46>
 8006180:	e8df f000 	tbb	[pc, r0]
 8006184:	1b280326 	.word	0x1b280326
 8006188:	1b          	.byte	0x1b
 8006189:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800618a:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800618c:	3403      	adds	r4, #3
 800618e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8006192:	f024 0403 	bic.w	r4, r4, #3
 8006196:	190e      	adds	r6, r1, r4
 8006198:	4286      	cmp	r6, r0
 800619a:	f04f 0000 	mov.w	r0, #0
 800619e:	d80b      	bhi.n	80061b8 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 80061a0:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 80061a2:	b1cd      	cbz	r5, 80061d8 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80061a4:	442c      	add	r4, r5
 80061a6:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80061a8:	2002      	movs	r0, #2
  p->pbuf.type = type;
 80061aa:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80061ac:	2201      	movs	r2, #1
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80061ae:	7358      	strb	r0, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80061b0:	8119      	strh	r1, [r3, #8]
 80061b2:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 80061b4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 80061b6:	4618      	mov	r0, r3
}
 80061b8:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 80061ba:	2400      	movs	r4, #0
    break;
 80061bc:	e7e6      	b.n	800618c <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80061be:	4b07      	ldr	r3, [pc, #28]	; (80061dc <pbuf_alloced_custom+0x64>)
 80061c0:	4907      	ldr	r1, [pc, #28]	; (80061e0 <pbuf_alloced_custom+0x68>)
 80061c2:	4808      	ldr	r0, [pc, #32]	; (80061e4 <pbuf_alloced_custom+0x6c>)
 80061c4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80061c8:	f004 fbd0 	bl	800a96c <iprintf>
    return NULL;
 80061cc:	2000      	movs	r0, #0
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80061d0:	2436      	movs	r4, #54	; 0x36
 80061d2:	e7db      	b.n	800618c <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80061d4:	240e      	movs	r4, #14
 80061d6:	e7d9      	b.n	800618c <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80061d8:	605d      	str	r5, [r3, #4]
 80061da:	e7e5      	b.n	80061a8 <pbuf_alloced_custom+0x30>
 80061dc:	0800cb85 	.word	0x0800cb85
 80061e0:	0800c9c8 	.word	0x0800c9c8
 80061e4:	0800bc05 	.word	0x0800bc05

080061e8 <pbuf_header>:
   return pbuf_header_impl(p, header_size_increment, 0);
 80061e8:	2200      	movs	r2, #0
 80061ea:	f7ff bf77 	b.w	80060dc <pbuf_header_impl>

080061ee <pbuf_header_force>:
   return pbuf_header_impl(p, header_size_increment, 1);
 80061ee:	2201      	movs	r2, #1
 80061f0:	f7ff bf74 	b.w	80060dc <pbuf_header_impl>

080061f4 <pbuf_free>:
{
 80061f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (p == NULL) {
 80061f8:	4604      	mov	r4, r0
 80061fa:	b950      	cbnz	r0, 8006212 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
 80061fc:	4b2c      	ldr	r3, [pc, #176]	; (80062b0 <pbuf_free+0xbc>)
 80061fe:	492d      	ldr	r1, [pc, #180]	; (80062b4 <pbuf_free+0xc0>)
 8006200:	482d      	ldr	r0, [pc, #180]	; (80062b8 <pbuf_free+0xc4>)
 8006202:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006206:	f004 fbb1 	bl	800a96c <iprintf>
    return 0;
 800620a:	4627      	mov	r7, r4
}
 800620c:	4638      	mov	r0, r7
 800620e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006212:	7b03      	ldrb	r3, [r0, #12]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d906      	bls.n	8006226 <pbuf_free+0x32>
 8006218:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <pbuf_free+0xbc>)
 800621a:	4928      	ldr	r1, [pc, #160]	; (80062bc <pbuf_free+0xc8>)
 800621c:	4826      	ldr	r0, [pc, #152]	; (80062b8 <pbuf_free+0xc4>)
 800621e:	f240 22de 	movw	r2, #734	; 0x2de
 8006222:	f004 fba3 	bl	800a96c <iprintf>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006226:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80062b0 <pbuf_free+0xbc>
 800622a:	f8df a098 	ldr.w	sl, [pc, #152]	; 80062c4 <pbuf_free+0xd0>
 800622e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80062b8 <pbuf_free+0xc4>
{
 8006232:	2600      	movs	r6, #0
 8006234:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 8006236:	2c00      	cmp	r4, #0
 8006238:	d0e8      	beq.n	800620c <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 800623a:	f003 fc61 	bl	8009b00 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800623e:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8006240:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006242:	b933      	cbnz	r3, 8006252 <pbuf_free+0x5e>
 8006244:	4643      	mov	r3, r8
 8006246:	f240 22eb 	movw	r2, #747	; 0x2eb
 800624a:	4651      	mov	r1, sl
 800624c:	4648      	mov	r0, r9
 800624e:	f004 fb8d 	bl	800a96c <iprintf>
    ref = --(p->ref);
 8006252:	89e5      	ldrh	r5, [r4, #14]
 8006254:	3d01      	subs	r5, #1
 8006256:	b2ad      	uxth	r5, r5
 8006258:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800625a:	4658      	mov	r0, fp
 800625c:	f003 fc5c 	bl	8009b18 <sys_arch_unprotect>
    if (ref == 0) {
 8006260:	2d00      	cmp	r5, #0
 8006262:	d1d3      	bne.n	800620c <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006264:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8006266:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006268:	079b      	lsls	r3, r3, #30
 800626a:	d50e      	bpl.n	800628a <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800626c:	6923      	ldr	r3, [r4, #16]
 800626e:	b933      	cbnz	r3, 800627e <pbuf_free+0x8a>
 8006270:	4643      	mov	r3, r8
 8006272:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006276:	4912      	ldr	r1, [pc, #72]	; (80062c0 <pbuf_free+0xcc>)
 8006278:	4648      	mov	r0, r9
 800627a:	f004 fb77 	bl	800a96c <iprintf>
        pc->custom_free_function(p);
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	4620      	mov	r0, r4
 8006282:	4798      	blx	r3
 8006284:	3601      	adds	r6, #1
      p = q;
 8006286:	462c      	mov	r4, r5
 8006288:	e7d4      	b.n	8006234 <pbuf_free+0x40>
      type = p->type;
 800628a:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 800628c:	2b03      	cmp	r3, #3
 800628e:	d104      	bne.n	800629a <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 8006290:	4621      	mov	r1, r4
 8006292:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8006294:	f7ff fe54 	bl	8005f40 <memp_free>
 8006298:	e7f4      	b.n	8006284 <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800629a:	3b01      	subs	r3, #1
 800629c:	2b01      	cmp	r3, #1
 800629e:	d802      	bhi.n	80062a6 <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 80062a0:	4621      	mov	r1, r4
 80062a2:	200b      	movs	r0, #11
 80062a4:	e7f6      	b.n	8006294 <pbuf_free+0xa0>
          mem_free(p);
 80062a6:	4620      	mov	r0, r4
 80062a8:	f7ff fbf0 	bl	8005a8c <mem_free>
 80062ac:	e7ea      	b.n	8006284 <pbuf_free+0x90>
 80062ae:	bf00      	nop
 80062b0:	0800cb85 	.word	0x0800cb85
 80062b4:	0800cbef 	.word	0x0800cbef
 80062b8:	0800bc05 	.word	0x0800bc05
 80062bc:	0800cb39 	.word	0x0800cb39
 80062c0:	0800cb64 	.word	0x0800cb64
 80062c4:	0800cb4e 	.word	0x0800cb4e

080062c8 <pbuf_alloc>:
{
 80062c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	460e      	mov	r6, r1
 80062ce:	4617      	mov	r7, r2
  switch (layer) {
 80062d0:	2804      	cmp	r0, #4
 80062d2:	d80e      	bhi.n	80062f2 <pbuf_alloc+0x2a>
 80062d4:	e8df f000 	tbb	[pc, r0]
 80062d8:	0b170315 	.word	0x0b170315
 80062dc:	0b          	.byte	0x0b
 80062dd:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80062de:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 80062e0:	2f03      	cmp	r7, #3
 80062e2:	f200 80ba 	bhi.w	800645a <pbuf_alloc+0x192>
 80062e6:	e8df f007 	tbb	[pc, r7]
 80062ea:	aa8d      	.short	0xaa8d
 80062ec:	10aa      	.short	0x10aa
    offset = 0;
 80062ee:	2500      	movs	r5, #0
    break;
 80062f0:	e7f6      	b.n	80062e0 <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80062f2:	4b5c      	ldr	r3, [pc, #368]	; (8006464 <pbuf_alloc+0x19c>)
 80062f4:	495c      	ldr	r1, [pc, #368]	; (8006468 <pbuf_alloc+0x1a0>)
 80062f6:	f44f 728b 	mov.w	r2, #278	; 0x116
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80062fa:	485c      	ldr	r0, [pc, #368]	; (800646c <pbuf_alloc+0x1a4>)
 80062fc:	f004 fb36 	bl	800a96c <iprintf>
 8006300:	e008      	b.n	8006314 <pbuf_alloc+0x4c>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006302:	2536      	movs	r5, #54	; 0x36
 8006304:	e7ec      	b.n	80062e0 <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006306:	250e      	movs	r5, #14
 8006308:	e7ea      	b.n	80062e0 <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800630a:	200c      	movs	r0, #12
 800630c:	f7ff fdfc 	bl	8005f08 <memp_malloc>
    if (p == NULL) {
 8006310:	4604      	mov	r4, r0
 8006312:	b918      	cbnz	r0, 800631c <pbuf_alloc+0x54>
    return NULL;
 8006314:	2400      	movs	r4, #0
}
 8006316:	4620      	mov	r0, r4
 8006318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 800631c:	2303      	movs	r3, #3
 800631e:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006324:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006326:	3503      	adds	r5, #3
 8006328:	f025 0503 	bic.w	r5, r5, #3
 800632c:	f5c5 65be 	rsb	r5, r5, #1520	; 0x5f0
 8006330:	3504      	adds	r5, #4
 8006332:	42b5      	cmp	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006334:	f103 0313 	add.w	r3, r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006338:	bf28      	it	cs
 800633a:	4635      	movcs	r5, r6
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800633c:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006340:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006342:	f200 6704 	addw	r7, r0, #1540	; 0x604
 8006346:	441d      	add	r5, r3
 8006348:	42af      	cmp	r7, r5
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800634a:	6043      	str	r3, [r0, #4]
    p->tot_len = length;
 800634c:	8106      	strh	r6, [r0, #8]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800634e:	d206      	bcs.n	800635e <pbuf_alloc+0x96>
 8006350:	4b44      	ldr	r3, [pc, #272]	; (8006464 <pbuf_alloc+0x19c>)
 8006352:	4947      	ldr	r1, [pc, #284]	; (8006470 <pbuf_alloc+0x1a8>)
 8006354:	4845      	ldr	r0, [pc, #276]	; (800646c <pbuf_alloc+0x1a4>)
 8006356:	f44f 7298 	mov.w	r2, #304	; 0x130
 800635a:	f004 fb07 	bl	800a96c <iprintf>
    p->ref = 1;
 800635e:	2301      	movs	r3, #1
 8006360:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8006362:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006364:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8006464 <pbuf_alloc+0x19c>
 8006368:	f8df a110 	ldr.w	sl, [pc, #272]	; 800647c <pbuf_alloc+0x1b4>
 800636c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800646c <pbuf_alloc+0x1a4>
    rem_len = length - p->len;
 8006370:	1af6      	subs	r6, r6, r3
    while (rem_len > 0) {
 8006372:	46a3      	mov	fp, r4
 8006374:	2e00      	cmp	r6, #0
 8006376:	dc04      	bgt.n	8006382 <pbuf_alloc+0xba>
  p->ref = 1;
 8006378:	2301      	movs	r3, #1
 800637a:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	7363      	strb	r3, [r4, #13]
  return p;
 8006380:	e7c9      	b.n	8006316 <pbuf_alloc+0x4e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006382:	200c      	movs	r0, #12
 8006384:	f7ff fdc0 	bl	8005f08 <memp_malloc>
 8006388:	2300      	movs	r3, #0
      if (q == NULL) {
 800638a:	4605      	mov	r5, r0
 800638c:	b918      	cbnz	r0, 8006396 <pbuf_alloc+0xce>
        pbuf_free(p);
 800638e:	4620      	mov	r0, r4
 8006390:	f7ff ff30 	bl	80061f4 <pbuf_free>
 8006394:	e7be      	b.n	8006314 <pbuf_alloc+0x4c>
      q->flags = 0;
 8006396:	7343      	strb	r3, [r0, #13]
      q->next = NULL;
 8006398:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800639a:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 800639e:	2203      	movs	r2, #3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80063a0:	429e      	cmp	r6, r3
      q->type = type;
 80063a2:	7302      	strb	r2, [r0, #12]
      r->next = q;
 80063a4:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80063a8:	d106      	bne.n	80063b8 <pbuf_alloc+0xf0>
 80063aa:	4643      	mov	r3, r8
 80063ac:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80063b0:	4651      	mov	r1, sl
 80063b2:	4648      	mov	r0, r9
 80063b4:	f004 fada 	bl	800a96c <iprintf>
      q->tot_len = (u16_t)rem_len;
 80063b8:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80063ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80063be:	4293      	cmp	r3, r2
      q->tot_len = (u16_t)rem_len;
 80063c0:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80063c2:	bf28      	it	cs
 80063c4:	4613      	movcs	r3, r2
 80063c6:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80063c8:	f105 0310 	add.w	r3, r5, #16
 80063cc:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80063ce:	079b      	lsls	r3, r3, #30
 80063d0:	d006      	beq.n	80063e0 <pbuf_alloc+0x118>
 80063d2:	4643      	mov	r3, r8
 80063d4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80063d8:	4926      	ldr	r1, [pc, #152]	; (8006474 <pbuf_alloc+0x1ac>)
 80063da:	4648      	mov	r0, r9
 80063dc:	f004 fac6 	bl	800a96c <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80063e0:	8962      	ldrh	r2, [r4, #10]
 80063e2:	6863      	ldr	r3, [r4, #4]
 80063e4:	4413      	add	r3, r2
 80063e6:	429f      	cmp	r7, r3
 80063e8:	d206      	bcs.n	80063f8 <pbuf_alloc+0x130>
 80063ea:	4643      	mov	r3, r8
 80063ec:	f240 1255 	movw	r2, #341	; 0x155
 80063f0:	491f      	ldr	r1, [pc, #124]	; (8006470 <pbuf_alloc+0x1a8>)
 80063f2:	4648      	mov	r0, r9
 80063f4:	f004 faba 	bl	800a96c <iprintf>
      q->ref = 1;
 80063f8:	2301      	movs	r3, #1
 80063fa:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 80063fc:	896b      	ldrh	r3, [r5, #10]
 80063fe:	46ab      	mov	fp, r5
 8006400:	1af6      	subs	r6, r6, r3
 8006402:	e7b7      	b.n	8006374 <pbuf_alloc+0xac>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006404:	f105 0013 	add.w	r0, r5, #19
 8006408:	1cf3      	adds	r3, r6, #3
 800640a:	f023 0303 	bic.w	r3, r3, #3
 800640e:	f020 0003 	bic.w	r0, r0, #3
 8006412:	4418      	add	r0, r3
 8006414:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006416:	4298      	cmp	r0, r3
 8006418:	f4ff af7c 	bcc.w	8006314 <pbuf_alloc+0x4c>
      p = (struct pbuf*)mem_malloc(alloc_len);
 800641c:	f7ff fc7a 	bl	8005d14 <mem_malloc>
    if (p == NULL) {
 8006420:	4604      	mov	r4, r0
 8006422:	2800      	cmp	r0, #0
 8006424:	f43f af76 	beq.w	8006314 <pbuf_alloc+0x4c>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006428:	4405      	add	r5, r0
 800642a:	3513      	adds	r5, #19
    p->next = NULL;
 800642c:	2300      	movs	r3, #0
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800642e:	f025 0503 	bic.w	r5, r5, #3
 8006432:	6045      	str	r5, [r0, #4]
    p->len = p->tot_len = length;
 8006434:	8106      	strh	r6, [r0, #8]
 8006436:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8006438:	6003      	str	r3, [r0, #0]
    p->type = type;
 800643a:	7303      	strb	r3, [r0, #12]
 800643c:	e79c      	b.n	8006378 <pbuf_alloc+0xb0>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800643e:	200b      	movs	r0, #11
 8006440:	f7ff fd62 	bl	8005f08 <memp_malloc>
    if (p == NULL) {
 8006444:	4604      	mov	r4, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	f43f af64 	beq.w	8006314 <pbuf_alloc+0x4c>
    p->payload = NULL;
 800644c:	2300      	movs	r3, #0
 800644e:	6043      	str	r3, [r0, #4]
    p->len = p->tot_len = length;
 8006450:	8106      	strh	r6, [r0, #8]
 8006452:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8006454:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006456:	7307      	strb	r7, [r0, #12]
    break;
 8006458:	e78e      	b.n	8006378 <pbuf_alloc+0xb0>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800645a:	4b02      	ldr	r3, [pc, #8]	; (8006464 <pbuf_alloc+0x19c>)
 800645c:	4906      	ldr	r1, [pc, #24]	; (8006478 <pbuf_alloc+0x1b0>)
 800645e:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006462:	e74a      	b.n	80062fa <pbuf_alloc+0x32>
 8006464:	0800cb85 	.word	0x0800cb85
 8006468:	0800c920 	.word	0x0800c920
 800646c:	0800bc05 	.word	0x0800bc05
 8006470:	0800c93b 	.word	0x0800c93b
 8006474:	0800c980 	.word	0x0800c980
 8006478:	0800c9ad 	.word	0x0800c9ad
 800647c:	0800c96c 	.word	0x0800c96c

08006480 <pbuf_realloc>:
{
 8006480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006484:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006486:	4604      	mov	r4, r0
 8006488:	b930      	cbnz	r0, 8006498 <pbuf_realloc+0x18>
 800648a:	4b2e      	ldr	r3, [pc, #184]	; (8006544 <pbuf_realloc+0xc4>)
 800648c:	492e      	ldr	r1, [pc, #184]	; (8006548 <pbuf_realloc+0xc8>)
 800648e:	482f      	ldr	r0, [pc, #188]	; (800654c <pbuf_realloc+0xcc>)
 8006490:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006494:	f004 fa6a 	bl	800a96c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8006498:	7b23      	ldrb	r3, [r4, #12]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d906      	bls.n	80064ac <pbuf_realloc+0x2c>
 800649e:	4b29      	ldr	r3, [pc, #164]	; (8006544 <pbuf_realloc+0xc4>)
 80064a0:	492b      	ldr	r1, [pc, #172]	; (8006550 <pbuf_realloc+0xd0>)
 80064a2:	482a      	ldr	r0, [pc, #168]	; (800654c <pbuf_realloc+0xcc>)
 80064a4:	f240 12f7 	movw	r2, #503	; 0x1f7
 80064a8:	f004 fa60 	bl	800a96c <iprintf>
  if (new_len >= p->tot_len) {
 80064ac:	8926      	ldrh	r6, [r4, #8]
 80064ae:	42ae      	cmp	r6, r5
 80064b0:	d945      	bls.n	800653e <pbuf_realloc+0xbe>
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80064b2:	4f24      	ldr	r7, [pc, #144]	; (8006544 <pbuf_realloc+0xc4>)
 80064b4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800655c <pbuf_realloc+0xdc>
 80064b8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800654c <pbuf_realloc+0xcc>
  grow = new_len - p->tot_len;
 80064bc:	1bae      	subs	r6, r5, r6
  while (rem_len > q->len) {
 80064be:	8963      	ldrh	r3, [r4, #10]
 80064c0:	429d      	cmp	r5, r3
 80064c2:	d819      	bhi.n	80064f8 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80064c4:	7b22      	ldrb	r2, [r4, #12]
 80064c6:	2a00      	cmp	r2, #0
 80064c8:	d131      	bne.n	800652e <pbuf_realloc+0xae>
 80064ca:	429d      	cmp	r5, r3
 80064cc:	d02f      	beq.n	800652e <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80064ce:	7b63      	ldrb	r3, [r4, #13]
 80064d0:	079b      	lsls	r3, r3, #30
 80064d2:	d42c      	bmi.n	800652e <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80064d4:	6861      	ldr	r1, [r4, #4]
 80064d6:	1b09      	subs	r1, r1, r4
 80064d8:	4429      	add	r1, r5
 80064da:	4620      	mov	r0, r4
 80064dc:	b289      	uxth	r1, r1
 80064de:	f7ff fb8d 	bl	8005bfc <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80064e2:	4604      	mov	r4, r0
 80064e4:	bb18      	cbnz	r0, 800652e <pbuf_realloc+0xae>
 80064e6:	4b17      	ldr	r3, [pc, #92]	; (8006544 <pbuf_realloc+0xc4>)
 80064e8:	491a      	ldr	r1, [pc, #104]	; (8006554 <pbuf_realloc+0xd4>)
 80064ea:	4818      	ldr	r0, [pc, #96]	; (800654c <pbuf_realloc+0xcc>)
 80064ec:	f240 221d 	movw	r2, #541	; 0x21d
 80064f0:	f004 fa3c 	bl	800a96c <iprintf>
  q->len = rem_len;
 80064f4:	8164      	strh	r4, [r4, #10]
 80064f6:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 80064f8:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80064fa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80064fe:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8006500:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8006502:	dd06      	ble.n	8006512 <pbuf_realloc+0x92>
 8006504:	463b      	mov	r3, r7
 8006506:	f240 220b 	movw	r2, #523	; 0x20b
 800650a:	4649      	mov	r1, r9
 800650c:	4640      	mov	r0, r8
 800650e:	f004 fa2d 	bl	800a96c <iprintf>
    q->tot_len += (u16_t)grow;
 8006512:	8923      	ldrh	r3, [r4, #8]
 8006514:	4433      	add	r3, r6
 8006516:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8006518:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800651a:	2c00      	cmp	r4, #0
 800651c:	d1cf      	bne.n	80064be <pbuf_realloc+0x3e>
 800651e:	463b      	mov	r3, r7
 8006520:	f240 220f 	movw	r2, #527	; 0x20f
 8006524:	490c      	ldr	r1, [pc, #48]	; (8006558 <pbuf_realloc+0xd8>)
 8006526:	4640      	mov	r0, r8
 8006528:	f004 fa20 	bl	800a96c <iprintf>
 800652c:	e7c7      	b.n	80064be <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800652e:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8006530:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8006532:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8006534:	b108      	cbz	r0, 800653a <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8006536:	f7ff fe5d 	bl	80061f4 <pbuf_free>
  q->next = NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006542:	bf00      	nop
 8006544:	0800cb85 	.word	0x0800cb85
 8006548:	0800cbe1 	.word	0x0800cbe1
 800654c:	0800bc05 	.word	0x0800bc05
 8006550:	0800cbf9 	.word	0x0800cbf9
 8006554:	0800cc3d 	.word	0x0800cc3d
 8006558:	0800cc25 	.word	0x0800cc25
 800655c:	0800cc14 	.word	0x0800cc14

08006560 <pbuf_clen>:
{
 8006560:	4603      	mov	r3, r0
  while (p != NULL) {
 8006562:	2200      	movs	r2, #0
 8006564:	b290      	uxth	r0, r2
 8006566:	3201      	adds	r2, #1
 8006568:	b903      	cbnz	r3, 800656c <pbuf_clen+0xc>
}
 800656a:	4770      	bx	lr
    p = p->next;
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	e7f9      	b.n	8006564 <pbuf_clen+0x4>

08006570 <pbuf_ref>:
{
 8006570:	b510      	push	{r4, lr}
  if (p != NULL) {
 8006572:	4604      	mov	r4, r0
 8006574:	b188      	cbz	r0, 800659a <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 8006576:	f003 fac3 	bl	8009b00 <sys_arch_protect>
 800657a:	89e3      	ldrh	r3, [r4, #14]
 800657c:	3301      	adds	r3, #1
 800657e:	81e3      	strh	r3, [r4, #14]
 8006580:	f003 faca 	bl	8009b18 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006584:	89e3      	ldrh	r3, [r4, #14]
 8006586:	b943      	cbnz	r3, 800659a <pbuf_ref+0x2a>
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <pbuf_ref+0x2c>)
 800658a:	4905      	ldr	r1, [pc, #20]	; (80065a0 <pbuf_ref+0x30>)
 800658c:	4805      	ldr	r0, [pc, #20]	; (80065a4 <pbuf_ref+0x34>)
 800658e:	f240 3239 	movw	r2, #825	; 0x339
}
 8006592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006596:	f004 b9e9 	b.w	800a96c <iprintf>
 800659a:	bd10      	pop	{r4, pc}
 800659c:	0800cb85 	.word	0x0800cb85
 80065a0:	0800cc59 	.word	0x0800cc59
 80065a4:	0800bc05 	.word	0x0800bc05

080065a8 <pbuf_cat>:
{
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	460d      	mov	r5, r1
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80065ac:	4604      	mov	r4, r0
 80065ae:	b100      	cbz	r0, 80065b2 <pbuf_cat+0xa>
 80065b0:	b969      	cbnz	r1, 80065ce <pbuf_cat+0x26>
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <pbuf_cat+0x60>)
 80065b4:	4915      	ldr	r1, [pc, #84]	; (800660c <pbuf_cat+0x64>)
 80065b6:	4816      	ldr	r0, [pc, #88]	; (8006610 <pbuf_cat+0x68>)
 80065b8:	f240 324d 	movw	r2, #845	; 0x34d
}
 80065bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80065c0:	f004 b9d4 	b.w	800a96c <iprintf>
    p->tot_len += t->tot_len;
 80065c4:	8923      	ldrh	r3, [r4, #8]
 80065c6:	8929      	ldrh	r1, [r5, #8]
 80065c8:	440b      	add	r3, r1
 80065ca:	8123      	strh	r3, [r4, #8]
 80065cc:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	d1f7      	bne.n	80065c4 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80065d4:	8922      	ldrh	r2, [r4, #8]
 80065d6:	8963      	ldrh	r3, [r4, #10]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d006      	beq.n	80065ea <pbuf_cat+0x42>
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <pbuf_cat+0x60>)
 80065de:	490d      	ldr	r1, [pc, #52]	; (8006614 <pbuf_cat+0x6c>)
 80065e0:	480b      	ldr	r0, [pc, #44]	; (8006610 <pbuf_cat+0x68>)
 80065e2:	f240 3255 	movw	r2, #853	; 0x355
 80065e6:	f004 f9c1 	bl	800a96c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	b133      	cbz	r3, 80065fc <pbuf_cat+0x54>
 80065ee:	4b06      	ldr	r3, [pc, #24]	; (8006608 <pbuf_cat+0x60>)
 80065f0:	4909      	ldr	r1, [pc, #36]	; (8006618 <pbuf_cat+0x70>)
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <pbuf_cat+0x68>)
 80065f4:	f240 3256 	movw	r2, #854	; 0x356
 80065f8:	f004 f9b8 	bl	800a96c <iprintf>
  p->tot_len += t->tot_len;
 80065fc:	892a      	ldrh	r2, [r5, #8]
 80065fe:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8006600:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8006602:	4413      	add	r3, r2
 8006604:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	0800cb85 	.word	0x0800cb85
 800660c:	0800c9ec 	.word	0x0800c9ec
 8006610:	0800bc05 	.word	0x0800bc05
 8006614:	0800ca21 	.word	0x0800ca21
 8006618:	0800ca4e 	.word	0x0800ca4e

0800661c <pbuf_copy>:
{
 800661c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006620:	460c      	mov	r4, r1
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006622:	4605      	mov	r5, r0
 8006624:	b120      	cbz	r0, 8006630 <pbuf_copy+0x14>
 8006626:	b119      	cbz	r1, 8006630 <pbuf_copy+0x14>
 8006628:	8902      	ldrh	r2, [r0, #8]
 800662a:	890b      	ldrh	r3, [r1, #8]
 800662c:	429a      	cmp	r2, r3
 800662e:	d20a      	bcs.n	8006646 <pbuf_copy+0x2a>
 8006630:	4b38      	ldr	r3, [pc, #224]	; (8006714 <pbuf_copy+0xf8>)
 8006632:	4939      	ldr	r1, [pc, #228]	; (8006718 <pbuf_copy+0xfc>)
 8006634:	f240 32bd 	movw	r2, #957	; 0x3bd
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8006638:	4838      	ldr	r0, [pc, #224]	; (800671c <pbuf_copy+0x100>)
 800663a:	f004 f997 	bl	800a96c <iprintf>
 800663e:	f06f 000f 	mvn.w	r0, #15
 8006642:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800664a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8006714 <pbuf_copy+0xf8>
 800664e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800672c <pbuf_copy+0x110>
 8006652:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800671c <pbuf_copy+0x100>
 8006656:	465f      	mov	r7, fp
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006658:	896e      	ldrh	r6, [r5, #10]
 800665a:	8963      	ldrh	r3, [r4, #10]
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800665c:	6868      	ldr	r0, [r5, #4]
 800665e:	6861      	ldr	r1, [r4, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006660:	1bf6      	subs	r6, r6, r7
 8006662:	eba3 030b 	sub.w	r3, r3, fp
 8006666:	429e      	cmp	r6, r3
      len = p_from->len - offset_from;
 8006668:	bfac      	ite	ge
 800666a:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 800666c:	b2b6      	uxthlt	r6, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800666e:	4632      	mov	r2, r6
 8006670:	4459      	add	r1, fp
 8006672:	4438      	add	r0, r7
 8006674:	f004 f967 	bl	800a946 <memcpy>
    offset_to += len;
 8006678:	4437      	add	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800667a:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800667c:	b2bf      	uxth	r7, r7
    offset_from += len;
 800667e:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006680:	42bb      	cmp	r3, r7
    offset_from += len;
 8006682:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006686:	d206      	bcs.n	8006696 <pbuf_copy+0x7a>
 8006688:	4643      	mov	r3, r8
 800668a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800668e:	4651      	mov	r1, sl
 8006690:	4648      	mov	r0, r9
 8006692:	f004 f96b 	bl	800a96c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006696:	8963      	ldrh	r3, [r4, #10]
 8006698:	455b      	cmp	r3, fp
 800669a:	d206      	bcs.n	80066aa <pbuf_copy+0x8e>
 800669c:	4643      	mov	r3, r8
 800669e:	f240 32ce 	movw	r2, #974	; 0x3ce
 80066a2:	491f      	ldr	r1, [pc, #124]	; (8006720 <pbuf_copy+0x104>)
 80066a4:	4648      	mov	r0, r9
 80066a6:	f004 f961 	bl	800a96c <iprintf>
    if (offset_from >= p_from->len) {
 80066aa:	8963      	ldrh	r3, [r4, #10]
 80066ac:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 80066ae:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80066b0:	bf9c      	itt	ls
 80066b2:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80066b4:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 80066b8:	42bb      	cmp	r3, r7
 80066ba:	d11e      	bne.n	80066fa <pbuf_copy+0xde>
      p_to = p_to->next;
 80066bc:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80066be:	b9dd      	cbnz	r5, 80066f8 <pbuf_copy+0xdc>
 80066c0:	b1bc      	cbz	r4, 80066f2 <pbuf_copy+0xd6>
 80066c2:	4b14      	ldr	r3, [pc, #80]	; (8006714 <pbuf_copy+0xf8>)
 80066c4:	4917      	ldr	r1, [pc, #92]	; (8006724 <pbuf_copy+0x108>)
 80066c6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80066ca:	e7b5      	b.n	8006638 <pbuf_copy+0x1c>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80066cc:	8962      	ldrh	r2, [r4, #10]
 80066ce:	8923      	ldrh	r3, [r4, #8]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d114      	bne.n	80066fe <pbuf_copy+0xe2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066d4:	6823      	ldr	r3, [r4, #0]
 80066d6:	b193      	cbz	r3, 80066fe <pbuf_copy+0xe2>
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <pbuf_copy+0xf8>)
 80066da:	f240 32de 	movw	r2, #990	; 0x3de
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80066de:	4912      	ldr	r1, [pc, #72]	; (8006728 <pbuf_copy+0x10c>)
 80066e0:	480e      	ldr	r0, [pc, #56]	; (800671c <pbuf_copy+0x100>)
 80066e2:	f004 f943 	bl	800a96c <iprintf>
 80066e6:	f06f 0005 	mvn.w	r0, #5
 80066ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } while (p_from);
 80066ee:	2c00      	cmp	r4, #0
 80066f0:	d1b2      	bne.n	8006658 <pbuf_copy+0x3c>
  return ERR_OK;
 80066f2:	4620      	mov	r0, r4
 80066f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 80066f8:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80066fa:	2c00      	cmp	r4, #0
 80066fc:	d1e6      	bne.n	80066cc <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80066fe:	896a      	ldrh	r2, [r5, #10]
 8006700:	892b      	ldrh	r3, [r5, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	d1f3      	bne.n	80066ee <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d0f0      	beq.n	80066ee <pbuf_copy+0xd2>
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <pbuf_copy+0xf8>)
 800670e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8006712:	e7e4      	b.n	80066de <pbuf_copy+0xc2>
 8006714:	0800cb85 	.word	0x0800cb85
 8006718:	0800ca5e 	.word	0x0800ca5e
 800671c:	0800bc05 	.word	0x0800bc05
 8006720:	0800caa5 	.word	0x0800caa5
 8006724:	0800cac0 	.word	0x0800cac0
 8006728:	0800cacd 	.word	0x0800cacd
 800672c:	0800ca8e 	.word	0x0800ca8e

08006730 <pbuf_copy_partial>:
{
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	460f      	mov	r7, r1
 8006736:	4690      	mov	r8, r2
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006738:	4606      	mov	r6, r0
 800673a:	b950      	cbnz	r0, 8006752 <pbuf_copy_partial+0x22>
 800673c:	4b1b      	ldr	r3, [pc, #108]	; (80067ac <pbuf_copy_partial+0x7c>)
 800673e:	491c      	ldr	r1, [pc, #112]	; (80067b0 <pbuf_copy_partial+0x80>)
 8006740:	481c      	ldr	r0, [pc, #112]	; (80067b4 <pbuf_copy_partial+0x84>)
 8006742:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8006746:	f004 f911 	bl	800a96c <iprintf>
 800674a:	4635      	mov	r5, r6
}
 800674c:	4628      	mov	r0, r5
 800674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006752:	b169      	cbz	r1, 8006770 <pbuf_copy_partial+0x40>
 8006754:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006756:	f1b8 0f00 	cmp.w	r8, #0
 800675a:	d0f7      	beq.n	800674c <pbuf_copy_partial+0x1c>
 800675c:	2e00      	cmp	r6, #0
 800675e:	d0f5      	beq.n	800674c <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8006760:	b17b      	cbz	r3, 8006782 <pbuf_copy_partial+0x52>
 8006762:	8971      	ldrh	r1, [r6, #10]
 8006764:	428b      	cmp	r3, r1
 8006766:	d30c      	bcc.n	8006782 <pbuf_copy_partial+0x52>
      offset -= p->len;
 8006768:	1a5b      	subs	r3, r3, r1
 800676a:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800676c:	6836      	ldr	r6, [r6, #0]
 800676e:	e7f2      	b.n	8006756 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006770:	4b0e      	ldr	r3, [pc, #56]	; (80067ac <pbuf_copy_partial+0x7c>)
 8006772:	4911      	ldr	r1, [pc, #68]	; (80067b8 <pbuf_copy_partial+0x88>)
 8006774:	480f      	ldr	r0, [pc, #60]	; (80067b4 <pbuf_copy_partial+0x84>)
 8006776:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800677a:	f004 f8f7 	bl	800a96c <iprintf>
 800677e:	463d      	mov	r5, r7
 8006780:	e7e4      	b.n	800674c <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8006782:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006784:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8006786:	1ae4      	subs	r4, r4, r3
 8006788:	b2a4      	uxth	r4, r4
 800678a:	4544      	cmp	r4, r8
 800678c:	bf28      	it	cs
 800678e:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8006790:	4622      	mov	r2, r4
 8006792:	4419      	add	r1, r3
 8006794:	1978      	adds	r0, r7, r5
      copied_total += buf_copy_len;
 8006796:	4425      	add	r5, r4
      len -= buf_copy_len;
 8006798:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800679c:	f004 f8d3 	bl	800a946 <memcpy>
      copied_total += buf_copy_len;
 80067a0:	b2ad      	uxth	r5, r5
      len -= buf_copy_len;
 80067a2:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e7e0      	b.n	800676c <pbuf_copy_partial+0x3c>
 80067aa:	bf00      	nop
 80067ac:	0800cb85 	.word	0x0800cb85
 80067b0:	0800caf7 	.word	0x0800caf7
 80067b4:	0800bc05 	.word	0x0800bc05
 80067b8:	0800cb16 	.word	0x0800cb16

080067bc <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
 80067bc:	b507      	push	{r0, r1, r2, lr}
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
 80067be:	f10d 0206 	add.w	r2, sp, #6
 80067c2:	f7ff fc7f 	bl	80060c4 <pbuf_skip_const>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80067c6:	b148      	cbz	r0, 80067dc <pbuf_try_get_at+0x20>
 80067c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80067cc:	8942      	ldrh	r2, [r0, #10]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d904      	bls.n	80067dc <pbuf_try_get_at+0x20>
    return ((u8_t*)q->payload)[q_idx];
 80067d2:	6842      	ldr	r2, [r0, #4]
 80067d4:	5cd0      	ldrb	r0, [r2, r3]
  }
  return -1;
}
 80067d6:	b003      	add	sp, #12
 80067d8:	f85d fb04 	ldr.w	pc, [sp], #4
  return -1;
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e7f9      	b.n	80067d6 <pbuf_try_get_at+0x1a>

080067e2 <pbuf_get_at>:
{
 80067e2:	b508      	push	{r3, lr}
  int ret = pbuf_try_get_at(p, offset);
 80067e4:	f7ff ffea 	bl	80067bc <pbuf_try_get_at>
 80067e8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80067ec:	b2c0      	uxtb	r0, r0
 80067ee:	bd08      	pop	{r3, pc}

080067f0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80067f0:	4a11      	ldr	r2, [pc, #68]	; (8006838 <tcp_new_port+0x48>)
 80067f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f4:	8810      	ldrh	r0, [r2, #0]
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80067f6:	4e11      	ldr	r6, [pc, #68]	; (800683c <tcp_new_port+0x4c>)
{
 80067f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 80067fc:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006800:	42a8      	cmp	r0, r5
 8006802:	bf1a      	itte	ne
 8006804:	3001      	addne	r0, #1
 8006806:	b280      	uxthne	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006808:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
 800680c:	2100      	movs	r1, #0
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800680e:	f856 4021 	ldr.w	r4, [r6, r1, lsl #2]
 8006812:	6824      	ldr	r4, [r4, #0]
 8006814:	b924      	cbnz	r4, 8006820 <tcp_new_port+0x30>
 8006816:	3101      	adds	r1, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006818:	2904      	cmp	r1, #4
 800681a:	d1f8      	bne.n	800680e <tcp_new_port+0x1e>
 800681c:	8010      	strh	r0, [r2, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800681e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pcb->local_port == tcp_port) {
 8006820:	8ae7      	ldrh	r7, [r4, #22]
 8006822:	4287      	cmp	r7, r0
 8006824:	d106      	bne.n	8006834 <tcp_new_port+0x44>
 8006826:	3b01      	subs	r3, #1
 8006828:	b29b      	uxth	r3, r3
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e8      	bne.n	8006800 <tcp_new_port+0x10>
 800682e:	8010      	strh	r0, [r2, #0]
          return 0;
 8006830:	4618      	mov	r0, r3
 8006832:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006834:	68e4      	ldr	r4, [r4, #12]
 8006836:	e7ed      	b.n	8006814 <tcp_new_port+0x24>
 8006838:	20000010 	.word	0x20000010
 800683c:	0800cd8c 	.word	0x0800cd8c

08006840 <tcp_close_shutdown_fin>:
{
 8006840:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006842:	4604      	mov	r4, r0
 8006844:	b930      	cbnz	r0, 8006854 <tcp_close_shutdown_fin+0x14>
 8006846:	4b13      	ldr	r3, [pc, #76]	; (8006894 <tcp_close_shutdown_fin+0x54>)
 8006848:	4913      	ldr	r1, [pc, #76]	; (8006898 <tcp_close_shutdown_fin+0x58>)
 800684a:	4814      	ldr	r0, [pc, #80]	; (800689c <tcp_close_shutdown_fin+0x5c>)
 800684c:	f240 124d 	movw	r2, #333	; 0x14d
 8006850:	f004 f88c 	bl	800a96c <iprintf>
  switch (pcb->state) {
 8006854:	7d23      	ldrb	r3, [r4, #20]
 8006856:	2b04      	cmp	r3, #4
 8006858:	d003      	beq.n	8006862 <tcp_close_shutdown_fin+0x22>
 800685a:	2b07      	cmp	r3, #7
 800685c:	d00c      	beq.n	8006878 <tcp_close_shutdown_fin+0x38>
 800685e:	2b03      	cmp	r3, #3
 8006860:	d108      	bne.n	8006874 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 8006862:	4620      	mov	r0, r4
 8006864:	f002 fb4c 	bl	8008f00 <tcp_send_fin>
    if (err == ERR_OK) {
 8006868:	b988      	cbnz	r0, 800688e <tcp_close_shutdown_fin+0x4e>
      pcb->state = FIN_WAIT_1;
 800686a:	2305      	movs	r3, #5
      pcb->state = LAST_ACK;
 800686c:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800686e:	4620      	mov	r0, r4
 8006870:	f002 fb9e 	bl	8008fb0 <tcp_output>
 8006874:	2000      	movs	r0, #0
 8006876:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8006878:	4620      	mov	r0, r4
 800687a:	f002 fb41 	bl	8008f00 <tcp_send_fin>
    if (err == ERR_OK) {
 800687e:	b930      	cbnz	r0, 800688e <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 8006880:	2309      	movs	r3, #9
 8006882:	e7f3      	b.n	800686c <tcp_close_shutdown_fin+0x2c>
    pcb->flags |= TF_CLOSEPEND;
 8006884:	7ea3      	ldrb	r3, [r4, #26]
 8006886:	f043 0308 	orr.w	r3, r3, #8
 800688a:	76a3      	strb	r3, [r4, #26]
 800688c:	e7f2      	b.n	8006874 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	d0f8      	beq.n	8006884 <tcp_close_shutdown_fin+0x44>
}
 8006892:	bd10      	pop	{r4, pc}
 8006894:	0800ccea 	.word	0x0800ccea
 8006898:	0800cd19 	.word	0x0800cd19
 800689c:	0800bc05 	.word	0x0800bc05

080068a0 <tcp_init>:
{
 80068a0:	4770      	bx	lr
	...

080068a4 <tcp_bind>:
{
 80068a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 80068a6:	4d1e      	ldr	r5, [pc, #120]	; (8006920 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80068a8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 80068aa:	2900      	cmp	r1, #0
 80068ac:	bf18      	it	ne
 80068ae:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80068b0:	b140      	cbz	r0, 80068c4 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80068b2:	7d03      	ldrb	r3, [r0, #20]
 80068b4:	b14b      	cbz	r3, 80068ca <tcp_bind+0x26>
 80068b6:	4b1b      	ldr	r3, [pc, #108]	; (8006924 <tcp_bind+0x80>)
 80068b8:	491b      	ldr	r1, [pc, #108]	; (8006928 <tcp_bind+0x84>)
 80068ba:	481c      	ldr	r0, [pc, #112]	; (800692c <tcp_bind+0x88>)
 80068bc:	f44f 7211 	mov.w	r2, #580	; 0x244
 80068c0:	f004 f854 	bl	800a96c <iprintf>
    return ERR_VAL;
 80068c4:	f06f 0005 	mvn.w	r0, #5
}
 80068c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (port == 0) {
 80068ca:	b932      	cbnz	r2, 80068da <tcp_bind+0x36>
    port = tcp_new_port();
 80068cc:	f7ff ff90 	bl	80067f0 <tcp_new_port>
    if (port == 0) {
 80068d0:	4602      	mov	r2, r0
 80068d2:	b950      	cbnz	r0, 80068ea <tcp_bind+0x46>
      return ERR_BUF;
 80068d4:	f06f 0001 	mvn.w	r0, #1
 80068d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80068da:	4f15      	ldr	r7, [pc, #84]	; (8006930 <tcp_bind+0x8c>)
 80068dc:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 80068e0:	6808      	ldr	r0, [r1, #0]
 80068e2:	b970      	cbnz	r0, 8006902 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 80068e4:	3301      	adds	r3, #1
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d1f8      	bne.n	80068dc <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	b103      	cbz	r3, 80068f0 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80068ee:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <tcp_bind+0x90>)
  pcb->local_port = port;
 80068f2:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	60e2      	str	r2, [r4, #12]
 80068f8:	601c      	str	r4, [r3, #0]
 80068fa:	f002 fe79 	bl	80095f0 <tcp_timer_needed>
  return ERR_OK;
 80068fe:	2000      	movs	r0, #0
 8006900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 8006902:	8ac1      	ldrh	r1, [r0, #22]
 8006904:	4291      	cmp	r1, r2
 8006906:	d105      	bne.n	8006914 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006908:	6806      	ldr	r6, [r0, #0]
 800690a:	b12e      	cbz	r6, 8006918 <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 800690c:	6829      	ldr	r1, [r5, #0]
 800690e:	b119      	cbz	r1, 8006918 <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006910:	428e      	cmp	r6, r1
 8006912:	d001      	beq.n	8006918 <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006914:	68c0      	ldr	r0, [r0, #12]
 8006916:	e7e4      	b.n	80068e2 <tcp_bind+0x3e>
              return ERR_USE;
 8006918:	f06f 0007 	mvn.w	r0, #7
 800691c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691e:	bf00      	nop
 8006920:	0800c3e0 	.word	0x0800c3e0
 8006924:	0800ccea 	.word	0x0800ccea
 8006928:	0800cca9 	.word	0x0800cca9
 800692c:	0800bc05 	.word	0x0800bc05
 8006930:	0800cd8c 	.word	0x0800cd8c
 8006934:	2000d930 	.word	0x2000d930

08006938 <tcp_update_rcv_ann_wnd>:
{
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4604      	mov	r4, r0
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800693c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800693e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006940:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006942:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006944:	f240 56b4 	movw	r6, #1460	; 0x5b4
 8006948:	1ac8      	subs	r0, r1, r3
 800694a:	42b2      	cmp	r2, r6
 800694c:	4428      	add	r0, r5
 800694e:	bf94      	ite	ls
 8006950:	1a82      	subls	r2, r0, r2
 8006952:	1b82      	subhi	r2, r0, r6
 8006954:	2a00      	cmp	r2, #0
 8006956:	db01      	blt.n	800695c <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006958:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800695a:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800695c:	1aea      	subs	r2, r5, r3
 800695e:	2a00      	cmp	r2, #0
 8006960:	dd02      	ble.n	8006968 <tcp_update_rcv_ann_wnd+0x30>
      pcb->rcv_ann_wnd = 0;
 8006962:	2000      	movs	r0, #0
 8006964:	8560      	strh	r0, [r4, #42]	; 0x2a
 8006966:	bd70      	pop	{r4, r5, r6, pc}
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006968:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800696a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800696e:	d306      	bcc.n	800697e <tcp_update_rcv_ann_wnd+0x46>
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <tcp_update_rcv_ann_wnd+0x4c>)
 8006972:	4905      	ldr	r1, [pc, #20]	; (8006988 <tcp_update_rcv_ann_wnd+0x50>)
 8006974:	4805      	ldr	r0, [pc, #20]	; (800698c <tcp_update_rcv_ann_wnd+0x54>)
 8006976:	f44f 7242 	mov.w	r2, #776	; 0x308
 800697a:	f003 fff7 	bl	800a96c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800697e:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8006980:	2000      	movs	r0, #0
}
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	0800ccea 	.word	0x0800ccea
 8006988:	0800cfd9 	.word	0x0800cfd9
 800698c:	0800bc05 	.word	0x0800bc05

08006990 <tcp_recved>:
{
 8006990:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006992:	7d03      	ldrb	r3, [r0, #20]
 8006994:	2b01      	cmp	r3, #1
{
 8006996:	4604      	mov	r4, r0
 8006998:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800699a:	d106      	bne.n	80069aa <tcp_recved+0x1a>
 800699c:	4b18      	ldr	r3, [pc, #96]	; (8006a00 <tcp_recved+0x70>)
 800699e:	4919      	ldr	r1, [pc, #100]	; (8006a04 <tcp_recved+0x74>)
 80069a0:	4819      	ldr	r0, [pc, #100]	; (8006a08 <tcp_recved+0x78>)
 80069a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80069a6:	f003 ffe1 	bl	800a96c <iprintf>
  pcb->rcv_wnd += len;
 80069aa:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80069ac:	4429      	add	r1, r5
 80069ae:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80069b0:	f640 3368 	movw	r3, #2920	; 0xb68
 80069b4:	4299      	cmp	r1, r3
  pcb->rcv_wnd += len;
 80069b6:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80069b8:	d911      	bls.n	80069de <tcp_recved+0x4e>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80069ba:	f640 3368 	movw	r3, #2920	; 0xb68
 80069be:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80069c0:	4620      	mov	r0, r4
 80069c2:	f7ff ffb9 	bl	8006938 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80069c6:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80069ca:	db17      	blt.n	80069fc <tcp_recved+0x6c>
    tcp_ack_now(pcb);
 80069cc:	7ea3      	ldrb	r3, [r4, #26]
 80069ce:	f043 0302 	orr.w	r3, r3, #2
 80069d2:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 80069d4:	4620      	mov	r0, r4
}
 80069d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80069da:	f002 bae9 	b.w	8008fb0 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 80069de:	2900      	cmp	r1, #0
 80069e0:	d1ee      	bne.n	80069c0 <tcp_recved+0x30>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80069e2:	7d23      	ldrb	r3, [r4, #20]
 80069e4:	2b07      	cmp	r3, #7
 80069e6:	d0e8      	beq.n	80069ba <tcp_recved+0x2a>
 80069e8:	2b09      	cmp	r3, #9
 80069ea:	d0e6      	beq.n	80069ba <tcp_recved+0x2a>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <tcp_recved+0x70>)
 80069ee:	4907      	ldr	r1, [pc, #28]	; (8006a0c <tcp_recved+0x7c>)
 80069f0:	4805      	ldr	r0, [pc, #20]	; (8006a08 <tcp_recved+0x78>)
 80069f2:	f240 322d 	movw	r2, #813	; 0x32d
 80069f6:	f003 ffb9 	bl	800a96c <iprintf>
 80069fa:	e7e1      	b.n	80069c0 <tcp_recved+0x30>
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	0800ccea 	.word	0x0800ccea
 8006a04:	0800ce19 	.word	0x0800ce19
 8006a08:	0800bc05 	.word	0x0800bc05
 8006a0c:	0800ce3f 	.word	0x0800ce3f

08006a10 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006a10:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8006a12:	4604      	mov	r4, r0
 8006a14:	b148      	cbz	r0, 8006a2a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8006a16:	6840      	ldr	r0, [r0, #4]
 8006a18:	b108      	cbz	r0, 8006a1e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8006a1a:	f7ff fbeb 	bl	80061f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006a1e:	4621      	mov	r1, r4
 8006a20:	2003      	movs	r0, #3
  }
}
 8006a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8006a26:	f7ff ba8b 	b.w	8005f40 <memp_free>
 8006a2a:	bd10      	pop	{r4, pc}

08006a2c <tcp_segs_free>:
{
 8006a2c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8006a2e:	b900      	cbnz	r0, 8006a32 <tcp_segs_free+0x6>
}
 8006a30:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8006a32:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8006a34:	f7ff ffec 	bl	8006a10 <tcp_seg_free>
    seg = next;
 8006a38:	4620      	mov	r0, r4
 8006a3a:	e7f8      	b.n	8006a2e <tcp_segs_free+0x2>

08006a3c <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006a3c:	b100      	cbz	r0, 8006a40 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8006a3e:	6101      	str	r1, [r0, #16]
 8006a40:	4770      	bx	lr
	...

08006a44 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006a48:	4604      	mov	r4, r0
 8006a4a:	b150      	cbz	r0, 8006a62 <tcp_recv+0x1e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006a4c:	7d03      	ldrb	r3, [r0, #20]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d106      	bne.n	8006a60 <tcp_recv+0x1c>
 8006a52:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <tcp_recv+0x20>)
 8006a54:	4904      	ldr	r1, [pc, #16]	; (8006a68 <tcp_recv+0x24>)
 8006a56:	4805      	ldr	r0, [pc, #20]	; (8006a6c <tcp_recv+0x28>)
 8006a58:	f240 62bb 	movw	r2, #1723	; 0x6bb
 8006a5c:	f003 ff86 	bl	800a96c <iprintf>
    pcb->recv = recv;
 8006a60:	67e5      	str	r5, [r4, #124]	; 0x7c
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	0800ccea 	.word	0x0800ccea
 8006a68:	0800cdf2 	.word	0x0800cdf2
 8006a6c:	0800bc05 	.word	0x0800bc05

08006a70 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006a74:	4604      	mov	r4, r0
 8006a76:	b150      	cbz	r0, 8006a8e <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006a78:	7d03      	ldrb	r3, [r0, #20]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d106      	bne.n	8006a8c <tcp_sent+0x1c>
 8006a7e:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <tcp_sent+0x20>)
 8006a80:	4904      	ldr	r1, [pc, #16]	; (8006a94 <tcp_sent+0x24>)
 8006a82:	4805      	ldr	r0, [pc, #20]	; (8006a98 <tcp_sent+0x28>)
 8006a84:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8006a88:	f003 ff70 	bl	800a96c <iprintf>
    pcb->sent = sent;
 8006a8c:	67a5      	str	r5, [r4, #120]	; 0x78
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	0800ccea 	.word	0x0800ccea
 8006a94:	0800ce60 	.word	0x0800ce60
 8006a98:	0800bc05 	.word	0x0800bc05

08006a9c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	460d      	mov	r5, r1
  if (pcb != NULL) {
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	b158      	cbz	r0, 8006abc <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8006aa4:	7d03      	ldrb	r3, [r0, #20]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d106      	bne.n	8006ab8 <tcp_err+0x1c>
 8006aaa:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <tcp_err+0x24>)
 8006aac:	4905      	ldr	r1, [pc, #20]	; (8006ac4 <tcp_err+0x28>)
 8006aae:	4806      	ldr	r0, [pc, #24]	; (8006ac8 <tcp_err+0x2c>)
 8006ab0:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8006ab4:	f003 ff5a 	bl	800a96c <iprintf>
    pcb->errf = err;
 8006ab8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
 8006abe:	bf00      	nop
 8006ac0:	0800ccea 	.word	0x0800ccea
 8006ac4:	0800cd55 	.word	0x0800cd55
 8006ac8:	0800bc05 	.word	0x0800bc05

08006acc <tcp_poll>:
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006acc:	7d03      	ldrb	r3, [r0, #20]
 8006ace:	2b01      	cmp	r3, #1
{
 8006ad0:	b570      	push	{r4, r5, r6, lr}
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	460e      	mov	r6, r1
 8006ad6:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006ad8:	d106      	bne.n	8006ae8 <tcp_poll+0x1c>
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <tcp_poll+0x24>)
 8006adc:	4905      	ldr	r1, [pc, #20]	; (8006af4 <tcp_poll+0x28>)
 8006ade:	4806      	ldr	r0, [pc, #24]	; (8006af8 <tcp_poll+0x2c>)
 8006ae0:	f240 7203 	movw	r2, #1795	; 0x703
 8006ae4:	f003 ff42 	bl	800a96c <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006ae8:	7725      	strb	r5, [r4, #28]
  pcb->poll = poll;
 8006aea:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
  pcb->pollinterval = interval;
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	0800ccea 	.word	0x0800ccea
 8006af4:	0800cdd4 	.word	0x0800cdd4
 8006af8:	0800bc05 	.word	0x0800bc05

08006afc <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  if (pcb->state != CLOSED &&
 8006afc:	7d03      	ldrb	r3, [r0, #20]
 8006afe:	2b01      	cmp	r3, #1
{
 8006b00:	b510      	push	{r4, lr}
 8006b02:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8006b04:	d915      	bls.n	8006b32 <tcp_pcb_purge+0x36>
 8006b06:	2b0a      	cmp	r3, #10
 8006b08:	d013      	beq.n	8006b32 <tcp_pcb_purge+0x36>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006b0a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8006b0c:	b118      	cbz	r0, 8006b16 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006b0e:	f7ff fb71 	bl	80061f4 <pbuf_free>
      pcb->refused_data = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b1a:	8623      	strh	r3, [r4, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006b1c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006b1e:	f7ff ff85 	bl	8006a2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006b22:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006b24:	f7ff ff82 	bl	8006a2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	66a3      	str	r3, [r4, #104]	; 0x68
 8006b2c:	66e3      	str	r3, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006b2e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8006b32:	bd10      	pop	{r4, pc}

08006b34 <tcp_slowtmr>:
{
 8006b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8006b38:	4eb8      	ldr	r6, [pc, #736]	; (8006e1c <tcp_slowtmr+0x2e8>)
      tcp_active_pcbs_changed = 0;
 8006b3a:	f8df a314 	ldr.w	sl, [pc, #788]	; 8006e50 <tcp_slowtmr+0x31c>
  ++tcp_ticks;
 8006b3e:	6833      	ldr	r3, [r6, #0]
 8006b40:	3301      	adds	r3, #1
 8006b42:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8006b44:	4bb6      	ldr	r3, [pc, #728]	; (8006e20 <tcp_slowtmr+0x2ec>)
 8006b46:	781a      	ldrb	r2, [r3, #0]
{
 8006b48:	b085      	sub	sp, #20
  ++tcp_timer_ctr;
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	9302      	str	r3, [sp, #8]
  pcb = tcp_active_pcbs;
 8006b50:	4fb4      	ldr	r7, [pc, #720]	; (8006e24 <tcp_slowtmr+0x2f0>)
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006b52:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8006e54 <tcp_slowtmr+0x320>
  pcb = tcp_active_pcbs;
 8006b56:	683c      	ldr	r4, [r7, #0]
  prev = NULL;
 8006b58:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8006b5c:	b96c      	cbnz	r4, 8006b7a <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8006b5e:	4fb2      	ldr	r7, [pc, #712]	; (8006e28 <tcp_slowtmr+0x2f4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b60:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8006e54 <tcp_slowtmr+0x320>
  pcb = tcp_tw_pcbs;
 8006b64:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b66:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8006e58 <tcp_slowtmr+0x324>
 8006b6a:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 8006e30 <tcp_slowtmr+0x2fc>
  while (pcb != NULL) {
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	f040 8174 	bne.w	8006e5c <tcp_slowtmr+0x328>
}
 8006b74:	b005      	add	sp, #20
 8006b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006b7a:	7d23      	ldrb	r3, [r4, #20]
 8006b7c:	b933      	cbnz	r3, 8006b8c <tcp_slowtmr+0x58>
 8006b7e:	464b      	mov	r3, r9
 8006b80:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8006b84:	49a9      	ldr	r1, [pc, #676]	; (8006e2c <tcp_slowtmr+0x2f8>)
 8006b86:	48aa      	ldr	r0, [pc, #680]	; (8006e30 <tcp_slowtmr+0x2fc>)
 8006b88:	f003 fef0 	bl	800a96c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006b8c:	7d23      	ldrb	r3, [r4, #20]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d106      	bne.n	8006ba0 <tcp_slowtmr+0x6c>
 8006b92:	464b      	mov	r3, r9
 8006b94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006b98:	49a6      	ldr	r1, [pc, #664]	; (8006e34 <tcp_slowtmr+0x300>)
 8006b9a:	48a5      	ldr	r0, [pc, #660]	; (8006e30 <tcp_slowtmr+0x2fc>)
 8006b9c:	f003 fee6 	bl	800a96c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006ba0:	7d23      	ldrb	r3, [r4, #20]
 8006ba2:	2b0a      	cmp	r3, #10
 8006ba4:	d106      	bne.n	8006bb4 <tcp_slowtmr+0x80>
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8006bac:	49a2      	ldr	r1, [pc, #648]	; (8006e38 <tcp_slowtmr+0x304>)
 8006bae:	48a0      	ldr	r0, [pc, #640]	; (8006e30 <tcp_slowtmr+0x2fc>)
 8006bb0:	f003 fedc 	bl	800a96c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	7f62      	ldrb	r2, [r4, #29]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d104      	bne.n	8006bc8 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8006bbe:	68e5      	ldr	r5, [r4, #12]
 8006bc0:	4644      	mov	r4, r8
      continue;
 8006bc2:	46a0      	mov	r8, r4
 8006bc4:	462c      	mov	r4, r5
 8006bc6:	e7c9      	b.n	8006b5c <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006bc8:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8006bca:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006bcc:	2902      	cmp	r1, #2
 8006bce:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8006bd2:	d102      	bne.n	8006bda <tcp_slowtmr+0xa6>
 8006bd4:	2a05      	cmp	r2, #5
 8006bd6:	f200 80d4 	bhi.w	8006d82 <tcp_slowtmr+0x24e>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8006bda:	2a0b      	cmp	r2, #11
 8006bdc:	f200 80d1 	bhi.w	8006d82 <tcp_slowtmr+0x24e>
      if (pcb->persist_backoff > 0) {
 8006be0:	f894 b091 	ldrb.w	fp, [r4, #145]	; 0x91
 8006be4:	f1bb 0f00 	cmp.w	fp, #0
 8006be8:	f000 8094 	beq.w	8006d14 <tcp_slowtmr+0x1e0>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006bec:	4893      	ldr	r0, [pc, #588]	; (8006e3c <tcp_slowtmr+0x308>)
        if (pcb->persist_cnt < backoff_cnt) {
 8006bee:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8006bf2:	4483      	add	fp, r0
 8006bf4:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8006bf8:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 8006bfa:	bf84      	itt	hi
 8006bfc:	3301      	addhi	r3, #1
 8006bfe:	f884 3090 	strbhi.w	r3, [r4, #144]	; 0x90
        if (pcb->persist_cnt >= backoff_cnt) {
 8006c02:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d274      	bcs.n	8006cf4 <tcp_slowtmr+0x1c0>
    pcb_remove = 0;
 8006c0a:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8006c0e:	7d23      	ldrb	r3, [r4, #20]
 8006c10:	2b06      	cmp	r3, #6
 8006c12:	d10b      	bne.n	8006c2c <tcp_slowtmr+0xf8>
      if (pcb->flags & TF_RXCLOSED) {
 8006c14:	7ea2      	ldrb	r2, [r4, #26]
 8006c16:	06d2      	lsls	r2, r2, #27
 8006c18:	d508      	bpl.n	8006c2c <tcp_slowtmr+0xf8>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c1a:	6832      	ldr	r2, [r6, #0]
 8006c1c:	6a21      	ldr	r1, [r4, #32]
 8006c1e:	1a52      	subs	r2, r2, r1
 8006c20:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8006c22:	bf84      	itt	hi
 8006c24:	f10b 0b01 	addhi.w	fp, fp, #1
 8006c28:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006c2c:	7a25      	ldrb	r5, [r4, #8]
 8006c2e:	f015 0508 	ands.w	r5, r5, #8
 8006c32:	d019      	beq.n	8006c68 <tcp_slowtmr+0x134>
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d002      	beq.n	8006c3e <tcp_slowtmr+0x10a>
       ((pcb->state == ESTABLISHED) ||
 8006c38:	2b07      	cmp	r3, #7
 8006c3a:	f040 80b7 	bne.w	8006dac <tcp_slowtmr+0x278>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006c42:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c46:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8006c48:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
 8006c4c:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 8006c50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c54:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c58:	4291      	cmp	r1, r2
 8006c5a:	f240 8095 	bls.w	8006d88 <tcp_slowtmr+0x254>
        ++pcb_remove;
 8006c5e:	f10b 0b01 	add.w	fp, fp, #1
 8006c62:	fa5f fb8b 	uxtb.w	fp, fp
        ++pcb_reset;
 8006c66:	2501      	movs	r5, #1
    if (pcb->state == SYN_RCVD) {
 8006c68:	7d23      	ldrb	r3, [r4, #20]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	f040 80a0 	bne.w	8006db0 <tcp_slowtmr+0x27c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c70:	6833      	ldr	r3, [r6, #0]
 8006c72:	6a22      	ldr	r2, [r4, #32]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006c78:	d803      	bhi.n	8006c82 <tcp_slowtmr+0x14e>
    if (pcb_remove) {
 8006c7a:	f1bb 0f00 	cmp.w	fp, #0
 8006c7e:	f000 80ab 	beq.w	8006dd8 <tcp_slowtmr+0x2a4>
      tcp_pcb_purge(pcb);
 8006c82:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8006c84:	f8d4 b088 	ldr.w	fp, [r4, #136]	; 0x88
      tcp_pcb_purge(pcb);
 8006c88:	f7ff ff38 	bl	8006afc <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006c8c:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8006c8e:	f1b8 0f00 	cmp.w	r8, #0
 8006c92:	f000 8095 	beq.w	8006dc0 <tcp_slowtmr+0x28c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006c96:	429c      	cmp	r4, r3
 8006c98:	d106      	bne.n	8006ca8 <tcp_slowtmr+0x174>
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	f240 4289 	movw	r2, #1161	; 0x489
 8006ca0:	4967      	ldr	r1, [pc, #412]	; (8006e40 <tcp_slowtmr+0x30c>)
 8006ca2:	4863      	ldr	r0, [pc, #396]	; (8006e30 <tcp_slowtmr+0x2fc>)
 8006ca4:	f003 fe62 	bl	800a96c <iprintf>
        prev->next = pcb->next;
 8006ca8:	68e3      	ldr	r3, [r4, #12]
 8006caa:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8006cae:	b14d      	cbz	r5, 8006cc4 <tcp_slowtmr+0x190>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006cb0:	8b23      	ldrh	r3, [r4, #24]
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	8ae3      	ldrh	r3, [r4, #22]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4622      	mov	r2, r4
 8006cba:	1d23      	adds	r3, r4, #4
 8006cbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cbe:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006cc0:	f002 faf4 	bl	80092ac <tcp_rst>
      err_arg = pcb->callback_arg;
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006cc8:	4621      	mov	r1, r4
 8006cca:	2001      	movs	r0, #1
      pcb = pcb->next;
 8006ccc:	68e5      	ldr	r5, [r4, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006cce:	f7ff f937 	bl	8005f40 <memp_free>
      tcp_active_pcbs_changed = 0;
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006cd8:	f1bb 0f00 	cmp.w	fp, #0
 8006cdc:	d004      	beq.n	8006ce8 <tcp_slowtmr+0x1b4>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	f06f 010c 	mvn.w	r1, #12
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8006ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f43f af67 	beq.w	8006bc0 <tcp_slowtmr+0x8c>
 8006cf2:	e72d      	b.n	8006b50 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f002 fbc9 	bl	800948c <tcp_zero_window_probe>
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d185      	bne.n	8006c0a <tcp_slowtmr+0xd6>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006cfe:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
            pcb->persist_cnt = 0;
 8006d02:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006d06:	2b06      	cmp	r3, #6
 8006d08:	f63f af7f 	bhi.w	8006c0a <tcp_slowtmr+0xd6>
              pcb->persist_backoff++;
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
 8006d12:	e77a      	b.n	8006c0a <tcp_slowtmr+0xd6>
        if (pcb->rtime >= 0) {
 8006d14:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8006d18:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8006d1a:	bfa4      	itt	ge
 8006d1c:	3301      	addge	r3, #1
 8006d1e:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8006d20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f43f af71 	beq.w	8006c0a <tcp_slowtmr+0xd6>
 8006d28:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8006d2c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8006d30:	4298      	cmp	r0, r3
 8006d32:	f6ff af6a 	blt.w	8006c0a <tcp_slowtmr+0xd6>
          if (pcb->state != SYN_SENT) {
 8006d36:	2902      	cmp	r1, #2
 8006d38:	d00a      	beq.n	8006d50 <tcp_slowtmr+0x21c>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006d3a:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8006d3e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8006d42:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8006d46:	493f      	ldr	r1, [pc, #252]	; (8006e44 <tcp_slowtmr+0x310>)
 8006d48:	5c8a      	ldrb	r2, [r1, r2]
 8006d4a:	4093      	lsls	r3, r2
 8006d4c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8006d50:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006d52:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          pcb->rtime = 0;
 8006d56:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006d58:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d5c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->cwnd = pcb->mss;
 8006d5e:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8006d62:	4293      	cmp	r3, r2
 8006d64:	bf28      	it	cs
 8006d66:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d68:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8006d6a:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	4293      	cmp	r3, r2
          pcb->ssthresh = eff_wnd >> 1;
 8006d70:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006d74:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 8006d76:	bf38      	it	cc
 8006d78:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8006d7c:	f002 faf0 	bl	8009360 <tcp_rexmit_rto>
 8006d80:	e745      	b.n	8006c0e <tcp_slowtmr+0xda>
      ++pcb_remove;
 8006d82:	f04f 0b01 	mov.w	fp, #1
 8006d86:	e742      	b.n	8006c0e <tcp_slowtmr+0xda>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006d88:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	; (8006e48 <tcp_slowtmr+0x314>)
 8006d8e:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8006d92:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d96:	4299      	cmp	r1, r3
 8006d98:	d908      	bls.n	8006dac <tcp_slowtmr+0x278>
        err = tcp_keepalive(pcb);
 8006d9a:	4620      	mov	r0, r4
 8006d9c:	f002 fb4c 	bl	8009438 <tcp_keepalive>
        if (err == ERR_OK) {
 8006da0:	b920      	cbnz	r0, 8006dac <tcp_slowtmr+0x278>
          pcb->keep_cnt_sent++;
 8006da2:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8006da6:	3301      	adds	r3, #1
 8006da8:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
    pcb_reset = 0;
 8006dac:	2500      	movs	r5, #0
 8006dae:	e75b      	b.n	8006c68 <tcp_slowtmr+0x134>
    if (pcb->state == LAST_ACK) {
 8006db0:	2b09      	cmp	r3, #9
 8006db2:	f47f af62 	bne.w	8006c7a <tcp_slowtmr+0x146>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006db6:	6833      	ldr	r3, [r6, #0]
 8006db8:	6a22      	ldr	r2, [r4, #32]
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	2bf0      	cmp	r3, #240	; 0xf0
 8006dbe:	e75b      	b.n	8006c78 <tcp_slowtmr+0x144>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	d006      	beq.n	8006dd2 <tcp_slowtmr+0x29e>
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	f240 428d 	movw	r2, #1165	; 0x48d
 8006dca:	4920      	ldr	r1, [pc, #128]	; (8006e4c <tcp_slowtmr+0x318>)
 8006dcc:	4818      	ldr	r0, [pc, #96]	; (8006e30 <tcp_slowtmr+0x2fc>)
 8006dce:	f003 fdcd 	bl	800a96c <iprintf>
        tcp_active_pcbs = pcb->next;
 8006dd2:	68e3      	ldr	r3, [r4, #12]
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	e76a      	b.n	8006cae <tcp_slowtmr+0x17a>
      ++prev->polltmr;
 8006dd8:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006dda:	7f22      	ldrb	r2, [r4, #28]
      pcb = pcb->next;
 8006ddc:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8006dde:	3301      	adds	r3, #1
 8006de0:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8006de2:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8006de4:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006de6:	f63f aeec 	bhi.w	8006bc2 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006dea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
        prev->polltmr = 0;
 8006dee:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8006df2:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8006df6:	b173      	cbz	r3, 8006e16 <tcp_slowtmr+0x2e2>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	6920      	ldr	r0, [r4, #16]
 8006dfc:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8006dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f aea4 	bne.w	8006b50 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	f47f aeda 	bne.w	8006bc2 <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f002 f8ce 	bl	8008fb0 <tcp_output>
 8006e14:	e6d5      	b.n	8006bc2 <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8006e16:	4658      	mov	r0, fp
 8006e18:	e7f1      	b.n	8006dfe <tcp_slowtmr+0x2ca>
 8006e1a:	bf00      	nop
 8006e1c:	2000d928 	.word	0x2000d928
 8006e20:	2000532e 	.word	0x2000532e
 8006e24:	2000d924 	.word	0x2000d924
 8006e28:	2000d934 	.word	0x2000d934
 8006e2c:	0800ce87 	.word	0x0800ce87
 8006e30:	0800bc05 	.word	0x0800bc05
 8006e34:	0800ceb1 	.word	0x0800ceb1
 8006e38:	0800cedb 	.word	0x0800cedb
 8006e3c:	0800cdcd 	.word	0x0800cdcd
 8006e40:	0800cf08 	.word	0x0800cf08
 8006e44:	0800cc9c 	.word	0x0800cc9c
 8006e48:	000124f8 	.word	0x000124f8
 8006e4c:	0800cf33 	.word	0x0800cf33
 8006e50:	2000d920 	.word	0x2000d920
 8006e54:	0800ccea 	.word	0x0800ccea
 8006e58:	0800cf5d 	.word	0x0800cf5d
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006e5c:	7d2b      	ldrb	r3, [r5, #20]
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d006      	beq.n	8006e70 <tcp_slowtmr+0x33c>
 8006e62:	4643      	mov	r3, r8
 8006e64:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006e68:	4651      	mov	r1, sl
 8006e6a:	4648      	mov	r0, r9
 8006e6c:	f003 fd7e 	bl	800a96c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e70:	6833      	ldr	r3, [r6, #0]
 8006e72:	6a2a      	ldr	r2, [r5, #32]
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	2bf0      	cmp	r3, #240	; 0xf0
 8006e78:	d816      	bhi.n	8006ea8 <tcp_slowtmr+0x374>
      pcb = pcb->next;
 8006e7a:	462c      	mov	r4, r5
 8006e7c:	68ed      	ldr	r5, [r5, #12]
 8006e7e:	e676      	b.n	8006b6e <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	429d      	cmp	r5, r3
 8006e84:	d106      	bne.n	8006e94 <tcp_slowtmr+0x360>
 8006e86:	4643      	mov	r3, r8
 8006e88:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006e8c:	490f      	ldr	r1, [pc, #60]	; (8006ecc <tcp_slowtmr+0x398>)
 8006e8e:	4648      	mov	r0, r9
 8006e90:	f003 fd6c 	bl	800a96c <iprintf>
        prev->next = pcb->next;
 8006e94:	68eb      	ldr	r3, [r5, #12]
 8006e96:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8006e98:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f7ff f84e 	bl	8005f40 <memp_free>
      pcb = pcb->next;
 8006ea4:	465d      	mov	r5, fp
 8006ea6:	e662      	b.n	8006b6e <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7ff fe27 	bl	8006afc <tcp_pcb_purge>
      if (prev != NULL) {
 8006eae:	2c00      	cmp	r4, #0
 8006eb0:	d1e6      	bne.n	8006e80 <tcp_slowtmr+0x34c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	429d      	cmp	r5, r3
 8006eb6:	d006      	beq.n	8006ec6 <tcp_slowtmr+0x392>
 8006eb8:	4643      	mov	r3, r8
 8006eba:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8006ebe:	4904      	ldr	r1, [pc, #16]	; (8006ed0 <tcp_slowtmr+0x39c>)
 8006ec0:	4648      	mov	r0, r9
 8006ec2:	f003 fd53 	bl	800a96c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006ec6:	68eb      	ldr	r3, [r5, #12]
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	e7e5      	b.n	8006e98 <tcp_slowtmr+0x364>
 8006ecc:	0800cf8c 	.word	0x0800cf8c
 8006ed0:	0800cfb3 	.word	0x0800cfb3

08006ed4 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8006ed4:	6803      	ldr	r3, [r0, #0]
 8006ed6:	428b      	cmp	r3, r1
{
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8006edc:	d12e      	bne.n	8006f3c <tcp_pcb_remove+0x68>
 8006ede:	68cb      	ldr	r3, [r1, #12]
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60e3      	str	r3, [r4, #12]

  tcp_pcb_purge(pcb);
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f7ff fe08 	bl	8006afc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006eec:	7d23      	ldrb	r3, [r4, #20]
 8006eee:	2b0a      	cmp	r3, #10
 8006ef0:	d00a      	beq.n	8006f08 <tcp_pcb_remove+0x34>
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d008      	beq.n	8006f08 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8006ef6:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8006ef8:	07da      	lsls	r2, r3, #31
 8006efa:	d505      	bpl.n	8006f08 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8006efc:	f043 0302 	orr.w	r3, r3, #2
 8006f00:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8006f02:	4620      	mov	r0, r4
 8006f04:	f002 f854 	bl	8008fb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006f08:	7d23      	ldrb	r3, [r4, #20]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d011      	beq.n	8006f32 <tcp_pcb_remove+0x5e>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006f0e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006f10:	b133      	cbz	r3, 8006f20 <tcp_pcb_remove+0x4c>
 8006f12:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <tcp_pcb_remove+0x78>)
 8006f14:	490e      	ldr	r1, [pc, #56]	; (8006f50 <tcp_pcb_remove+0x7c>)
 8006f16:	480f      	ldr	r0, [pc, #60]	; (8006f54 <tcp_pcb_remove+0x80>)
 8006f18:	f240 7253 	movw	r2, #1875	; 0x753
 8006f1c:	f003 fd26 	bl	800a96c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006f20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006f22:	b133      	cbz	r3, 8006f32 <tcp_pcb_remove+0x5e>
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <tcp_pcb_remove+0x78>)
 8006f26:	490c      	ldr	r1, [pc, #48]	; (8006f58 <tcp_pcb_remove+0x84>)
 8006f28:	480a      	ldr	r0, [pc, #40]	; (8006f54 <tcp_pcb_remove+0x80>)
 8006f2a:	f240 7254 	movw	r2, #1876	; 0x754
 8006f2e:	f003 fd1d 	bl	800a96c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006f32:	2300      	movs	r3, #0
 8006f34:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006f36:	82e3      	strh	r3, [r4, #22]
 8006f38:	bd10      	pop	{r4, pc}
 8006f3a:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0d0      	beq.n	8006ee2 <tcp_pcb_remove+0xe>
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	4294      	cmp	r4, r2
 8006f44:	d1f9      	bne.n	8006f3a <tcp_pcb_remove+0x66>
 8006f46:	68e2      	ldr	r2, [r4, #12]
 8006f48:	60da      	str	r2, [r3, #12]
 8006f4a:	e7ca      	b.n	8006ee2 <tcp_pcb_remove+0xe>
 8006f4c:	0800ccea 	.word	0x0800ccea
 8006f50:	0800cd9c 	.word	0x0800cd9c
 8006f54:	0800bc05 	.word	0x0800bc05
 8006f58:	0800cdb4 	.word	0x0800cdb4

08006f5c <tcp_close_shutdown>:
{
 8006f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f5e:	7d03      	ldrb	r3, [r0, #20]
 8006f60:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006f62:	2900      	cmp	r1, #0
 8006f64:	d04a      	beq.n	8006ffc <tcp_close_shutdown+0xa0>
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d001      	beq.n	8006f6e <tcp_close_shutdown+0x12>
 8006f6a:	2b07      	cmp	r3, #7
 8006f6c:	d146      	bne.n	8006ffc <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f6e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006f70:	b922      	cbnz	r2, 8006f7c <tcp_close_shutdown+0x20>
 8006f72:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8006f74:	f640 3268 	movw	r2, #2920	; 0xb68
 8006f78:	4291      	cmp	r1, r2
 8006f7a:	d03f      	beq.n	8006ffc <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f7c:	7ea3      	ldrb	r3, [r4, #26]
 8006f7e:	06db      	lsls	r3, r3, #27
 8006f80:	d406      	bmi.n	8006f90 <tcp_close_shutdown+0x34>
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <tcp_close_shutdown+0x124>)
 8006f84:	493f      	ldr	r1, [pc, #252]	; (8007084 <tcp_close_shutdown+0x128>)
 8006f86:	4840      	ldr	r0, [pc, #256]	; (8007088 <tcp_close_shutdown+0x12c>)
 8006f88:	f240 120f 	movw	r2, #271	; 0x10f
 8006f8c:	f003 fcee 	bl	800a96c <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f90:	8b23      	ldrh	r3, [r4, #24]
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	8ae3      	ldrh	r3, [r4, #22]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	4622      	mov	r2, r4
 8006f9a:	1d23      	adds	r3, r4, #4
 8006f9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f9e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006fa0:	f002 f984 	bl	80092ac <tcp_rst>
      tcp_pcb_purge(pcb);
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f7ff fda9 	bl	8006afc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006faa:	4a38      	ldr	r2, [pc, #224]	; (800708c <tcp_close_shutdown+0x130>)
 8006fac:	6813      	ldr	r3, [r2, #0]
 8006fae:	429c      	cmp	r4, r3
 8006fb0:	d115      	bne.n	8006fde <tcp_close_shutdown+0x82>
 8006fb2:	68e3      	ldr	r3, [r4, #12]
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60e3      	str	r3, [r4, #12]
 8006fba:	4b35      	ldr	r3, [pc, #212]	; (8007090 <tcp_close_shutdown+0x134>)
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8006fc0:	7d23      	ldrb	r3, [r4, #20]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d113      	bne.n	8006fee <tcp_close_shutdown+0x92>
        pcb->state = TIME_WAIT;
 8006fc6:	230a      	movs	r3, #10
 8006fc8:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8006fca:	4b32      	ldr	r3, [pc, #200]	; (8007094 <tcp_close_shutdown+0x138>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	60e2      	str	r2, [r4, #12]
 8006fd0:	601c      	str	r4, [r3, #0]
 8006fd2:	f002 fb0d 	bl	80095f0 <tcp_timer_needed>
}
 8006fd6:	2000      	movs	r0, #0
 8006fd8:	b003      	add	sp, #12
 8006fda:	bd30      	pop	{r4, r5, pc}
 8006fdc:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d0e9      	beq.n	8006fb6 <tcp_close_shutdown+0x5a>
 8006fe2:	68da      	ldr	r2, [r3, #12]
 8006fe4:	4294      	cmp	r4, r2
 8006fe6:	d1f9      	bne.n	8006fdc <tcp_close_shutdown+0x80>
 8006fe8:	68e2      	ldr	r2, [r4, #12]
 8006fea:	60da      	str	r2, [r3, #12]
 8006fec:	e7e3      	b.n	8006fb6 <tcp_close_shutdown+0x5a>
        if (tcp_input_pcb == pcb) {
 8006fee:	4b2a      	ldr	r3, [pc, #168]	; (8007098 <tcp_close_shutdown+0x13c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	429c      	cmp	r4, r3
 8006ff4:	d117      	bne.n	8007026 <tcp_close_shutdown+0xca>
          tcp_trigger_input_pcb_close();
 8006ff6:	f001 fb6f 	bl	80086d8 <tcp_trigger_input_pcb_close>
 8006ffa:	e7ec      	b.n	8006fd6 <tcp_close_shutdown+0x7a>
  switch (pcb->state) {
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d020      	beq.n	8007042 <tcp_close_shutdown+0xe6>
 8007000:	d307      	bcc.n	8007012 <tcp_close_shutdown+0xb6>
 8007002:	2b02      	cmp	r3, #2
 8007004:	d033      	beq.n	800706e <tcp_close_shutdown+0x112>
    return tcp_close_shutdown_fin(pcb);
 8007006:	4620      	mov	r0, r4
}
 8007008:	b003      	add	sp, #12
 800700a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 800700e:	f7ff bc17 	b.w	8006840 <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8007012:	8ae3      	ldrh	r3, [r4, #22]
 8007014:	b13b      	cbz	r3, 8007026 <tcp_close_shutdown+0xca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007016:	4a21      	ldr	r2, [pc, #132]	; (800709c <tcp_close_shutdown+0x140>)
 8007018:	6813      	ldr	r3, [r2, #0]
 800701a:	429c      	cmp	r4, r3
 800701c:	d109      	bne.n	8007032 <tcp_close_shutdown+0xd6>
 800701e:	68e3      	ldr	r3, [r4, #12]
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	2300      	movs	r3, #0
 8007024:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8007026:	4621      	mov	r1, r4
 8007028:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 800702a:	f7fe ff89 	bl	8005f40 <memp_free>
    break;
 800702e:	e7d2      	b.n	8006fd6 <tcp_close_shutdown+0x7a>
 8007030:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007032:	2b00      	cmp	r3, #0
 8007034:	d0f5      	beq.n	8007022 <tcp_close_shutdown+0xc6>
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	4294      	cmp	r4, r2
 800703a:	d1f9      	bne.n	8007030 <tcp_close_shutdown+0xd4>
 800703c:	68e2      	ldr	r2, [r4, #12]
 800703e:	60da      	str	r2, [r3, #12]
 8007040:	e7ef      	b.n	8007022 <tcp_close_shutdown+0xc6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007042:	4917      	ldr	r1, [pc, #92]	; (80070a0 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8007044:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007046:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800704a:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800704c:	b94a      	cbnz	r2, 8007062 <tcp_close_shutdown+0x106>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800704e:	3301      	adds	r3, #1
 8007050:	2b04      	cmp	r3, #4
 8007052:	d1f8      	bne.n	8007046 <tcp_close_shutdown+0xea>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007054:	4621      	mov	r1, r4
 8007056:	4813      	ldr	r0, [pc, #76]	; (80070a4 <tcp_close_shutdown+0x148>)
 8007058:	f7ff ff3c 	bl	8006ed4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800705c:	4621      	mov	r1, r4
 800705e:	2002      	movs	r0, #2
 8007060:	e7e3      	b.n	800702a <tcp_close_shutdown+0xce>
      if (pcb->listener == lpcb) {
 8007062:	6f55      	ldr	r5, [r2, #116]	; 0x74
 8007064:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8007066:	bf08      	it	eq
 8007068:	6750      	streq	r0, [r2, #116]	; 0x74
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800706a:	68d2      	ldr	r2, [r2, #12]
 800706c:	e7ee      	b.n	800704c <tcp_close_shutdown+0xf0>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800706e:	4621      	mov	r1, r4
 8007070:	4806      	ldr	r0, [pc, #24]	; (800708c <tcp_close_shutdown+0x130>)
 8007072:	f7ff ff2f 	bl	8006ed4 <tcp_pcb_remove>
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <tcp_close_shutdown+0x134>)
 8007078:	2001      	movs	r0, #1
 800707a:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800707c:	4621      	mov	r1, r4
 800707e:	e7d4      	b.n	800702a <tcp_close_shutdown+0xce>
 8007080:	0800ccea 	.word	0x0800ccea
 8007084:	0800ccd1 	.word	0x0800ccd1
 8007088:	0800bc05 	.word	0x0800bc05
 800708c:	2000d924 	.word	0x2000d924
 8007090:	2000d920 	.word	0x2000d920
 8007094:	2000d934 	.word	0x2000d934
 8007098:	2000d938 	.word	0x2000d938
 800709c:	2000d930 	.word	0x2000d930
 80070a0:	0800cd8c 	.word	0x0800cd8c
 80070a4:	2000d92c 	.word	0x2000d92c

080070a8 <tcp_close>:
  if (pcb->state != LISTEN) {
 80070a8:	7d03      	ldrb	r3, [r0, #20]
 80070aa:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 80070ac:	bf1e      	ittt	ne
 80070ae:	7e83      	ldrbne	r3, [r0, #26]
 80070b0:	f043 0310 	orrne.w	r3, r3, #16
 80070b4:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80070b6:	2101      	movs	r1, #1
 80070b8:	f7ff bf50 	b.w	8006f5c <tcp_close_shutdown>

080070bc <tcp_recv_null>:
{
 80070bc:	b510      	push	{r4, lr}
 80070be:	4608      	mov	r0, r1
  if (p != NULL) {
 80070c0:	4614      	mov	r4, r2
 80070c2:	b13a      	cbz	r2, 80070d4 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 80070c4:	8911      	ldrh	r1, [r2, #8]
 80070c6:	f7ff fc63 	bl	8006990 <tcp_recved>
    pbuf_free(p);
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff f892 	bl	80061f4 <pbuf_free>
}
 80070d0:	2000      	movs	r0, #0
 80070d2:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1fb      	bne.n	80070d0 <tcp_recv_null+0x14>
}
 80070d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 80070dc:	f7ff bfe4 	b.w	80070a8 <tcp_close>

080070e0 <tcp_process_refused_data>:
{
 80070e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 80070e2:	6f06      	ldr	r6, [r0, #112]	; 0x70
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80070e4:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
    u8_t refused_flags = pcb->refused_data->flags;
 80070e6:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80070e8:	2300      	movs	r3, #0
{
 80070ea:	4604      	mov	r4, r0
    pcb->refused_data = NULL;
 80070ec:	6703      	str	r3, [r0, #112]	; 0x70
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80070ee:	b1dd      	cbz	r5, 8007128 <tcp_process_refused_data+0x48>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4632      	mov	r2, r6
 80070f4:	6900      	ldr	r0, [r0, #16]
 80070f6:	47a8      	blx	r5
 80070f8:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80070fa:	b9e0      	cbnz	r0, 8007136 <tcp_process_refused_data+0x56>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 80070fc:	06bb      	lsls	r3, r7, #26
 80070fe:	d511      	bpl.n	8007124 <tcp_process_refused_data+0x44>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007100:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007102:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007104:	f640 3268 	movw	r2, #2920	; 0xb68
 8007108:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800710a:	bf1c      	itt	ne
 800710c:	3301      	addne	r3, #1
 800710e:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007110:	b146      	cbz	r6, 8007124 <tcp_process_refused_data+0x44>
 8007112:	2300      	movs	r3, #0
 8007114:	461a      	mov	r2, r3
 8007116:	4621      	mov	r1, r4
 8007118:	6920      	ldr	r0, [r4, #16]
 800711a:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800711c:	300d      	adds	r0, #13
 800711e:	d101      	bne.n	8007124 <tcp_process_refused_data+0x44>
          return ERR_ABRT;
 8007120:	f06f 050c 	mvn.w	r5, #12
}
 8007124:	4628      	mov	r0, r5
 8007126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007128:	4601      	mov	r1, r0
 800712a:	462b      	mov	r3, r5
 800712c:	4632      	mov	r2, r6
 800712e:	4628      	mov	r0, r5
 8007130:	f7ff ffc4 	bl	80070bc <tcp_recv_null>
 8007134:	e7e0      	b.n	80070f8 <tcp_process_refused_data+0x18>
    } else if (err == ERR_ABRT) {
 8007136:	f110 050d 	adds.w	r5, r0, #13
 800713a:	d0f1      	beq.n	8007120 <tcp_process_refused_data+0x40>
      pcb->refused_data = refused_data;
 800713c:	6726      	str	r6, [r4, #112]	; 0x70
      return ERR_INPROGRESS;
 800713e:	f06f 0504 	mvn.w	r5, #4
 8007142:	e7ef      	b.n	8007124 <tcp_process_refused_data+0x44>

08007144 <tcp_fasttmr>:
{
 8007144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8007148:	4d1b      	ldr	r5, [pc, #108]	; (80071b8 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800714a:	4f1c      	ldr	r7, [pc, #112]	; (80071bc <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800714c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800714e:	4e1c      	ldr	r6, [pc, #112]	; (80071c0 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8007150:	3301      	adds	r3, #1
 8007152:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8007154:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8007156:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800715a:	b90c      	cbnz	r4, 8007160 <tcp_fasttmr+0x1c>
}
 800715c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8007160:	782b      	ldrb	r3, [r5, #0]
 8007162:	7f62      	ldrb	r2, [r4, #29]
 8007164:	429a      	cmp	r2, r3
 8007166:	d024      	beq.n	80071b2 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007168:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800716a:	7ea3      	ldrb	r3, [r4, #26]
 800716c:	07d9      	lsls	r1, r3, #31
 800716e:	d509      	bpl.n	8007184 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8007176:	4620      	mov	r0, r4
 8007178:	f001 ff1a 	bl	8008fb0 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800717c:	7ea3      	ldrb	r3, [r4, #26]
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8007184:	7ea3      	ldrb	r3, [r4, #26]
 8007186:	071a      	lsls	r2, r3, #28
 8007188:	d505      	bpl.n	8007196 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800718a:	f023 0308 	bic.w	r3, r3, #8
 800718e:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007190:	4620      	mov	r0, r4
 8007192:	f7ff fb55 	bl	8006840 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8007196:	6f23      	ldr	r3, [r4, #112]	; 0x70
      next = pcb->next;
 8007198:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800719c:	b13b      	cbz	r3, 80071ae <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800719e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80071a0:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 80071a4:	f7ff ff9c 	bl	80070e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80071a8:	7833      	ldrb	r3, [r6, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1d2      	bne.n	8007154 <tcp_fasttmr+0x10>
{
 80071ae:	464c      	mov	r4, r9
 80071b0:	e7d3      	b.n	800715a <tcp_fasttmr+0x16>
      pcb = pcb->next;
 80071b2:	f8d4 900c 	ldr.w	r9, [r4, #12]
 80071b6:	e7fa      	b.n	80071ae <tcp_fasttmr+0x6a>
 80071b8:	2000532e 	.word	0x2000532e
 80071bc:	2000d924 	.word	0x2000d924
 80071c0:	2000d920 	.word	0x2000d920

080071c4 <tcp_tmr>:
{
 80071c4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80071c6:	f7ff ffbd 	bl	8007144 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80071ca:	4a06      	ldr	r2, [pc, #24]	; (80071e4 <tcp_tmr+0x20>)
 80071cc:	7813      	ldrb	r3, [r2, #0]
 80071ce:	3301      	adds	r3, #1
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	7013      	strb	r3, [r2, #0]
 80071d4:	07db      	lsls	r3, r3, #31
 80071d6:	d503      	bpl.n	80071e0 <tcp_tmr+0x1c>
}
 80071d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80071dc:	f7ff bcaa 	b.w	8006b34 <tcp_slowtmr>
 80071e0:	bd08      	pop	{r3, pc}
 80071e2:	bf00      	nop
 80071e4:	2000532d 	.word	0x2000532d

080071e8 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071e8:	7d03      	ldrb	r3, [r0, #20]
 80071ea:	2b01      	cmp	r3, #1
{
 80071ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071f4:	d106      	bne.n	8007204 <tcp_abandon+0x1c>
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <tcp_abandon+0xc8>)
 80071f8:	492e      	ldr	r1, [pc, #184]	; (80072b4 <tcp_abandon+0xcc>)
 80071fa:	482f      	ldr	r0, [pc, #188]	; (80072b8 <tcp_abandon+0xd0>)
 80071fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007200:	f003 fbb4 	bl	800a96c <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007204:	7d23      	ldrb	r3, [r4, #20]
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d10a      	bne.n	8007220 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800720a:	4621      	mov	r1, r4
 800720c:	482b      	ldr	r0, [pc, #172]	; (80072bc <tcp_abandon+0xd4>)
 800720e:	f7ff fe61 	bl	8006ed4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007212:	4621      	mov	r1, r4
 8007214:	2001      	movs	r0, #1
}
 8007216:	b002      	add	sp, #8
 8007218:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 800721c:	f7fe be90 	b.w	8005f40 <memp_free>
    seqno = pcb->snd_nxt;
 8007220:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8007224:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007228:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
    errf_arg = pcb->callback_arg;
 800722c:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8007230:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8007232:	b99b      	cbnz	r3, 800725c <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8007234:	b13d      	cbz	r5, 8007246 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007236:	4a22      	ldr	r2, [pc, #136]	; (80072c0 <tcp_abandon+0xd8>)
 8007238:	6813      	ldr	r3, [r2, #0]
 800723a:	429c      	cmp	r4, r3
 800723c:	d106      	bne.n	800724c <tcp_abandon+0x64>
 800723e:	68e3      	ldr	r3, [r4, #12]
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	2500      	movs	r5, #0
 8007244:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8007246:	462e      	mov	r6, r5
 8007248:	e00f      	b.n	800726a <tcp_abandon+0x82>
 800724a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f8      	beq.n	8007242 <tcp_abandon+0x5a>
 8007250:	68da      	ldr	r2, [r3, #12]
 8007252:	4294      	cmp	r4, r2
 8007254:	d1f9      	bne.n	800724a <tcp_abandon+0x62>
 8007256:	68e2      	ldr	r2, [r4, #12]
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	e7f2      	b.n	8007242 <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800725c:	4621      	mov	r1, r4
 800725e:	4819      	ldr	r0, [pc, #100]	; (80072c4 <tcp_abandon+0xdc>)
 8007260:	f7ff fe38 	bl	8006ed4 <tcp_pcb_remove>
 8007264:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <tcp_abandon+0xe0>)
 8007266:	2201      	movs	r2, #1
 8007268:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800726a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800726c:	b108      	cbz	r0, 8007272 <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 800726e:	f7ff fbdd 	bl	8006a2c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007272:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007274:	b108      	cbz	r0, 800727a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8007276:	f7ff fbd9 	bl	8006a2c <tcp_segs_free>
    if (send_rst) {
 800727a:	b146      	cbz	r6, 800728e <tcp_abandon+0xa6>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800727c:	8b23      	ldrh	r3, [r4, #24]
 800727e:	9301      	str	r3, [sp, #4]
 8007280:	9500      	str	r5, [sp, #0]
 8007282:	1d23      	adds	r3, r4, #4
 8007284:	4622      	mov	r2, r4
 8007286:	4651      	mov	r1, sl
 8007288:	4648      	mov	r0, r9
 800728a:	f002 f80f 	bl	80092ac <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800728e:	4621      	mov	r1, r4
 8007290:	2001      	movs	r0, #1
 8007292:	f7fe fe55 	bl	8005f40 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007296:	b13f      	cbz	r7, 80072a8 <tcp_abandon+0xc0>
 8007298:	f06f 010c 	mvn.w	r1, #12
 800729c:	4640      	mov	r0, r8
 800729e:	463b      	mov	r3, r7
}
 80072a0:	b002      	add	sp, #8
 80072a2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80072a6:	4718      	bx	r3
}
 80072a8:	b002      	add	sp, #8
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	bf00      	nop
 80072b0:	0800ccea 	.word	0x0800ccea
 80072b4:	0800cc6b 	.word	0x0800cc6b
 80072b8:	0800bc05 	.word	0x0800bc05
 80072bc:	2000d934 	.word	0x2000d934
 80072c0:	2000d930 	.word	0x2000d930
 80072c4:	2000d924 	.word	0x2000d924
 80072c8:	2000d920 	.word	0x2000d920

080072cc <tcp_abort>:
  tcp_abandon(pcb, 1);
 80072cc:	2101      	movs	r1, #1
 80072ce:	f7ff bf8b 	b.w	80071e8 <tcp_abandon>

080072d2 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80072d2:	b538      	push	{r3, r4, r5, lr}
 80072d4:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 80072d6:	b901      	cbnz	r1, 80072da <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80072da:	680a      	ldr	r2, [r1, #0]
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	68cc      	ldr	r4, [r1, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d102      	bne.n	80072ea <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 80072e4:	4608      	mov	r0, r1
 80072e6:	f7ff fff1 	bl	80072cc <tcp_abort>
      pcb = pcb->next;
 80072ea:	4621      	mov	r1, r4
 80072ec:	e7f3      	b.n	80072d6 <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

080072f0 <tcp_kill_state>:
{
 80072f0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80072f2:	f1a0 0308 	sub.w	r3, r0, #8
 80072f6:	2b01      	cmp	r3, #1
{
 80072f8:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80072fa:	d906      	bls.n	800730a <tcp_kill_state+0x1a>
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <tcp_kill_state+0x4c>)
 80072fe:	4910      	ldr	r1, [pc, #64]	; (8007340 <tcp_kill_state+0x50>)
 8007300:	4810      	ldr	r0, [pc, #64]	; (8007344 <tcp_kill_state+0x54>)
 8007302:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007306:	f003 fb31 	bl	800a96c <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800730a:	4b0f      	ldr	r3, [pc, #60]	; (8007348 <tcp_kill_state+0x58>)
 800730c:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <tcp_kill_state+0x5c>)
  inactivity = 0;
 8007310:	2200      	movs	r2, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007312:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8007314:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007316:	b921      	cbnz	r1, 8007322 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8007318:	b170      	cbz	r0, 8007338 <tcp_kill_state+0x48>
}
 800731a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 800731e:	f7ff bf63 	b.w	80071e8 <tcp_abandon>
    if (pcb->state == state) {
 8007322:	7d0b      	ldrb	r3, [r1, #20]
 8007324:	42a3      	cmp	r3, r4
 8007326:	d105      	bne.n	8007334 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007328:	6a0b      	ldr	r3, [r1, #32]
 800732a:	1aeb      	subs	r3, r5, r3
 800732c:	429a      	cmp	r2, r3
 800732e:	bf9c      	itt	ls
 8007330:	461a      	movls	r2, r3
 8007332:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007334:	68c9      	ldr	r1, [r1, #12]
 8007336:	e7ee      	b.n	8007316 <tcp_kill_state+0x26>
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	0800ccea 	.word	0x0800ccea
 8007340:	0800cd7b 	.word	0x0800cd7b
 8007344:	0800bc05 	.word	0x0800bc05
 8007348:	2000d924 	.word	0x2000d924
 800734c:	2000d928 	.word	0x2000d928

08007350 <tcp_alloc>:
{
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007354:	2001      	movs	r0, #1
 8007356:	f7fe fdd7 	bl	8005f08 <memp_malloc>
 800735a:	4d3b      	ldr	r5, [pc, #236]	; (8007448 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 800735c:	4604      	mov	r4, r0
 800735e:	bb90      	cbnz	r0, 80073c6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007360:	4b3a      	ldr	r3, [pc, #232]	; (800744c <tcp_alloc+0xfc>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007362:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007364:	681b      	ldr	r3, [r3, #0]
  inactivity = 0;
 8007366:	4621      	mov	r1, r4
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007368:	2b00      	cmp	r3, #0
 800736a:	d157      	bne.n	800741c <tcp_alloc+0xcc>
  if (inactive != NULL) {
 800736c:	b114      	cbz	r4, 8007374 <tcp_alloc+0x24>
    tcp_abort(inactive);
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff ffac 	bl	80072cc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007374:	2001      	movs	r0, #1
 8007376:	f7fe fdc7 	bl	8005f08 <memp_malloc>
    if (pcb == NULL) {
 800737a:	4604      	mov	r4, r0
 800737c:	bb18      	cbnz	r0, 80073c6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 800737e:	2009      	movs	r0, #9
 8007380:	f7ff ffb6 	bl	80072f0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007384:	2001      	movs	r0, #1
 8007386:	f7fe fdbf 	bl	8005f08 <memp_malloc>
      if (pcb == NULL) {
 800738a:	4604      	mov	r4, r0
 800738c:	b9d8      	cbnz	r0, 80073c6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 800738e:	2008      	movs	r0, #8
 8007390:	f7ff ffae 	bl	80072f0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007394:	2001      	movs	r0, #1
 8007396:	f7fe fdb7 	bl	8005f08 <memp_malloc>
        if (pcb == NULL) {
 800739a:	4604      	mov	r4, r0
 800739c:	b998      	cbnz	r0, 80073c6 <tcp_alloc+0x76>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800739e:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80073a0:	f8d5 e000 	ldr.w	lr, [r5]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073a4:	681b      	ldr	r3, [r3, #0]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80073a6:	f016 0f80 	tst.w	r6, #128	; 0x80
 80073aa:	bf0c      	ite	eq
 80073ac:	4631      	moveq	r1, r6
 80073ae:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d13b      	bne.n	800742c <tcp_alloc+0xdc>
  if (inactive != NULL) {
 80073b4:	b114      	cbz	r4, 80073bc <tcp_alloc+0x6c>
    tcp_abort(inactive);
 80073b6:	4620      	mov	r0, r4
 80073b8:	f7ff ff88 	bl	80072cc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80073bc:	2001      	movs	r0, #1
 80073be:	f7fe fda3 	bl	8005f08 <memp_malloc>
  if (pcb != NULL) {
 80073c2:	4604      	mov	r4, r0
 80073c4:	b340      	cbz	r0, 8007418 <tcp_alloc+0xc8>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80073c6:	2294      	movs	r2, #148	; 0x94
 80073c8:	2100      	movs	r1, #0
 80073ca:	4620      	mov	r0, r4
 80073cc:	f003 fac6 	bl	800a95c <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80073d0:	f640 3268 	movw	r2, #2920	; 0xb68
 80073d4:	8562      	strh	r2, [r4, #42]	; 0x2a
 80073d6:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80073d8:	22ff      	movs	r2, #255	; 0xff
 80073da:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80073dc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80073e0:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80073e2:	2206      	movs	r2, #6
 80073e4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80073e8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80073ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073ee:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80073f0:	2201      	movs	r2, #1
 80073f2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80073f6:	682a      	ldr	r2, [r5, #0]
 80073f8:	6222      	str	r2, [r4, #32]
    pcb->snd_buf = TCP_SND_BUF;
 80073fa:	f241 63d0 	movw	r3, #5840	; 0x16d0
    pcb->last_timer = tcp_timer_ctr;
 80073fe:	4a15      	ldr	r2, [pc, #84]	; (8007454 <tcp_alloc+0x104>)
    pcb->snd_buf = TCP_SND_BUF;
 8007400:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ssthresh = TCP_SND_BUF;
 8007404:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8007408:	4b13      	ldr	r3, [pc, #76]	; (8007458 <tcp_alloc+0x108>)
    pcb->last_timer = tcp_timer_ctr;
 800740a:	7812      	ldrb	r2, [r2, #0]
    pcb->recv = tcp_recv_null;
 800740c:	67e3      	str	r3, [r4, #124]	; 0x7c
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <tcp_alloc+0x10c>)
    pcb->prio = prio;
 8007410:	7566      	strb	r6, [r4, #21]
    pcb->last_timer = tcp_timer_ctr;
 8007412:	7762      	strb	r2, [r4, #29]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007414:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 8007418:	4620      	mov	r0, r4
 800741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800741c:	6a1a      	ldr	r2, [r3, #32]
 800741e:	1a82      	subs	r2, r0, r2
 8007420:	428a      	cmp	r2, r1
 8007422:	bf24      	itt	cs
 8007424:	461c      	movcs	r4, r3
 8007426:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	e79d      	b.n	8007368 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 800742c:	7d5f      	ldrb	r7, [r3, #21]
 800742e:	428f      	cmp	r7, r1
 8007430:	d807      	bhi.n	8007442 <tcp_alloc+0xf2>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007432:	6a1a      	ldr	r2, [r3, #32]
 8007434:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8007438:	4282      	cmp	r2, r0
 800743a:	bf22      	ittt	cs
 800743c:	4639      	movcs	r1, r7
 800743e:	4610      	movcs	r0, r2
 8007440:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	e7b4      	b.n	80073b0 <tcp_alloc+0x60>
 8007446:	bf00      	nop
 8007448:	2000d928 	.word	0x2000d928
 800744c:	2000d934 	.word	0x2000d934
 8007450:	2000d924 	.word	0x2000d924
 8007454:	2000532e 	.word	0x2000532e
 8007458:	080070bd 	.word	0x080070bd
 800745c:	006ddd00 	.word	0x006ddd00

08007460 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007460:	2040      	movs	r0, #64	; 0x40
 8007462:	f7ff bf75 	b.w	8007350 <tcp_alloc>
	...

08007468 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007468:	4b03      	ldr	r3, [pc, #12]	; (8007478 <tcp_next_iss+0x10>)
 800746a:	4a04      	ldr	r2, [pc, #16]	; (800747c <tcp_next_iss+0x14>)
 800746c:	6818      	ldr	r0, [r3, #0]
 800746e:	6812      	ldr	r2, [r2, #0]
 8007470:	4410      	add	r0, r2
 8007472:	6018      	str	r0, [r3, #0]
}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	2000000c 	.word	0x2000000c
 800747c:	2000d928 	.word	0x2000d928

08007480 <tcp_eff_send_mss_impl>:
{
 8007480:	b510      	push	{r4, lr}
 8007482:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8007484:	4608      	mov	r0, r1
 8007486:	f7fd fda3 	bl	8004fd0 <ip4_route>
    if (outif == NULL) {
 800748a:	b130      	cbz	r0, 800749a <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 800748c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
  if (mtu != 0) {
 800748e:	b123      	cbz	r3, 800749a <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007490:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007492:	b29b      	uxth	r3, r3
 8007494:	429c      	cmp	r4, r3
 8007496:	bf28      	it	cs
 8007498:	461c      	movcs	r4, r3
}
 800749a:	4620      	mov	r0, r4
 800749c:	bd10      	pop	{r4, pc}
	...

080074a0 <tcp_connect>:
{
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	461d      	mov	r5, r3
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80074a4:	4604      	mov	r4, r0
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d068      	beq.n	800757c <tcp_connect+0xdc>
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d066      	beq.n	800757c <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80074ae:	7d03      	ldrb	r3, [r0, #20]
 80074b0:	b153      	cbz	r3, 80074c8 <tcp_connect+0x28>
 80074b2:	4b35      	ldr	r3, [pc, #212]	; (8007588 <tcp_connect+0xe8>)
 80074b4:	4935      	ldr	r1, [pc, #212]	; (800758c <tcp_connect+0xec>)
 80074b6:	4836      	ldr	r0, [pc, #216]	; (8007590 <tcp_connect+0xf0>)
 80074b8:	f44f 725e 	mov.w	r2, #888	; 0x378
 80074bc:	f003 fa56 	bl	800a96c <iprintf>
 80074c0:	f06f 0509 	mvn.w	r5, #9
}
 80074c4:	4628      	mov	r0, r5
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80074c8:	680b      	ldr	r3, [r1, #0]
 80074ca:	6043      	str	r3, [r0, #4]
  if (ip_addr_isany(&pcb->local_ip)) {
 80074cc:	6803      	ldr	r3, [r0, #0]
  pcb->remote_port = port;
 80074ce:	8302      	strh	r2, [r0, #24]
  if (ip_addr_isany(&pcb->local_ip)) {
 80074d0:	b933      	cbnz	r3, 80074e0 <tcp_connect+0x40>
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 80074d2:	3004      	adds	r0, #4
 80074d4:	f7fd fd7c 	bl	8004fd0 <ip4_route>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d052      	beq.n	8007582 <tcp_connect+0xe2>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80074dc:	6843      	ldr	r3, [r0, #4]
 80074de:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 80074e0:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	d039      	beq.n	800755a <tcp_connect+0xba>
  iss = tcp_next_iss(pcb);
 80074e6:	4620      	mov	r0, r4
 80074e8:	f7ff ffbe 	bl	8007468 <tcp_next_iss>
  pcb->snd_nxt = iss;
 80074ec:	64e0      	str	r0, [r4, #76]	; 0x4c
  pcb->lastack = iss - 1;
 80074ee:	3801      	subs	r0, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80074f0:	f640 3368 	movw	r3, #2920	; 0xb68
  pcb->rcv_nxt = 0;
 80074f4:	2200      	movs	r2, #0
  pcb->lastack = iss - 1;
 80074f6:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80074f8:	6560      	str	r0, [r4, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 80074fa:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->mss = INITIAL_MSS;
 80074fc:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->rcv_nxt = 0;
 8007500:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007502:	8563      	strh	r3, [r4, #42]	; 0x2a
 8007504:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007506:	62e2      	str	r2, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007508:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800750c:	1d21      	adds	r1, r4, #4
  pcb->mss = INITIAL_MSS;
 800750e:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007510:	f7ff ffb6 	bl	8007480 <tcp_eff_send_mss_impl>
  pcb->cwnd = 1;
 8007514:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007516:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->connected = connected;
 8007518:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  pcb->cwnd = 1;
 800751c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8007520:	2102      	movs	r1, #2
 8007522:	4620      	mov	r0, r4
 8007524:	f001 fc54 	bl	8008dd0 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8007528:	4605      	mov	r5, r0
 800752a:	2800      	cmp	r0, #0
 800752c:	d1ca      	bne.n	80074c4 <tcp_connect+0x24>
    pcb->state = SYN_SENT;
 800752e:	2302      	movs	r3, #2
 8007530:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8007532:	b12e      	cbz	r6, 8007540 <tcp_connect+0xa0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007534:	4a17      	ldr	r2, [pc, #92]	; (8007594 <tcp_connect+0xf4>)
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	429c      	cmp	r4, r3
 800753a:	d117      	bne.n	800756c <tcp_connect+0xcc>
 800753c:	68e3      	ldr	r3, [r4, #12]
 800753e:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 8007540:	4b15      	ldr	r3, [pc, #84]	; (8007598 <tcp_connect+0xf8>)
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	60e2      	str	r2, [r4, #12]
 8007546:	601c      	str	r4, [r3, #0]
 8007548:	f002 f852 	bl	80095f0 <tcp_timer_needed>
 800754c:	4b13      	ldr	r3, [pc, #76]	; (800759c <tcp_connect+0xfc>)
 800754e:	2201      	movs	r2, #1
    tcp_output(pcb);
 8007550:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8007552:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8007554:	f001 fd2c 	bl	8008fb0 <tcp_output>
 8007558:	e7b4      	b.n	80074c4 <tcp_connect+0x24>
    pcb->local_port = tcp_new_port();
 800755a:	f7ff f949 	bl	80067f0 <tcp_new_port>
 800755e:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8007560:	2800      	cmp	r0, #0
 8007562:	d1c0      	bne.n	80074e6 <tcp_connect+0x46>
      return ERR_BUF;
 8007564:	f06f 0501 	mvn.w	r5, #1
 8007568:	e7ac      	b.n	80074c4 <tcp_connect+0x24>
 800756a:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0e7      	beq.n	8007540 <tcp_connect+0xa0>
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	4294      	cmp	r4, r2
 8007574:	d1f9      	bne.n	800756a <tcp_connect+0xca>
 8007576:	68e2      	ldr	r2, [r4, #12]
 8007578:	60da      	str	r2, [r3, #12]
 800757a:	e7e1      	b.n	8007540 <tcp_connect+0xa0>
    return ERR_VAL;
 800757c:	f06f 0505 	mvn.w	r5, #5
 8007580:	e7a0      	b.n	80074c4 <tcp_connect+0x24>
      return ERR_RTE;
 8007582:	f06f 0503 	mvn.w	r5, #3
 8007586:	e79d      	b.n	80074c4 <tcp_connect+0x24>
 8007588:	0800ccea 	.word	0x0800ccea
 800758c:	0800cd25 	.word	0x0800cd25
 8007590:	0800bc05 	.word	0x0800bc05
 8007594:	2000d930 	.word	0x2000d930
 8007598:	2000d924 	.word	0x2000d924
 800759c:	2000d920 	.word	0x2000d920

080075a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 80075a4:	4604      	mov	r4, r0
 80075a6:	b180      	cbz	r0, 80075ca <tcp_netif_ip_addr_changed+0x2a>
 80075a8:	6803      	ldr	r3, [r0, #0]
 80075aa:	b173      	cbz	r3, 80075ca <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80075ac:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <tcp_netif_ip_addr_changed+0x40>)
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	f7ff fe8f 	bl	80072d2 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <tcp_netif_ip_addr_changed+0x44>)
 80075b6:	4620      	mov	r0, r4
 80075b8:	6819      	ldr	r1, [r3, #0]
 80075ba:	f7ff fe8a 	bl	80072d2 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80075be:	b125      	cbz	r5, 80075ca <tcp_netif_ip_addr_changed+0x2a>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	b113      	cbz	r3, 80075ca <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80075c4:	4b08      	ldr	r3, [pc, #32]	; (80075e8 <tcp_netif_ip_addr_changed+0x48>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	b903      	cbnz	r3, 80075cc <tcp_netif_ip_addr_changed+0x2c>
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80075cc:	6818      	ldr	r0, [r3, #0]
 80075ce:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 80075d0:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80075d2:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80075d4:	bf04      	itt	eq
 80075d6:	6829      	ldreq	r1, [r5, #0]
 80075d8:	6019      	streq	r1, [r3, #0]
{
 80075da:	4613      	mov	r3, r2
 80075dc:	e7f4      	b.n	80075c8 <tcp_netif_ip_addr_changed+0x28>
 80075de:	bf00      	nop
 80075e0:	2000d924 	.word	0x2000d924
 80075e4:	2000d930 	.word	0x2000d930
 80075e8:	2000d92c 	.word	0x2000d92c

080075ec <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80075ec:	7d03      	ldrb	r3, [r0, #20]
 80075ee:	2b03      	cmp	r3, #3
{
 80075f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80075f6:	d806      	bhi.n	8007606 <tcp_receive+0x1a>
 80075f8:	4b87      	ldr	r3, [pc, #540]	; (8007818 <tcp_receive+0x22c>)
 80075fa:	4988      	ldr	r1, [pc, #544]	; (800781c <tcp_receive+0x230>)
 80075fc:	4888      	ldr	r0, [pc, #544]	; (8007820 <tcp_receive+0x234>)
 80075fe:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007602:	f003 f9b3 	bl	800a96c <iprintf>

  if (flags & TCP_ACK) {
 8007606:	4b87      	ldr	r3, [pc, #540]	; (8007824 <tcp_receive+0x238>)
 8007608:	4e87      	ldr	r6, [pc, #540]	; (8007828 <tcp_receive+0x23c>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f013 0f10 	tst.w	r3, #16
 8007610:	f000 817c 	beq.w	800790c <tcp_receive+0x320>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007614:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007616:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007618:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800761c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800761e:	1a1d      	subs	r5, r3, r0
 8007620:	2d00      	cmp	r5, #0
 8007622:	4d82      	ldr	r5, [pc, #520]	; (800782c <tcp_receive+0x240>)
 8007624:	db0d      	blt.n	8007642 <tcp_receive+0x56>
 8007626:	4283      	cmp	r3, r0
 8007628:	d103      	bne.n	8007632 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	1acb      	subs	r3, r1, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	db07      	blt.n	8007642 <tcp_receive+0x56>
 8007632:	682b      	ldr	r3, [r5, #0]
 8007634:	4299      	cmp	r1, r3
 8007636:	d11c      	bne.n	8007672 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007638:	4b7d      	ldr	r3, [pc, #500]	; (8007830 <tcp_receive+0x244>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	89db      	ldrh	r3, [r3, #14]
 800763e:	4293      	cmp	r3, r2
 8007640:	d917      	bls.n	8007672 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007642:	4b7b      	ldr	r3, [pc, #492]	; (8007830 <tcp_receive+0x244>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007644:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 800764c:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800764e:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8007650:	6828      	ldr	r0, [r5, #0]
 8007652:	6560      	str	r0, [r4, #84]	; 0x54
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007654:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007658:	bf38      	it	cc
 800765a:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 800765e:	f894 0091 	ldrb.w	r0, [r4, #145]	; 0x91
      if (pcb->snd_wnd == 0) {
 8007662:	2f00      	cmp	r7, #0
 8007664:	d13c      	bne.n	80076e0 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 8007666:	b920      	cbnz	r0, 8007672 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007668:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
          pcb->persist_backoff = 1;
 800766c:	2301      	movs	r3, #1
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800766e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 8007678:	4f6e      	ldr	r7, [pc, #440]	; (8007834 <tcp_receive+0x248>)
 800767a:	eba3 000e 	sub.w	r0, r3, lr
 800767e:	2800      	cmp	r0, #0
 8007680:	dc37      	bgt.n	80076f2 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8007682:	486d      	ldr	r0, [pc, #436]	; (8007838 <tcp_receive+0x24c>)
 8007684:	8800      	ldrh	r0, [r0, #0]
 8007686:	2800      	cmp	r0, #0
 8007688:	f040 82aa 	bne.w	8007be0 <tcp_receive+0x5f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800768c:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800768e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007690:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007694:	4401      	add	r1, r0
 8007696:	428a      	cmp	r2, r1
 8007698:	f040 82a2 	bne.w	8007be0 <tcp_receive+0x5f4>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800769c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	f2c0 829d 	blt.w	8007be0 <tcp_receive+0x5f4>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80076a6:	4573      	cmp	r3, lr
 80076a8:	f040 829a 	bne.w	8007be0 <tcp_receive+0x5f4>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80076ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076b0:	1c53      	adds	r3, r2, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 80076b6:	bf38      	it	cc
 80076b8:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80076bc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076c0:	2b03      	cmp	r3, #3
 80076c2:	d911      	bls.n	80076e8 <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80076c4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80076c8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80076ca:	4413      	add	r3, r2
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d201      	bcs.n	80076d6 <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 80076d2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80076d6:	f8df a140 	ldr.w	sl, [pc, #320]	; 8007818 <tcp_receive+0x22c>
 80076da:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8007820 <tcp_receive+0x234>
 80076de:	e108      	b.n	80078f2 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d0c6      	beq.n	8007672 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	e7c2      	b.n	800766e <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 80076e8:	d1f5      	bne.n	80076d6 <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 80076ea:	4620      	mov	r0, r4
 80076ec:	f001 fe7d 	bl	80093ea <tcp_rexmit_fast>
 80076f0:	e7f1      	b.n	80076d6 <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80076f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80076f4:	1a9a      	subs	r2, r3, r2
 80076f6:	2a00      	cmp	r2, #0
 80076f8:	f300 808a 	bgt.w	8007810 <tcp_receive+0x224>
      if (pcb->flags & TF_INFR) {
 80076fc:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80076fe:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 8007702:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 8007704:	0751      	lsls	r1, r2, #29
        pcb->flags &= ~TF_INFR;
 8007706:	bf41      	itttt	mi
 8007708:	f022 0204 	bicmi.w	r2, r2, #4
 800770c:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800770e:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 8007712:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 8007716:	7d23      	ldrb	r3, [r4, #20]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007718:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      pcb->nrtx = 0;
 800771a:	2100      	movs	r1, #0
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800771c:	eb02 02e0 	add.w	r2, r2, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8007720:	2b03      	cmp	r3, #3
      pcb->nrtx = 0;
 8007722:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007726:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800772a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800772e:	d90f      	bls.n	8007750 <tcp_receive+0x164>
        if (pcb->cwnd < pcb->ssthresh) {
 8007730:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8007734:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8007738:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800773a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800773c:	bf9c      	itt	ls
 800773e:	435b      	mulls	r3, r3
 8007740:	fb93 f3f2 	sdivls	r3, r3, r2
 8007744:	4413      	add	r3, r2
 8007746:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8007748:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 800774a:	bf38      	it	cc
 800774c:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007750:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8007818 <tcp_receive+0x22c>
 8007754:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007820 <tcp_receive+0x234>
      while (pcb->unacked != NULL &&
 8007758:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800775a:	b943      	cbnz	r3, 800776e <tcp_receive+0x182>
      if (pcb->unacked == NULL) {
 800775c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800775e:	2300      	movs	r3, #0
 8007760:	2a00      	cmp	r2, #0
 8007762:	d153      	bne.n	800780c <tcp_receive+0x220>
        pcb->rtime = -1;
 8007764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007768:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800776a:	76e3      	strb	r3, [r4, #27]
 800776c:	e7b3      	b.n	80076d6 <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	6858      	ldr	r0, [r3, #4]
 8007772:	f7fc ff9a 	bl	80046aa <lwip_htonl>
 8007776:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007778:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	4683      	mov	fp, r0
 8007780:	8998      	ldrh	r0, [r3, #12]
 8007782:	f7fc ff8f 	bl	80046a4 <lwip_htons>
 8007786:	682b      	ldr	r3, [r5, #0]
 8007788:	f010 0003 	ands.w	r0, r0, #3
 800778c:	eba8 0803 	sub.w	r8, r8, r3
 8007790:	bf18      	it	ne
 8007792:	2001      	movne	r0, #1
 8007794:	44d8      	add	r8, fp
 8007796:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8007798:	f1b8 0f00 	cmp.w	r8, #0
 800779c:	dcde      	bgt.n	800775c <tcp_receive+0x170>
        next = pcb->unacked;
 800779e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80077a2:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80077a6:	f8d8 3000 	ldr.w	r3, [r8]
 80077aa:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80077ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077b0:	f7fe fed6 	bl	8006560 <pbuf_clen>
 80077b4:	4583      	cmp	fp, r0
 80077b6:	d206      	bcs.n	80077c6 <tcp_receive+0x1da>
 80077b8:	464b      	mov	r3, r9
 80077ba:	f240 429e 	movw	r2, #1182	; 0x49e
 80077be:	491f      	ldr	r1, [pc, #124]	; (800783c <tcp_receive+0x250>)
 80077c0:	4650      	mov	r0, sl
 80077c2:	f003 f8d3 	bl	800a96c <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80077c6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80077ca:	f7fe fec9 	bl	8006560 <pbuf_clen>
 80077ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 80077d2:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80077d4:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 80077d6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 80077da:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        recv_acked += next->len;
 80077de:	4413      	add	r3, r2
        tcp_seg_free(next);
 80077e0:	4640      	mov	r0, r8
        recv_acked += next->len;
 80077e2:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 80077e4:	f7ff f914 	bl	8006a10 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 80077e8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d0b3      	beq.n	8007758 <tcp_receive+0x16c>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80077f0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1b0      	bne.n	8007758 <tcp_receive+0x16c>
 80077f6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1ad      	bne.n	8007758 <tcp_receive+0x16c>
 80077fc:	464b      	mov	r3, r9
 80077fe:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007802:	490f      	ldr	r1, [pc, #60]	; (8007840 <tcp_receive+0x254>)
 8007804:	4650      	mov	r0, sl
 8007806:	f003 f8b1 	bl	800a96c <iprintf>
 800780a:	e7a5      	b.n	8007758 <tcp_receive+0x16c>
        pcb->rtime = 0;
 800780c:	8623      	strh	r3, [r4, #48]	; 0x30
 800780e:	e7ac      	b.n	800776a <tcp_receive+0x17e>
      tcp_send_empty_ack(pcb);
 8007810:	4620      	mov	r0, r4
 8007812:	f001 fb97 	bl	8008f44 <tcp_send_empty_ack>
 8007816:	e75e      	b.n	80076d6 <tcp_receive+0xea>
 8007818:	0800d1a9 	.word	0x0800d1a9
 800781c:	0800d1db 	.word	0x0800d1db
 8007820:	0800bc05 	.word	0x0800bc05
 8007824:	20005334 	.word	0x20005334
 8007828:	20005354 	.word	0x20005354
 800782c:	20005330 	.word	0x20005330
 8007830:	2000535c 	.word	0x2000535c
 8007834:	20005348 	.word	0x20005348
 8007838:	2000536a 	.word	0x2000536a
 800783c:	0800d1f4 	.word	0x0800d1f4
 8007840:	0800d21c 	.word	0x0800d21c
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007844:	682a      	ldr	r2, [r5, #0]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	9201      	str	r2, [sp, #4]
 800784a:	6858      	ldr	r0, [r3, #4]
 800784c:	f7fc ff2d 	bl	80046aa <lwip_htonl>
 8007850:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007852:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	4683      	mov	fp, r0
 800785a:	8998      	ldrh	r0, [r3, #12]
 800785c:	f7fc ff22 	bl	80046a4 <lwip_htons>
 8007860:	9a01      	ldr	r2, [sp, #4]
 8007862:	f010 0003 	ands.w	r0, r0, #3
 8007866:	eba2 0808 	sub.w	r8, r2, r8
 800786a:	bf18      	it	ne
 800786c:	2001      	movne	r0, #1
 800786e:	eba8 080b 	sub.w	r8, r8, fp
 8007872:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8007876:	f1b8 0f00 	cmp.w	r8, #0
 800787a:	db3d      	blt.n	80078f8 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007880:	1a9b      	subs	r3, r3, r2
 8007882:	2b00      	cmp	r3, #0
 8007884:	dc38      	bgt.n	80078f8 <tcp_receive+0x30c>
      next = pcb->unsent;
 8007886:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800788a:	f8d8 3000 	ldr.w	r3, [r8]
 800788e:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 8007890:	b90b      	cbnz	r3, 8007896 <tcp_receive+0x2aa>
        pcb->unsent_oversize = 0;
 8007892:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007896:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800789a:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 800789e:	f7fe fe5f 	bl	8006560 <pbuf_clen>
 80078a2:	4583      	cmp	fp, r0
 80078a4:	d206      	bcs.n	80078b4 <tcp_receive+0x2c8>
 80078a6:	4653      	mov	r3, sl
 80078a8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80078ac:	49b4      	ldr	r1, [pc, #720]	; (8007b80 <tcp_receive+0x594>)
 80078ae:	4648      	mov	r0, r9
 80078b0:	f003 f85c 	bl	800a96c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80078b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80078b8:	f7fe fe52 	bl	8006560 <pbuf_clen>
 80078bc:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80078c0:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80078c2:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 80078c4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80078c8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      recv_acked += next->len;
 80078cc:	4413      	add	r3, r2
      tcp_seg_free(next);
 80078ce:	4640      	mov	r0, r8
      recv_acked += next->len;
 80078d0:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 80078d2:	f7ff f89d 	bl	8006a10 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80078d6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80078da:	b153      	cbz	r3, 80078f2 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80078dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80078de:	b943      	cbnz	r3, 80078f2 <tcp_receive+0x306>
 80078e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80078e2:	b933      	cbnz	r3, 80078f2 <tcp_receive+0x306>
 80078e4:	4653      	mov	r3, sl
 80078e6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80078ea:	49a6      	ldr	r1, [pc, #664]	; (8007b84 <tcp_receive+0x598>)
 80078ec:	4648      	mov	r0, r9
 80078ee:	f003 f83d 	bl	800a96c <iprintf>
    while (pcb->unsent != NULL &&
 80078f2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1a5      	bne.n	8007844 <tcp_receive+0x258>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80078f8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80078fc:	883a      	ldrh	r2, [r7, #0]
 80078fe:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007900:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 8007902:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007906:	2a00      	cmp	r2, #0
 8007908:	f040 80f4 	bne.w	8007af4 <tcp_receive+0x508>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800790c:	4b9e      	ldr	r3, [pc, #632]	; (8007b88 <tcp_receive+0x59c>)
 800790e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007910:	8818      	ldrh	r0, [r3, #0]
 8007912:	4698      	mov	r8, r3
 8007914:	2800      	cmp	r0, #0
 8007916:	f000 8157 	beq.w	8007bc8 <tcp_receive+0x5dc>
 800791a:	7d23      	ldrb	r3, [r4, #20]
 800791c:	2b06      	cmp	r3, #6
 800791e:	f200 8153 	bhi.w	8007bc8 <tcp_receive+0x5dc>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007922:	6833      	ldr	r3, [r6, #0]
 8007924:	1ad5      	subs	r5, r2, r3
 8007926:	2d01      	cmp	r5, #1
 8007928:	f100 811c 	bmi.w	8007b64 <tcp_receive+0x578>
 800792c:	f1c3 0101 	rsb	r1, r3, #1
 8007930:	1a09      	subs	r1, r1, r0
 8007932:	4411      	add	r1, r2
 8007934:	2900      	cmp	r1, #0
 8007936:	f300 8115 	bgt.w	8007b64 <tcp_receive+0x578>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800793a:	4f94      	ldr	r7, [pc, #592]	; (8007b8c <tcp_receive+0x5a0>)
 800793c:	f8d7 9004 	ldr.w	r9, [r7, #4]
      off = pcb->rcv_nxt - seqno;
 8007940:	46aa      	mov	sl, r5
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007942:	f1b9 0f00 	cmp.w	r9, #0
 8007946:	d106      	bne.n	8007956 <tcp_receive+0x36a>
 8007948:	4b91      	ldr	r3, [pc, #580]	; (8007b90 <tcp_receive+0x5a4>)
 800794a:	4992      	ldr	r1, [pc, #584]	; (8007b94 <tcp_receive+0x5a8>)
 800794c:	4892      	ldr	r0, [pc, #584]	; (8007b98 <tcp_receive+0x5ac>)
 800794e:	f240 523c 	movw	r2, #1340	; 0x53c
 8007952:	f003 f80b 	bl	800a96c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007956:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800795a:	429d      	cmp	r5, r3
 800795c:	dd06      	ble.n	800796c <tcp_receive+0x380>
 800795e:	4b8c      	ldr	r3, [pc, #560]	; (8007b90 <tcp_receive+0x5a4>)
 8007960:	498e      	ldr	r1, [pc, #568]	; (8007b9c <tcp_receive+0x5b0>)
 8007962:	488d      	ldr	r0, [pc, #564]	; (8007b98 <tcp_receive+0x5ac>)
 8007964:	f240 523d 	movw	r2, #1341	; 0x53d
 8007968:	f003 f800 	bl	800a96c <iprintf>
      if (inseg.p->len < off) {
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	8943      	ldrh	r3, [r0, #10]
 8007970:	429d      	cmp	r5, r3
 8007972:	f340 80ec 	ble.w	8007b4e <tcp_receive+0x562>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007976:	8903      	ldrh	r3, [r0, #8]
 8007978:	429d      	cmp	r5, r3
 800797a:	dd06      	ble.n	800798a <tcp_receive+0x39e>
 800797c:	4b84      	ldr	r3, [pc, #528]	; (8007b90 <tcp_receive+0x5a4>)
 800797e:	4988      	ldr	r1, [pc, #544]	; (8007ba0 <tcp_receive+0x5b4>)
 8007980:	4885      	ldr	r0, [pc, #532]	; (8007b98 <tcp_receive+0x5ac>)
 8007982:	f240 523f 	movw	r2, #1343	; 0x53f
 8007986:	f002 fff1 	bl	800a96c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	8919      	ldrh	r1, [r3, #8]
 800798e:	1b4d      	subs	r5, r1, r5
 8007990:	b2ad      	uxth	r5, r5
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 8007992:	2200      	movs	r2, #0
        while (p->len < off) {
 8007994:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8007998:	459a      	cmp	sl, r3
 800799a:	f300 80cf 	bgt.w	8007b3c <tcp_receive+0x550>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800799e:	f1ca 0100 	rsb	r1, sl, #0
 80079a2:	b209      	sxth	r1, r1
 80079a4:	4648      	mov	r0, r9
 80079a6:	f7fe fc1f 	bl	80061e8 <pbuf_header>
 80079aa:	b130      	cbz	r0, 80079ba <tcp_receive+0x3ce>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80079ac:	4b78      	ldr	r3, [pc, #480]	; (8007b90 <tcp_receive+0x5a4>)
 80079ae:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80079b2:	497c      	ldr	r1, [pc, #496]	; (8007ba4 <tcp_receive+0x5b8>)
 80079b4:	4878      	ldr	r0, [pc, #480]	; (8007b98 <tcp_receive+0x5ac>)
 80079b6:	f002 ffd9 	bl	800a96c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80079ba:	6833      	ldr	r3, [r6, #0]
 80079bc:	8939      	ldrh	r1, [r7, #8]
 80079be:	6a62      	ldr	r2, [r4, #36]	; 0x24
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80079c0:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80079c2:	440b      	add	r3, r1
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	813b      	strh	r3, [r7, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80079cc:	6831      	ldr	r1, [r6, #0]
 80079ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80079d0:	1a8b      	subs	r3, r1, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f2c0 80f2 	blt.w	8007bbc <tcp_receive+0x5d0>
 80079d8:	1c4b      	adds	r3, r1, #1
 80079da:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80079dc:	1a9b      	subs	r3, r3, r2
 80079de:	1a1b      	subs	r3, r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f300 80eb 	bgt.w	8007bbc <tcp_receive+0x5d0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80079e6:	4291      	cmp	r1, r2
 80079e8:	f040 80e8 	bne.w	8007bbc <tcp_receive+0x5d0>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80079ec:	4d67      	ldr	r5, [pc, #412]	; (8007b8c <tcp_receive+0x5a0>)
 80079ee:	68eb      	ldr	r3, [r5, #12]
 80079f0:	892f      	ldrh	r7, [r5, #8]
 80079f2:	8998      	ldrh	r0, [r3, #12]
 80079f4:	f7fc fe56 	bl	80046a4 <lwip_htons>
 80079f8:	f010 0003 	ands.w	r0, r0, #3
 80079fc:	bf18      	it	ne
 80079fe:	2001      	movne	r0, #1
 8007a00:	4438      	add	r0, r7

        if (tcplen > pcb->rcv_wnd) {
 8007a02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8007a04:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8007a06:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8007a08:	f8a8 0000 	strh.w	r0, [r8]
        if (tcplen > pcb->rcv_wnd) {
 8007a0c:	d241      	bcs.n	8007a92 <tcp_receive+0x4a6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007a0e:	68eb      	ldr	r3, [r5, #12]
 8007a10:	8998      	ldrh	r0, [r3, #12]
 8007a12:	f7fc fe47 	bl	80046a4 <lwip_htons>
 8007a16:	07c7      	lsls	r7, r0, #31
 8007a18:	d50f      	bpl.n	8007a3a <tcp_receive+0x44e>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8007a1a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8007a1e:	f8b9 700c 	ldrh.w	r7, [r9, #12]
 8007a22:	4638      	mov	r0, r7
 8007a24:	f7fc fe3e 	bl	80046a4 <lwip_htons>
 8007a28:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8007a2c:	f7fc fe3a 	bl	80046a4 <lwip_htons>
 8007a30:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 8007a34:	4307      	orrs	r7, r0
 8007a36:	f8a9 700c 	strh.w	r7, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8007a3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a3c:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8007a3e:	68eb      	ldr	r3, [r5, #12]
 8007a40:	8998      	ldrh	r0, [r3, #12]
 8007a42:	f7fc fe2f 	bl	80046a4 <lwip_htons>
 8007a46:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8007a48:	bf48      	it	mi
 8007a4a:	892b      	ldrhmi	r3, [r5, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8007a4c:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8007a4e:	bf44      	itt	mi
 8007a50:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8007a54:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8007a56:	8929      	ldrh	r1, [r5, #8]
 8007a58:	f7fe fd12 	bl	8006480 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8007a5c:	68eb      	ldr	r3, [r5, #12]
 8007a5e:	892f      	ldrh	r7, [r5, #8]
 8007a60:	8998      	ldrh	r0, [r3, #12]
 8007a62:	f7fc fe1f 	bl	80046a4 <lwip_htons>
 8007a66:	f010 0003 	ands.w	r0, r0, #3
 8007a6a:	bf18      	it	ne
 8007a6c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007a6e:	6833      	ldr	r3, [r6, #0]
 8007a70:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8007a72:	4438      	add	r0, r7
 8007a74:	b280      	uxth	r0, r0
 8007a76:	f8a8 0000 	strh.w	r0, [r8]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8007a7a:	4418      	add	r0, r3
 8007a7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a7e:	4413      	add	r3, r2
 8007a80:	4298      	cmp	r0, r3
 8007a82:	d006      	beq.n	8007a92 <tcp_receive+0x4a6>
 8007a84:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <tcp_receive+0x5a4>)
 8007a86:	4948      	ldr	r1, [pc, #288]	; (8007ba8 <tcp_receive+0x5bc>)
 8007a88:	4843      	ldr	r0, [pc, #268]	; (8007b98 <tcp_receive+0x5ac>)
 8007a8a:	f240 527f 	movw	r2, #1407	; 0x57f
 8007a8e:	f002 ff6d 	bl	800a96c <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8007a92:	f8b8 2000 	ldrh.w	r2, [r8]
 8007a96:	6833      	ldr	r3, [r6, #0]
 8007a98:	4413      	add	r3, r2
 8007a9a:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8007a9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d206      	bcs.n	8007ab0 <tcp_receive+0x4c4>
 8007aa2:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <tcp_receive+0x5a4>)
 8007aa4:	4941      	ldr	r1, [pc, #260]	; (8007bac <tcp_receive+0x5c0>)
 8007aa6:	483c      	ldr	r0, [pc, #240]	; (8007b98 <tcp_receive+0x5ac>)
 8007aa8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8007aac:	f002 ff5e 	bl	800a96c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8007ab0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8007ab2:	f8b8 2000 	ldrh.w	r2, [r8]
 8007ab6:	1a9b      	subs	r3, r3, r2
 8007ab8:	8523      	strh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8007aba:	4620      	mov	r0, r4
 8007abc:	f7fe ff3c 	bl	8006938 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8007ac0:	686b      	ldr	r3, [r5, #4]
 8007ac2:	891a      	ldrh	r2, [r3, #8]
 8007ac4:	b11a      	cbz	r2, 8007ace <tcp_receive+0x4e2>
          recv_data = inseg.p;
 8007ac6:	4a3a      	ldr	r2, [pc, #232]	; (8007bb0 <tcp_receive+0x5c4>)
 8007ac8:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8007ace:	68eb      	ldr	r3, [r5, #12]
 8007ad0:	8998      	ldrh	r0, [r3, #12]
 8007ad2:	f7fc fde7 	bl	80046a4 <lwip_htons>
 8007ad6:	07c1      	lsls	r1, r0, #31
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8007ad8:	bf41      	itttt	mi
 8007ada:	4a36      	ldrmi	r2, [pc, #216]	; (8007bb4 <tcp_receive+0x5c8>)
 8007adc:	7813      	ldrbmi	r3, [r2, #0]
 8007ade:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae2:	7013      	strbmi	r3, [r2, #0]
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8007ae4:	7ea3      	ldrb	r3, [r4, #26]
 8007ae6:	07da      	lsls	r2, r3, #31
 8007ae8:	d544      	bpl.n	8007b74 <tcp_receive+0x588>
 8007aea:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8007aee:	f043 0302 	orr.w	r3, r3, #2
 8007af2:	e041      	b.n	8007b78 <tcp_receive+0x58c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007af6:	6829      	ldr	r1, [r5, #0]
 8007af8:	1a5b      	subs	r3, r3, r1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f6bf af06 	bge.w	800790c <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007b00:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <tcp_receive+0x5cc>)
      m = m - (pcb->sa >> 3);
 8007b02:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007b06:	6819      	ldr	r1, [r3, #0]
 8007b08:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sa >> 3);
 8007b0a:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
 8007b0e:	b289      	uxth	r1, r1
 8007b10:	b20b      	sxth	r3, r1
      if (m < 0) {
 8007b12:	2b00      	cmp	r3, #0
      m = m - (pcb->sv >> 2);
 8007b14:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 8007b18:	4408      	add	r0, r1
        m = -m;
 8007b1a:	bfbc      	itt	lt
 8007b1c:	4249      	neglt	r1, r1
 8007b1e:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 8007b20:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8007b24:	4413      	add	r3, r2
      pcb->sa += m;
 8007b26:	b200      	sxth	r0, r0
      pcb->sv += m;
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007b2c:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8007b30:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8007b34:	2300      	movs	r3, #0
      pcb->sa += m;
 8007b36:	87a0      	strh	r0, [r4, #60]	; 0x3c
      pcb->rttest = 0;
 8007b38:	6363      	str	r3, [r4, #52]	; 0x34
 8007b3a:	e6e7      	b.n	800790c <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 8007b3c:	f8a9 5008 	strh.w	r5, [r9, #8]
          p->len = 0;
 8007b40:	f8a9 200a 	strh.w	r2, [r9, #10]
          off -= p->len;
 8007b44:	ebaa 0a03 	sub.w	sl, sl, r3
          p = p->next;
 8007b48:	f8d9 9000 	ldr.w	r9, [r9]
 8007b4c:	e722      	b.n	8007994 <tcp_receive+0x3a8>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007b4e:	4269      	negs	r1, r5
 8007b50:	b209      	sxth	r1, r1
 8007b52:	f7fe fb49 	bl	80061e8 <pbuf_header>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f43f af2f 	beq.w	80079ba <tcp_receive+0x3ce>
          LWIP_ASSERT("pbuf_header failed", 0);
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <tcp_receive+0x5a4>)
 8007b5e:	f240 5251 	movw	r2, #1361	; 0x551
 8007b62:	e726      	b.n	80079b2 <tcp_receive+0x3c6>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007b64:	1a9b      	subs	r3, r3, r2
 8007b66:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8007b68:	bfbe      	ittt	lt
 8007b6a:	7ea3      	ldrblt	r3, [r4, #26]
 8007b6c:	f043 0302 	orrlt.w	r3, r3, #2
 8007b70:	76a3      	strblt	r3, [r4, #26]
 8007b72:	e72b      	b.n	80079cc <tcp_receive+0x3e0>
        tcp_ack(pcb);
 8007b74:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 8007b78:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8007b7a:	b003      	add	sp, #12
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	0800d1f4 	.word	0x0800d1f4
 8007b84:	0800d21c 	.word	0x0800d21c
 8007b88:	2000536a 	.word	0x2000536a
 8007b8c:	20005338 	.word	0x20005338
 8007b90:	0800d1a9 	.word	0x0800d1a9
 8007b94:	0800d23c 	.word	0x0800d23c
 8007b98:	0800bc05 	.word	0x0800bc05
 8007b9c:	0800d24c 	.word	0x0800d24c
 8007ba0:	0800d25b 	.word	0x0800d25b
 8007ba4:	0800d26b 	.word	0x0800d26b
 8007ba8:	0800d27e 	.word	0x0800d27e
 8007bac:	0800d2b5 	.word	0x0800d2b5
 8007bb0:	2000534c 	.word	0x2000534c
 8007bb4:	20005350 	.word	0x20005350
 8007bb8:	2000d928 	.word	0x2000d928
        tcp_send_empty_ack(pcb);
 8007bbc:	4620      	mov	r0, r4
}
 8007bbe:	b003      	add	sp, #12
 8007bc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8007bc4:	f001 b9be 	b.w	8008f44 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8007bc8:	6833      	ldr	r3, [r6, #0]
 8007bca:	1a99      	subs	r1, r3, r2
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	db05      	blt.n	8007bdc <tcp_receive+0x5f0>
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	1a9b      	subs	r3, r3, r2
 8007bd4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	ddce      	ble.n	8007b7a <tcp_receive+0x58e>
      tcp_ack_now(pcb);
 8007bdc:	7ea3      	ldrb	r3, [r4, #26]
 8007bde:	e786      	b.n	8007aee <tcp_receive+0x502>
        pcb->dupacks = 0;
 8007be0:	2300      	movs	r3, #0
 8007be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007be6:	e576      	b.n	80076d6 <tcp_receive+0xea>

08007be8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <tcp_getoptbyte+0x30>)
 8007bea:	4a0c      	ldr	r2, [pc, #48]	; (8007c1c <tcp_getoptbyte+0x34>)
 8007bec:	6819      	ldr	r1, [r3, #0]
{
 8007bee:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8007bf0:	b121      	cbz	r1, 8007bfc <tcp_getoptbyte+0x14>
 8007bf2:	480b      	ldr	r0, [pc, #44]	; (8007c20 <tcp_getoptbyte+0x38>)
 8007bf4:	8813      	ldrh	r3, [r2, #0]
 8007bf6:	8800      	ldrh	r0, [r0, #0]
 8007bf8:	4283      	cmp	r3, r0
 8007bfa:	d207      	bcs.n	8007c0c <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8007bfe:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8007c00:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8007c02:	440b      	add	r3, r1
 8007c04:	1c48      	adds	r0, r1, #1
 8007c06:	8010      	strh	r0, [r2, #0]
 8007c08:	7d18      	ldrb	r0, [r3, #20]
 8007c0a:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007c0c:	1c5c      	adds	r4, r3, #1
 8007c0e:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8007c10:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8007c12:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8007c14:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8007c16:	bd10      	pop	{r4, pc}
 8007c18:	20005364 	.word	0x20005364
 8007c1c:	20005358 	.word	0x20005358
 8007c20:	20005360 	.word	0x20005360
 8007c24:	2000535c 	.word	0x2000535c

08007c28 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8007c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007c2c:	4d1a      	ldr	r5, [pc, #104]	; (8007c98 <tcp_parseopt.isra.1.part.2+0x70>)
 8007c2e:	4e1b      	ldr	r6, [pc, #108]	; (8007c9c <tcp_parseopt.isra.1.part.2+0x74>)
 8007c30:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8007c32:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007c34:	802b      	strh	r3, [r5, #0]
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
        mss |= tcp_getoptbyte();
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007c36:	f240 58b3 	movw	r8, #1459	; 0x5b3
 8007c3a:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8007c3e:	8834      	ldrh	r4, [r6, #0]
 8007c40:	882b      	ldrh	r3, [r5, #0]
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	d301      	bcc.n	8007c4a <tcp_parseopt.isra.1.part.2+0x22>
 8007c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      u8_t opt = tcp_getoptbyte();
 8007c4a:	f7ff ffcd 	bl	8007be8 <tcp_getoptbyte>
      switch (opt) {
 8007c4e:	2801      	cmp	r0, #1
 8007c50:	d0f5      	beq.n	8007c3e <tcp_parseopt.isra.1.part.2+0x16>
 8007c52:	d3f8      	bcc.n	8007c46 <tcp_parseopt.isra.1.part.2+0x1e>
 8007c54:	2802      	cmp	r0, #2
 8007c56:	d116      	bne.n	8007c86 <tcp_parseopt.isra.1.part.2+0x5e>
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8007c58:	f7ff ffc6 	bl	8007be8 <tcp_getoptbyte>
 8007c5c:	2804      	cmp	r0, #4
 8007c5e:	d1f2      	bne.n	8007c46 <tcp_parseopt.isra.1.part.2+0x1e>
 8007c60:	882b      	ldrh	r3, [r5, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	daee      	bge.n	8007c46 <tcp_parseopt.isra.1.part.2+0x1e>
        mss = (tcp_getoptbyte() << 8);
 8007c68:	f7ff ffbe 	bl	8007be8 <tcp_getoptbyte>
 8007c6c:	0200      	lsls	r0, r0, #8
 8007c6e:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8007c70:	f7ff ffba 	bl	8007be8 <tcp_getoptbyte>
 8007c74:	4320      	orrs	r0, r4
 8007c76:	b280      	uxth	r0, r0
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8007c78:	1e43      	subs	r3, r0, #1
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4543      	cmp	r3, r8
 8007c7e:	bf88      	it	hi
 8007c80:	4648      	movhi	r0, r9
 8007c82:	8038      	strh	r0, [r7, #0]
 8007c84:	e7db      	b.n	8007c3e <tcp_parseopt.isra.1.part.2+0x16>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8007c86:	f7ff ffaf 	bl	8007be8 <tcp_getoptbyte>
        if (data < 2) {
 8007c8a:	2801      	cmp	r0, #1
 8007c8c:	d9db      	bls.n	8007c46 <tcp_parseopt.isra.1.part.2+0x1e>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8007c8e:	882b      	ldrh	r3, [r5, #0]
 8007c90:	3b02      	subs	r3, #2
 8007c92:	4418      	add	r0, r3
 8007c94:	8028      	strh	r0, [r5, #0]
 8007c96:	e7d2      	b.n	8007c3e <tcp_parseopt.isra.1.part.2+0x16>
 8007c98:	20005358 	.word	0x20005358
 8007c9c:	20005368 	.word	0x20005368

08007ca0 <tcp_input_delayed_close>:
{
 8007ca0:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <tcp_input_delayed_close+0x38>)
{
 8007ca4:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8007ca6:	7818      	ldrb	r0, [r3, #0]
 8007ca8:	f010 0010 	ands.w	r0, r0, #16
 8007cac:	d012      	beq.n	8007cd4 <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007cae:	7ea3      	ldrb	r3, [r4, #26]
 8007cb0:	06db      	lsls	r3, r3, #27
 8007cb2:	d406      	bmi.n	8007cc2 <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007cb4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8007cb8:	b11b      	cbz	r3, 8007cc2 <tcp_input_delayed_close+0x22>
 8007cba:	f06f 010e 	mvn.w	r1, #14
 8007cbe:	6920      	ldr	r0, [r4, #16]
 8007cc0:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <tcp_input_delayed_close+0x3c>)
 8007cc6:	f7ff f905 	bl	8006ed4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007cca:	2001      	movs	r0, #1
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7fe f937 	bl	8005f40 <memp_free>
 8007cd2:	2001      	movs	r0, #1
}
 8007cd4:	bd10      	pop	{r4, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20005350 	.word	0x20005350
 8007cdc:	2000d924 	.word	0x2000d924

08007ce0 <tcp_input>:
{
 8007ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8007ce4:	4e9f      	ldr	r6, [pc, #636]	; (8007f64 <tcp_input+0x284>)
 8007ce6:	6843      	ldr	r3, [r0, #4]
 8007ce8:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8007cea:	8943      	ldrh	r3, [r0, #10]
 8007cec:	2b13      	cmp	r3, #19
{
 8007cee:	b089      	sub	sp, #36	; 0x24
 8007cf0:	4605      	mov	r5, r0
  if (p->len < TCP_HLEN) {
 8007cf2:	f240 81b2 	bls.w	800805a <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007cf6:	4f9c      	ldr	r7, [pc, #624]	; (8007f68 <tcp_input+0x288>)
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	6978      	ldr	r0, [r7, #20]
 8007cfc:	f7fd fadf 	bl	80052be <ip4_addr_isbroadcast_u32>
 8007d00:	46b8      	mov	r8, r7
 8007d02:	4604      	mov	r4, r0
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f040 81a8 	bne.w	800805a <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007d10:	2be0      	cmp	r3, #224	; 0xe0
 8007d12:	f000 81a2 	beq.w	800805a <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8007d16:	6833      	ldr	r3, [r6, #0]
 8007d18:	8998      	ldrh	r0, [r3, #12]
 8007d1a:	f7fc fcc3 	bl	80046a4 <lwip_htons>
 8007d1e:	0a81      	lsrs	r1, r0, #10
 8007d20:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007d24:	2913      	cmp	r1, #19
 8007d26:	f240 8198 	bls.w	800805a <tcp_input+0x37a>
 8007d2a:	892b      	ldrh	r3, [r5, #8]
 8007d2c:	b289      	uxth	r1, r1
 8007d2e:	428b      	cmp	r3, r1
 8007d30:	f0c0 8193 	bcc.w	800805a <tcp_input+0x37a>
  if (p->len >= hdrlen_bytes) {
 8007d34:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007d36:	4a8d      	ldr	r2, [pc, #564]	; (8007f6c <tcp_input+0x28c>)
  tcphdr_opt2 = NULL;
 8007d38:	4f8d      	ldr	r7, [pc, #564]	; (8007f70 <tcp_input+0x290>)
 8007d3a:	9206      	str	r2, [sp, #24]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007d3c:	f1a1 0314 	sub.w	r3, r1, #20
 8007d40:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 8007d42:	4288      	cmp	r0, r1
  tcphdr_opt2 = NULL;
 8007d44:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8007d46:	8013      	strh	r3, [r2, #0]
 8007d48:	4c8a      	ldr	r4, [pc, #552]	; (8007f74 <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8007d4a:	d344      	bcc.n	8007dd6 <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007d4c:	4249      	negs	r1, r1
 8007d4e:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8007d50:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8007d52:	f7fe fa49 	bl	80061e8 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d56:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d58:	f8df b26c 	ldr.w	fp, [pc, #620]	; 8007fc8 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d5c:	8820      	ldrh	r0, [r4, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d5e:	4f86      	ldr	r7, [pc, #536]	; (8007f78 <tcp_input+0x298>)
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d60:	f7fc fca0 	bl	80046a4 <lwip_htons>
 8007d64:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007d66:	6834      	ldr	r4, [r6, #0]
 8007d68:	8860      	ldrh	r0, [r4, #2]
 8007d6a:	f7fc fc9b 	bl	80046a4 <lwip_htons>
 8007d6e:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d70:	6834      	ldr	r4, [r6, #0]
 8007d72:	6860      	ldr	r0, [r4, #4]
 8007d74:	f7fc fc99 	bl	80046aa <lwip_htonl>
 8007d78:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d7a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007d7c:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d80:	68a0      	ldr	r0, [r4, #8]
 8007d82:	f7fc fc92 	bl	80046aa <lwip_htonl>
 8007d86:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007d88:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007d8a:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007d8c:	89e0      	ldrh	r0, [r4, #14]
 8007d8e:	f7fc fc89 	bl	80046a4 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8007d92:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007d94:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8007d96:	8998      	ldrh	r0, [r3, #12]
 8007d98:	f7fc fc84 	bl	80046a4 <lwip_htons>
 8007d9c:	b2c0      	uxtb	r0, r0
 8007d9e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007da2:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8007da4:	4a75      	ldr	r2, [pc, #468]	; (8007f7c <tcp_input+0x29c>)
 8007da6:	9203      	str	r2, [sp, #12]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007da8:	f010 0003 	ands.w	r0, r0, #3
 8007dac:	bf18      	it	ne
 8007dae:	2001      	movne	r0, #1
 8007db0:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007db2:	4973      	ldr	r1, [pc, #460]	; (8007f80 <tcp_input+0x2a0>)
  flags = TCPH_FLAGS(tcphdr);
 8007db4:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007db6:	4b73      	ldr	r3, [pc, #460]	; (8007f84 <tcp_input+0x2a4>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007db8:	680c      	ldr	r4, [r1, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8007dba:	8018      	strh	r0, [r3, #0]
  prev = NULL;
 8007dbc:	f04f 0a00 	mov.w	sl, #0
 8007dc0:	9304      	str	r3, [sp, #16]
 8007dc2:	4689      	mov	r9, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dc4:	2c00      	cmp	r4, #0
 8007dc6:	d140      	bne.n	8007e4a <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dc8:	4b6f      	ldr	r3, [pc, #444]	; (8007f88 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007dca:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8007f8c <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dce:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007dd0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007fcc <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dd4:	e148      	b.n	8008068 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007dd6:	682b      	ldr	r3, [r5, #0]
 8007dd8:	b92b      	cbnz	r3, 8007de6 <tcp_input+0x106>
 8007dda:	4b6c      	ldr	r3, [pc, #432]	; (8007f8c <tcp_input+0x2ac>)
 8007ddc:	496c      	ldr	r1, [pc, #432]	; (8007f90 <tcp_input+0x2b0>)
 8007dde:	486d      	ldr	r0, [pc, #436]	; (8007f94 <tcp_input+0x2b4>)
 8007de0:	22b2      	movs	r2, #178	; 0xb2
 8007de2:	f002 fdc3 	bl	800a96c <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8007de6:	f06f 0113 	mvn.w	r1, #19
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7fe f9fc 	bl	80061e8 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007df0:	9b06      	ldr	r3, [sp, #24]
    tcphdr_opt1len = p->len;
 8007df2:	8969      	ldrh	r1, [r5, #10]
 8007df4:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007df6:	881c      	ldrh	r4, [r3, #0]
 8007df8:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8007dfa:	4249      	negs	r1, r1
 8007dfc:	b209      	sxth	r1, r1
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f7fe f9f2 	bl	80061e8 <pbuf_header>
    if (opt2len > p->next->len) {
 8007e04:	6828      	ldr	r0, [r5, #0]
 8007e06:	8943      	ldrh	r3, [r0, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8007e08:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8007e0a:	42a3      	cmp	r3, r4
 8007e0c:	f0c0 8125 	bcc.w	800805a <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8007e10:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8007e12:	6843      	ldr	r3, [r0, #4]
 8007e14:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8007e16:	b209      	sxth	r1, r1
 8007e18:	f7fe f9e6 	bl	80061e8 <pbuf_header>
    p->tot_len -= opt2len;
 8007e1c:	892b      	ldrh	r3, [r5, #8]
 8007e1e:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007e20:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8007e22:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007e24:	b12b      	cbz	r3, 8007e32 <tcp_input+0x152>
 8007e26:	4b59      	ldr	r3, [pc, #356]	; (8007f8c <tcp_input+0x2ac>)
 8007e28:	495b      	ldr	r1, [pc, #364]	; (8007f98 <tcp_input+0x2b8>)
 8007e2a:	485a      	ldr	r0, [pc, #360]	; (8007f94 <tcp_input+0x2b4>)
 8007e2c:	22cf      	movs	r2, #207	; 0xcf
 8007e2e:	f002 fd9d 	bl	800a96c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	892a      	ldrh	r2, [r5, #8]
 8007e36:	891b      	ldrh	r3, [r3, #8]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d08c      	beq.n	8007d56 <tcp_input+0x76>
 8007e3c:	4b53      	ldr	r3, [pc, #332]	; (8007f8c <tcp_input+0x2ac>)
 8007e3e:	4957      	ldr	r1, [pc, #348]	; (8007f9c <tcp_input+0x2bc>)
 8007e40:	4854      	ldr	r0, [pc, #336]	; (8007f94 <tcp_input+0x2b4>)
 8007e42:	22d0      	movs	r2, #208	; 0xd0
 8007e44:	f002 fd92 	bl	800a96c <iprintf>
 8007e48:	e785      	b.n	8007d56 <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007e4a:	7d23      	ldrb	r3, [r4, #20]
 8007e4c:	b92b      	cbnz	r3, 8007e5a <tcp_input+0x17a>
 8007e4e:	4b4f      	ldr	r3, [pc, #316]	; (8007f8c <tcp_input+0x2ac>)
 8007e50:	4953      	ldr	r1, [pc, #332]	; (8007fa0 <tcp_input+0x2c0>)
 8007e52:	4850      	ldr	r0, [pc, #320]	; (8007f94 <tcp_input+0x2b4>)
 8007e54:	22e2      	movs	r2, #226	; 0xe2
 8007e56:	f002 fd89 	bl	800a96c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e5a:	7d23      	ldrb	r3, [r4, #20]
 8007e5c:	2b0a      	cmp	r3, #10
 8007e5e:	d105      	bne.n	8007e6c <tcp_input+0x18c>
 8007e60:	4b4a      	ldr	r3, [pc, #296]	; (8007f8c <tcp_input+0x2ac>)
 8007e62:	4950      	ldr	r1, [pc, #320]	; (8007fa4 <tcp_input+0x2c4>)
 8007e64:	484b      	ldr	r0, [pc, #300]	; (8007f94 <tcp_input+0x2b4>)
 8007e66:	22e3      	movs	r2, #227	; 0xe3
 8007e68:	f002 fd80 	bl	800a96c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e6c:	7d23      	ldrb	r3, [r4, #20]
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d105      	bne.n	8007e7e <tcp_input+0x19e>
 8007e72:	4b46      	ldr	r3, [pc, #280]	; (8007f8c <tcp_input+0x2ac>)
 8007e74:	494c      	ldr	r1, [pc, #304]	; (8007fa8 <tcp_input+0x2c8>)
 8007e76:	4847      	ldr	r0, [pc, #284]	; (8007f94 <tcp_input+0x2b4>)
 8007e78:	22e4      	movs	r2, #228	; 0xe4
 8007e7a:	f002 fd77 	bl	800a96c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8007e7e:	6832      	ldr	r2, [r6, #0]
 8007e80:	8b21      	ldrh	r1, [r4, #24]
 8007e82:	8813      	ldrh	r3, [r2, #0]
 8007e84:	4299      	cmp	r1, r3
 8007e86:	68e3      	ldr	r3, [r4, #12]
 8007e88:	d169      	bne.n	8007f5e <tcp_input+0x27e>
 8007e8a:	8ae1      	ldrh	r1, [r4, #22]
 8007e8c:	8852      	ldrh	r2, [r2, #2]
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	d165      	bne.n	8007f5e <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8007e92:	6861      	ldr	r1, [r4, #4]
 8007e94:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007e98:	4291      	cmp	r1, r2
 8007e9a:	d160      	bne.n	8007f5e <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007e9c:	6821      	ldr	r1, [r4, #0]
 8007e9e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8007ea2:	4291      	cmp	r1, r2
 8007ea4:	d15b      	bne.n	8007f5e <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	f040 8405 	bne.w	80086b6 <tcp_input+0x9d6>
 8007eac:	4b37      	ldr	r3, [pc, #220]	; (8007f8c <tcp_input+0x2ac>)
 8007eae:	493f      	ldr	r1, [pc, #252]	; (8007fac <tcp_input+0x2cc>)
 8007eb0:	4838      	ldr	r0, [pc, #224]	; (8007f94 <tcp_input+0x2b4>)
 8007eb2:	22ec      	movs	r2, #236	; 0xec
 8007eb4:	f002 fd5a 	bl	800a96c <iprintf>
      if (prev != NULL) {
 8007eb8:	f1ba 0f00 	cmp.w	sl, #0
 8007ebc:	d007      	beq.n	8007ece <tcp_input+0x1ee>
        prev->next = pcb->next;
 8007ebe:	68e3      	ldr	r3, [r4, #12]
 8007ec0:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8007ec4:	f8d9 3000 	ldr.w	r3, [r9]
 8007ec8:	60e3      	str	r3, [r4, #12]
        tcp_active_pcbs = pcb;
 8007eca:	f8c9 4000 	str.w	r4, [r9]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d105      	bne.n	8007ee0 <tcp_input+0x200>
 8007ed4:	4b2d      	ldr	r3, [pc, #180]	; (8007f8c <tcp_input+0x2ac>)
 8007ed6:	4936      	ldr	r1, [pc, #216]	; (8007fb0 <tcp_input+0x2d0>)
 8007ed8:	482e      	ldr	r0, [pc, #184]	; (8007f94 <tcp_input+0x2b4>)
 8007eda:	22f4      	movs	r2, #244	; 0xf4
 8007edc:	f002 fd46 	bl	800a96c <iprintf>
    inseg.next = NULL;
 8007ee0:	4b34      	ldr	r3, [pc, #208]	; (8007fb4 <tcp_input+0x2d4>)
    inseg.len = p->tot_len;
 8007ee2:	8929      	ldrh	r1, [r5, #8]
 8007ee4:	8119      	strh	r1, [r3, #8]
    inseg.next = NULL;
 8007ee6:	2200      	movs	r2, #0
    inseg.tcphdr = tcphdr;
 8007ee8:	6831      	ldr	r1, [r6, #0]
    inseg.next = NULL;
 8007eea:	601a      	str	r2, [r3, #0]
    inseg.tcphdr = tcphdr;
 8007eec:	60d9      	str	r1, [r3, #12]
    recv_flags = 0;
 8007eee:	4832      	ldr	r0, [pc, #200]	; (8007fb8 <tcp_input+0x2d8>)
    recv_acked = 0;
 8007ef0:	4932      	ldr	r1, [pc, #200]	; (8007fbc <tcp_input+0x2dc>)
    inseg.p = p;
 8007ef2:	605d      	str	r5, [r3, #4]
    recv_data = NULL;
 8007ef4:	4b32      	ldr	r3, [pc, #200]	; (8007fc0 <tcp_input+0x2e0>)
    recv_flags = 0;
 8007ef6:	7002      	strb	r2, [r0, #0]
    recv_data = NULL;
 8007ef8:	601a      	str	r2, [r3, #0]
    recv_acked = 0;
 8007efa:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8007efc:	9a03      	ldr	r2, [sp, #12]
 8007efe:	9105      	str	r1, [sp, #20]
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	f012 0f08 	tst.w	r2, #8
 8007f06:	4680      	mov	r8, r0
 8007f08:	469a      	mov	sl, r3
 8007f0a:	d003      	beq.n	8007f14 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8007f0c:	7b6b      	ldrb	r3, [r5, #13]
 8007f0e:	f043 0301 	orr.w	r3, r3, #1
 8007f12:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8007f14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007f16:	4d2b      	ldr	r5, [pc, #172]	; (8007fc4 <tcp_input+0x2e4>)
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f000 8137 	beq.w	800818c <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f7ff f8de 	bl	80070e0 <tcp_process_refused_data>
 8007f24:	300d      	adds	r0, #13
 8007f26:	d008      	beq.n	8007f3a <tcp_input+0x25a>
 8007f28:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 812e 	beq.w	800818c <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 8129 	beq.w	800818c <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8007f3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007f3c:	b913      	cbnz	r3, 8007f44 <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f001 f800 	bl	8008f44 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8007f44:	2400      	movs	r4, #0
 8007f46:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8007f48:	4d1a      	ldr	r5, [pc, #104]	; (8007fb4 <tcp_input+0x2d4>)
    recv_data = NULL;
 8007f4a:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8007f4e:	6868      	ldr	r0, [r5, #4]
 8007f50:	b110      	cbz	r0, 8007f58 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8007f52:	f7fe f94f 	bl	80061f4 <pbuf_free>
      inseg.p = NULL;
 8007f56:	606c      	str	r4, [r5, #4]
}
 8007f58:	b009      	add	sp, #36	; 0x24
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f5e:	46a2      	mov	sl, r4
 8007f60:	461c      	mov	r4, r3
 8007f62:	e72f      	b.n	8007dc4 <tcp_input+0xe4>
 8007f64:	2000535c 	.word	0x2000535c
 8007f68:	200055ec 	.word	0x200055ec
 8007f6c:	20005368 	.word	0x20005368
 8007f70:	20005364 	.word	0x20005364
 8007f74:	20005360 	.word	0x20005360
 8007f78:	20005330 	.word	0x20005330
 8007f7c:	20005334 	.word	0x20005334
 8007f80:	2000d924 	.word	0x2000d924
 8007f84:	2000536a 	.word	0x2000536a
 8007f88:	2000d934 	.word	0x2000d934
 8007f8c:	0800d1a9 	.word	0x0800d1a9
 8007f90:	0800cff3 	.word	0x0800cff3
 8007f94:	0800bc05 	.word	0x0800bc05
 8007f98:	0800d003 	.word	0x0800d003
 8007f9c:	0800d00f 	.word	0x0800d00f
 8007fa0:	0800d02e 	.word	0x0800d02e
 8007fa4:	0800d055 	.word	0x0800d055
 8007fa8:	0800d07f 	.word	0x0800d07f
 8007fac:	0800d0a6 	.word	0x0800d0a6
 8007fb0:	0800d0d1 	.word	0x0800d0d1
 8007fb4:	20005338 	.word	0x20005338
 8007fb8:	20005350 	.word	0x20005350
 8007fbc:	20005348 	.word	0x20005348
 8007fc0:	2000534c 	.word	0x2000534c
 8007fc4:	2000d938 	.word	0x2000d938
 8007fc8:	20005354 	.word	0x20005354
 8007fcc:	0800d0fb 	.word	0x0800d0fb
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fd0:	7d23      	ldrb	r3, [r4, #20]
 8007fd2:	2b0a      	cmp	r3, #10
 8007fd4:	d005      	beq.n	8007fe2 <tcp_input+0x302>
 8007fd6:	4653      	mov	r3, sl
 8007fd8:	22fe      	movs	r2, #254	; 0xfe
 8007fda:	4649      	mov	r1, r9
 8007fdc:	489d      	ldr	r0, [pc, #628]	; (8008254 <tcp_input+0x574>)
 8007fde:	f002 fcc5 	bl	800a96c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8007fe2:	6833      	ldr	r3, [r6, #0]
 8007fe4:	8b22      	ldrh	r2, [r4, #24]
 8007fe6:	8818      	ldrh	r0, [r3, #0]
 8007fe8:	4290      	cmp	r0, r2
 8007fea:	d13c      	bne.n	8008066 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007fec:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8007fee:	885a      	ldrh	r2, [r3, #2]
 8007ff0:	428a      	cmp	r2, r1
 8007ff2:	d138      	bne.n	8008066 <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8007ff4:	6861      	ldr	r1, [r4, #4]
 8007ff6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007ffa:	4299      	cmp	r1, r3
 8007ffc:	d133      	bne.n	8008066 <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ffe:	6821      	ldr	r1, [r4, #0]
 8008000:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008004:	4299      	cmp	r1, r3
 8008006:	d12e      	bne.n	8008066 <tcp_input+0x386>
  if (flags & TCP_RST) {
 8008008:	9b03      	ldr	r3, [sp, #12]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	0759      	lsls	r1, r3, #29
 800800e:	d424      	bmi.n	800805a <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8008010:	079e      	lsls	r6, r3, #30
 8008012:	d513      	bpl.n	800803c <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008014:	f8db 1000 	ldr.w	r1, [fp]
 8008018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800801a:	1acb      	subs	r3, r1, r3
 800801c:	d413      	bmi.n	8008046 <tcp_input+0x366>
 800801e:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8008020:	1b9b      	subs	r3, r3, r6
 8008022:	2b00      	cmp	r3, #0
 8008024:	dc0f      	bgt.n	8008046 <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008026:	9b04      	ldr	r3, [sp, #16]
 8008028:	881c      	ldrh	r4, [r3, #0]
 800802a:	9001      	str	r0, [sp, #4]
 800802c:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800802e:	4b8a      	ldr	r3, [pc, #552]	; (8008258 <tcp_input+0x578>)
 8008030:	4421      	add	r1, r4
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	6838      	ldr	r0, [r7, #0]
 8008036:	f001 f939 	bl	80092ac <tcp_rst>
 800803a:	e00e      	b.n	800805a <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 800803c:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 800803e:	bf42      	ittt	mi
 8008040:	4b86      	ldrmi	r3, [pc, #536]	; (800825c <tcp_input+0x57c>)
 8008042:	681b      	ldrmi	r3, [r3, #0]
 8008044:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8008046:	9b04      	ldr	r3, [sp, #16]
 8008048:	881b      	ldrh	r3, [r3, #0]
 800804a:	b133      	cbz	r3, 800805a <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 800804c:	7ea3      	ldrb	r3, [r4, #26]
 800804e:	f043 0302 	orr.w	r3, r3, #2
 8008052:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008054:	4620      	mov	r0, r4
 8008056:	f000 ffab 	bl	8008fb0 <tcp_output>
  pbuf_free(p);
 800805a:	4628      	mov	r0, r5
}
 800805c:	b009      	add	sp, #36	; 0x24
 800805e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8008062:	f7fe b8c7 	b.w	80061f4 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008066:	68e4      	ldr	r4, [r4, #12]
 8008068:	2c00      	cmp	r4, #0
 800806a:	d1b1      	bne.n	8007fd0 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800806c:	4b7c      	ldr	r3, [pc, #496]	; (8008260 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 800806e:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008070:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008072:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008076:	4689      	mov	r9, r1
 8008078:	f1b9 0f00 	cmp.w	r9, #0
 800807c:	d111      	bne.n	80080a2 <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800807e:	8990      	ldrh	r0, [r2, #12]
 8008080:	f7fc fb10 	bl	80046a4 <lwip_htons>
 8008084:	0743      	lsls	r3, r0, #29
 8008086:	d4e8      	bmi.n	800805a <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008088:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800808a:	9a04      	ldr	r2, [sp, #16]
 800808c:	f8db 1000 	ldr.w	r1, [fp]
 8008090:	8810      	ldrh	r0, [r2, #0]
 8008092:	881a      	ldrh	r2, [r3, #0]
 8008094:	9201      	str	r2, [sp, #4]
 8008096:	885b      	ldrh	r3, [r3, #2]
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	4b6f      	ldr	r3, [pc, #444]	; (8008258 <tcp_input+0x578>)
 800809c:	4401      	add	r1, r0
 800809e:	1d1a      	adds	r2, r3, #4
 80080a0:	e7c8      	b.n	8008034 <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 80080a2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 80080a6:	8853      	ldrh	r3, [r2, #2]
 80080a8:	4283      	cmp	r3, r0
 80080aa:	d107      	bne.n	80080bc <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80080ac:	f8d9 3000 	ldr.w	r3, [r9]
 80080b0:	4573      	cmp	r3, lr
 80080b2:	f000 82dc 	beq.w	800866e <tcp_input+0x98e>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f000 82d9 	beq.w	800866e <tcp_input+0x98e>
 80080bc:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080be:	f8d9 900c 	ldr.w	r9, [r9, #12]
 80080c2:	e7d9      	b.n	8008078 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 80080c4:	0798      	lsls	r0, r3, #30
 80080c6:	d5c8      	bpl.n	800805a <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 80080c8:	f899 0015 	ldrb.w	r0, [r9, #21]
 80080cc:	f7ff f940 	bl	8007350 <tcp_alloc>
    if (npcb == NULL) {
 80080d0:	4604      	mov	r4, r0
 80080d2:	b950      	cbnz	r0, 80080ea <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80080d4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0be      	beq.n	800805a <tcp_input+0x37a>
 80080dc:	4601      	mov	r1, r0
 80080de:	f04f 32ff 	mov.w	r2, #4294967295
 80080e2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80080e6:	4798      	blx	r3
 80080e8:	e7b7      	b.n	800805a <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80080ea:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80080ee:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80080f0:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80080f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80080f6:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80080f8:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80080fc:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80080fe:	7813      	ldrb	r3, [r2, #0]
 8008100:	7852      	ldrb	r2, [r2, #1]
 8008102:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008106:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008108:	2303      	movs	r3, #3
 800810a:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800810c:	f8db 3000 	ldr.w	r3, [fp]
 8008110:	3301      	adds	r3, #1
 8008112:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008114:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008116:	f7ff f9a7 	bl	8007468 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800811a:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800811e:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008120:	3b01      	subs	r3, #1
 8008122:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008124:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_nxt = iss;
 8008128:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 800812a:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_lbb = iss;
 800812c:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800812e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8008130:	f8c4 9074 	str.w	r9, [r4, #116]	; 0x74
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008134:	f899 3008 	ldrb.w	r3, [r9, #8]
 8008138:	f003 030c 	and.w	r3, r3, #12
 800813c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800813e:	4b49      	ldr	r3, [pc, #292]	; (8008264 <tcp_input+0x584>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	60e2      	str	r2, [r4, #12]
 8008144:	601c      	str	r4, [r3, #0]
 8008146:	f001 fa53 	bl	80095f0 <tcp_timer_needed>
 800814a:	4b47      	ldr	r3, [pc, #284]	; (8008268 <tcp_input+0x588>)
 800814c:	2201      	movs	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8008150:	9b06      	ldr	r3, [sp, #24]
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b11b      	cbz	r3, 800815e <tcp_input+0x47e>
 8008156:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800815a:	f7ff fd65 	bl	8007c28 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 800815e:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008160:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8008162:	89db      	ldrh	r3, [r3, #14]
 8008164:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008168:	1d21      	adds	r1, r4, #4
    npcb->snd_wnd_max = npcb->snd_wnd;
 800816a:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800816e:	f7ff f987 	bl	8007480 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008172:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008174:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fe2a 	bl	8008dd0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800817c:	2800      	cmp	r0, #0
 800817e:	f43f af69 	beq.w	8008054 <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8008182:	2100      	movs	r1, #0
 8008184:	4620      	mov	r0, r4
 8008186:	f7ff f82f 	bl	80071e8 <tcp_abandon>
 800818a:	e766      	b.n	800805a <tcp_input+0x37a>
  if (flags & TCP_RST) {
 800818c:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 800818e:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	0759      	lsls	r1, r3, #29
 8008194:	d535      	bpl.n	8008202 <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8008196:	7d21      	ldrb	r1, [r4, #20]
 8008198:	2902      	cmp	r1, #2
 800819a:	d122      	bne.n	80081e2 <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 800819c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d109      	bne.n	80081b8 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 80081a4:	f898 3000 	ldrb.w	r3, [r8]
 80081a8:	f043 0308 	orr.w	r3, r3, #8
 80081ac:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 80081b0:	7ea3      	ldrb	r3, [r4, #26]
 80081b2:	f023 0301 	bic.w	r3, r3, #1
 80081b6:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 80081b8:	f898 3000 	ldrb.w	r3, [r8]
 80081bc:	0719      	lsls	r1, r3, #28
 80081be:	f140 81ed 	bpl.w	800859c <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80081c2:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80081c6:	b11b      	cbz	r3, 80081d0 <tcp_input+0x4f0>
 80081c8:	f06f 010d 	mvn.w	r1, #13
 80081cc:	6920      	ldr	r0, [r4, #16]
 80081ce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80081d0:	4621      	mov	r1, r4
 80081d2:	4824      	ldr	r0, [pc, #144]	; (8008264 <tcp_input+0x584>)
 80081d4:	f7fe fe7e 	bl	8006ed4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80081d8:	4621      	mov	r1, r4
 80081da:	2001      	movs	r0, #1
 80081dc:	f7fd feb0 	bl	8005f40 <memp_free>
 80081e0:	e6b0      	b.n	8007f44 <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 80081e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80081e4:	f8db 3000 	ldr.w	r3, [fp]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	f000 8259 	beq.w	80086a0 <tcp_input+0x9c0>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	d4e2      	bmi.n	80081b8 <tcp_input+0x4d8>
 80081f2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80081f4:	1a9b      	subs	r3, r3, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dcde      	bgt.n	80081b8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80081fa:	7ea3      	ldrb	r3, [r4, #26]
 80081fc:	f043 0302 	orr.w	r3, r3, #2
 8008200:	e7d9      	b.n	80081b6 <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008202:	f013 0102 	ands.w	r1, r3, #2
 8008206:	d003      	beq.n	8008210 <tcp_input+0x530>
 8008208:	7d22      	ldrb	r2, [r4, #20]
 800820a:	3a02      	subs	r2, #2
 800820c:	2a01      	cmp	r2, #1
 800820e:	d8f4      	bhi.n	80081fa <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008210:	7ea2      	ldrb	r2, [r4, #26]
 8008212:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8008214:	bf5e      	ittt	pl
 8008216:	4a11      	ldrpl	r2, [pc, #68]	; (800825c <tcp_input+0x57c>)
 8008218:	6812      	ldrpl	r2, [r2, #0]
 800821a:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800821c:	2200      	movs	r2, #0
 800821e:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
  if (tcphdr_optlen != 0) {
 8008222:	9a06      	ldr	r2, [sp, #24]
 8008224:	8812      	ldrh	r2, [r2, #0]
 8008226:	b13a      	cbz	r2, 8008238 <tcp_input+0x558>
 8008228:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800822c:	9107      	str	r1, [sp, #28]
 800822e:	9306      	str	r3, [sp, #24]
 8008230:	f7ff fcfa 	bl	8007c28 <tcp_parseopt.isra.1.part.2>
 8008234:	9907      	ldr	r1, [sp, #28]
 8008236:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8008238:	7d22      	ldrb	r2, [r4, #20]
 800823a:	3a02      	subs	r2, #2
 800823c:	2a07      	cmp	r2, #7
 800823e:	d8bb      	bhi.n	80081b8 <tcp_input+0x4d8>
 8008240:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008244:	00940014 	.word	0x00940014
 8008248:	010000fc 	.word	0x010000fc
 800824c:	00fc014a 	.word	0x00fc014a
 8008250:	01830164 	.word	0x01830164
 8008254:	0800bc05 	.word	0x0800bc05
 8008258:	200055fc 	.word	0x200055fc
 800825c:	2000d928 	.word	0x2000d928
 8008260:	2000d92c 	.word	0x2000d92c
 8008264:	2000d924 	.word	0x2000d924
 8008268:	2000d920 	.word	0x2000d920
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800826c:	f003 0212 	and.w	r2, r3, #18
 8008270:	2a12      	cmp	r2, #18
 8008272:	d15e      	bne.n	8008332 <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8008274:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008276:	6839      	ldr	r1, [r7, #0]
 8008278:	3201      	adds	r2, #1
 800827a:	428a      	cmp	r2, r1
 800827c:	d159      	bne.n	8008332 <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 800827e:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8008282:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8008284:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8008286:	6832      	ldr	r2, [r6, #0]
      pcb->rcv_nxt = seqno + 1;
 8008288:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800828a:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800828c:	3b01      	subs	r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800828e:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008290:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008292:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8008294:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008298:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 800829c:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800829e:	18e1      	adds	r1, r4, r3
 80082a0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80082a2:	f7ff f8ed 	bl	8007480 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80082a6:	f241 121c 	movw	r2, #4380	; 0x111c
 80082aa:	0043      	lsls	r3, r0, #1
 80082ac:	4293      	cmp	r3, r2
 80082ae:	bf38      	it	cc
 80082b0:	4613      	movcc	r3, r2
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80082b2:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80082b4:	0080      	lsls	r0, r0, #2
 80082b6:	4283      	cmp	r3, r0
 80082b8:	bf28      	it	cs
 80082ba:	4603      	movcs	r3, r0
 80082bc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80082c0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80082c4:	b933      	cbnz	r3, 80082d4 <tcp_input+0x5f4>
 80082c6:	4bad      	ldr	r3, [pc, #692]	; (800857c <tcp_input+0x89c>)
 80082c8:	49ad      	ldr	r1, [pc, #692]	; (8008580 <tcp_input+0x8a0>)
 80082ca:	48ae      	ldr	r0, [pc, #696]	; (8008584 <tcp_input+0x8a4>)
 80082cc:	f240 321a 	movw	r2, #794	; 0x31a
 80082d0:	f002 fb4c 	bl	800a96c <iprintf>
      --pcb->snd_queuelen;
 80082d4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80082d8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80082da:	3b01      	subs	r3, #1
 80082dc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80082e0:	b9fe      	cbnz	r6, 8008322 <tcp_input+0x642>
        rseg = pcb->unsent;
 80082e2:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80082e4:	b936      	cbnz	r6, 80082f4 <tcp_input+0x614>
 80082e6:	4ba5      	ldr	r3, [pc, #660]	; (800857c <tcp_input+0x89c>)
 80082e8:	49a7      	ldr	r1, [pc, #668]	; (8008588 <tcp_input+0x8a8>)
 80082ea:	48a6      	ldr	r0, [pc, #664]	; (8008584 <tcp_input+0x8a4>)
 80082ec:	f240 3222 	movw	r2, #802	; 0x322
 80082f0:	f002 fb3c 	bl	800a96c <iprintf>
        pcb->unsent = rseg->next;
 80082f4:	6833      	ldr	r3, [r6, #0]
 80082f6:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7fe fb89 	bl	8006a10 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80082fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008300:	b993      	cbnz	r3, 8008328 <tcp_input+0x648>
        pcb->rtime = -1;
 8008302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008306:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008308:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800830c:	2b00      	cmp	r3, #0
 800830e:	f43f af74 	beq.w	80081fa <tcp_input+0x51a>
 8008312:	2200      	movs	r2, #0
 8008314:	4621      	mov	r1, r4
 8008316:	6920      	ldr	r0, [r4, #16]
 8008318:	4798      	blx	r3
      if (err == ERR_ABRT) {
 800831a:	300d      	adds	r0, #13
 800831c:	f47f af6d 	bne.w	80081fa <tcp_input+0x51a>
 8008320:	e610      	b.n	8007f44 <tcp_input+0x264>
        pcb->unacked = rseg->next;
 8008322:	6833      	ldr	r3, [r6, #0]
 8008324:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008326:	e7e7      	b.n	80082f8 <tcp_input+0x618>
        pcb->rtime = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800832c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008330:	e7ea      	b.n	8008308 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 8008332:	06db      	lsls	r3, r3, #27
 8008334:	f57f af40 	bpl.w	80081b8 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008338:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800833a:	9a04      	ldr	r2, [sp, #16]
 800833c:	f8db 1000 	ldr.w	r1, [fp]
 8008340:	8810      	ldrh	r0, [r2, #0]
 8008342:	881a      	ldrh	r2, [r3, #0]
 8008344:	9201      	str	r2, [sp, #4]
 8008346:	885b      	ldrh	r3, [r3, #2]
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	4b90      	ldr	r3, [pc, #576]	; (800858c <tcp_input+0x8ac>)
 800834c:	4401      	add	r1, r0
 800834e:	1d1a      	adds	r2, r3, #4
 8008350:	6838      	ldr	r0, [r7, #0]
 8008352:	f000 ffab 	bl	80092ac <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008356:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800835a:	2b05      	cmp	r3, #5
 800835c:	f63f af2c 	bhi.w	80081b8 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8008364:	4620      	mov	r0, r4
 8008366:	f000 fffb 	bl	8009360 <tcp_rexmit_rto>
 800836a:	e725      	b.n	80081b8 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 800836c:	06d8      	lsls	r0, r3, #27
 800836e:	d557      	bpl.n	8008420 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008372:	6838      	ldr	r0, [r7, #0]
 8008374:	43db      	mvns	r3, r3
 8008376:	42c3      	cmn	r3, r0
 8008378:	d443      	bmi.n	8008402 <tcp_input+0x722>
 800837a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800837c:	1ac3      	subs	r3, r0, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc3f      	bgt.n	8008402 <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 8008382:	2304      	movs	r3, #4
 8008384:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8008386:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008388:	b143      	cbz	r3, 800839c <tcp_input+0x6bc>
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	b933      	cbnz	r3, 800839c <tcp_input+0x6bc>
 800838e:	4b7b      	ldr	r3, [pc, #492]	; (800857c <tcp_input+0x89c>)
 8008390:	497f      	ldr	r1, [pc, #508]	; (8008590 <tcp_input+0x8b0>)
 8008392:	487c      	ldr	r0, [pc, #496]	; (8008584 <tcp_input+0x8a4>)
 8008394:	f240 3251 	movw	r2, #849	; 0x351
 8008398:	f002 fae8 	bl	800a96c <iprintf>
        if (pcb->listener == NULL) {
 800839c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800839e:	b91b      	cbnz	r3, 80083a8 <tcp_input+0x6c8>
            tcp_abort(pcb);
 80083a0:	4620      	mov	r0, r4
 80083a2:	f7fe ff93 	bl	80072cc <tcp_abort>
            goto aborted;
 80083a6:	e5cd      	b.n	8007f44 <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f8      	beq.n	80083a0 <tcp_input+0x6c0>
 80083ae:	2200      	movs	r2, #0
 80083b0:	4621      	mov	r1, r4
 80083b2:	6920      	ldr	r0, [r4, #16]
 80083b4:	4798      	blx	r3
        if (err != ERR_OK) {
 80083b6:	b110      	cbz	r0, 80083be <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 80083b8:	300d      	adds	r0, #13
 80083ba:	d1f1      	bne.n	80083a0 <tcp_input+0x6c0>
 80083bc:	e5c2      	b.n	8007f44 <tcp_input+0x264>
        tcp_receive(pcb);
 80083be:	4620      	mov	r0, r4
 80083c0:	f7ff f914 	bl	80075ec <tcp_receive>
        if (recv_acked != 0) {
 80083c4:	9b05      	ldr	r3, [sp, #20]
 80083c6:	881b      	ldrh	r3, [r3, #0]
 80083c8:	b113      	cbz	r3, 80083d0 <tcp_input+0x6f0>
          recv_acked--;
 80083ca:	9a05      	ldr	r2, [sp, #20]
 80083cc:	3b01      	subs	r3, #1
 80083ce:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80083d0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80083d2:	f241 111c 	movw	r1, #4380	; 0x111c
 80083d6:	0053      	lsls	r3, r2, #1
 80083d8:	428b      	cmp	r3, r1
 80083da:	bf38      	it	cc
 80083dc:	460b      	movcc	r3, r1
 80083de:	0092      	lsls	r2, r2, #2
 80083e0:	4293      	cmp	r3, r2
 80083e2:	bf28      	it	cs
 80083e4:	4613      	movcs	r3, r2
 80083e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80083ea:	f898 3000 	ldrb.w	r3, [r8]
 80083ee:	069a      	lsls	r2, r3, #26
 80083f0:	f57f aee2 	bpl.w	80081b8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80083f4:	7ea3      	ldrb	r3, [r4, #26]
 80083f6:	f043 0302 	orr.w	r3, r3, #2
 80083fa:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80083fc:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 80083fe:	7523      	strb	r3, [r4, #20]
 8008400:	e6da      	b.n	80081b8 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008402:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008404:	9a04      	ldr	r2, [sp, #16]
 8008406:	f8db 1000 	ldr.w	r1, [fp]
 800840a:	8816      	ldrh	r6, [r2, #0]
 800840c:	881a      	ldrh	r2, [r3, #0]
 800840e:	9201      	str	r2, [sp, #4]
 8008410:	885b      	ldrh	r3, [r3, #2]
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	4b5d      	ldr	r3, [pc, #372]	; (800858c <tcp_input+0x8ac>)
 8008416:	4431      	add	r1, r6
 8008418:	1d1a      	adds	r2, r3, #4
 800841a:	f000 ff47 	bl	80092ac <tcp_rst>
 800841e:	e6cb      	b.n	80081b8 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008420:	2900      	cmp	r1, #0
 8008422:	f43f aec9 	beq.w	80081b8 <tcp_input+0x4d8>
 8008426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008428:	f8db 2000 	ldr.w	r2, [fp]
 800842c:	3b01      	subs	r3, #1
 800842e:	4293      	cmp	r3, r2
 8008430:	f47f aec2 	bne.w	80081b8 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 8008434:	4620      	mov	r0, r4
 8008436:	f000 ffaf 	bl	8009398 <tcp_rexmit>
 800843a:	e6bd      	b.n	80081b8 <tcp_input+0x4d8>
    tcp_receive(pcb);
 800843c:	4620      	mov	r0, r4
 800843e:	f7ff f8d5 	bl	80075ec <tcp_receive>
 8008442:	e7d2      	b.n	80083ea <tcp_input+0x70a>
    tcp_receive(pcb);
 8008444:	4620      	mov	r0, r4
 8008446:	f7ff f8d1 	bl	80075ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800844a:	f898 3000 	ldrb.w	r3, [r8]
 800844e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 8008456:	d031      	beq.n	80084bc <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008458:	f013 0f10 	tst.w	r3, #16
 800845c:	7ea3      	ldrb	r3, [r4, #26]
 800845e:	d028      	beq.n	80084b2 <tcp_input+0x7d2>
 8008460:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4291      	cmp	r1, r2
 8008466:	d124      	bne.n	80084b2 <tcp_input+0x7d2>
 8008468:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800846a:	bb12      	cbnz	r2, 80084b2 <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 800846c:	f043 0302 	orr.w	r3, r3, #2
 8008470:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 8008472:	4620      	mov	r0, r4
 8008474:	f7fe fb42 	bl	8006afc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008478:	f8d9 3000 	ldr.w	r3, [r9]
 800847c:	429c      	cmp	r4, r3
 800847e:	d10a      	bne.n	8008496 <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8008480:	68e3      	ldr	r3, [r4, #12]
 8008482:	f8c9 3000 	str.w	r3, [r9]
 8008486:	e008      	b.n	800849a <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8008488:	68da      	ldr	r2, [r3, #12]
 800848a:	4294      	cmp	r4, r2
 800848c:	d102      	bne.n	8008494 <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 800848e:	68e2      	ldr	r2, [r4, #12]
 8008490:	60da      	str	r2, [r3, #12]
 8008492:	e002      	b.n	800849a <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8008494:	4613      	mov	r3, r2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f6      	bne.n	8008488 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 800849a:	4b3e      	ldr	r3, [pc, #248]	; (8008594 <tcp_input+0x8b4>)
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80084a0:	230a      	movs	r3, #10
 80084a2:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80084a4:	4b3c      	ldr	r3, [pc, #240]	; (8008598 <tcp_input+0x8b8>)
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	60e2      	str	r2, [r4, #12]
 80084aa:	601c      	str	r4, [r3, #0]
 80084ac:	f001 f8a0 	bl	80095f0 <tcp_timer_needed>
 80084b0:	e682      	b.n	80081b8 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 80084b2:	f043 0302 	orr.w	r3, r3, #2
 80084b6:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 80084b8:	2308      	movs	r3, #8
 80084ba:	e7a0      	b.n	80083fe <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80084bc:	06db      	lsls	r3, r3, #27
 80084be:	f57f ae7b 	bpl.w	80081b8 <tcp_input+0x4d8>
 80084c2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	f47f ae76 	bne.w	80081b8 <tcp_input+0x4d8>
 80084cc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f47f ae72 	bne.w	80081b8 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 80084d4:	2306      	movs	r3, #6
 80084d6:	e792      	b.n	80083fe <tcp_input+0x71e>
    tcp_receive(pcb);
 80084d8:	4620      	mov	r0, r4
 80084da:	f7ff f887 	bl	80075ec <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80084de:	f898 3000 	ldrb.w	r3, [r8]
 80084e2:	069f      	lsls	r7, r3, #26
 80084e4:	f57f ae68 	bpl.w	80081b8 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80084e8:	7ea3      	ldrb	r3, [r4, #26]
 80084ea:	f043 0302 	orr.w	r3, r3, #2
 80084ee:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80084f0:	4620      	mov	r0, r4
 80084f2:	f7fe fb03 	bl	8006afc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80084f6:	f8d9 3000 	ldr.w	r3, [r9]
 80084fa:	429c      	cmp	r4, r3
 80084fc:	d0c0      	beq.n	8008480 <tcp_input+0x7a0>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0cb      	beq.n	800849a <tcp_input+0x7ba>
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	4294      	cmp	r4, r2
 8008506:	d0c2      	beq.n	800848e <tcp_input+0x7ae>
 8008508:	4613      	mov	r3, r2
 800850a:	e7f8      	b.n	80084fe <tcp_input+0x81e>
    tcp_receive(pcb);
 800850c:	4620      	mov	r0, r4
 800850e:	f7ff f86d 	bl	80075ec <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008512:	9b03      	ldr	r3, [sp, #12]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	06de      	lsls	r6, r3, #27
 8008518:	f57f ae4e 	bpl.w	80081b8 <tcp_input+0x4d8>
 800851c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	429a      	cmp	r2, r3
 8008522:	f47f ae49 	bne.w	80081b8 <tcp_input+0x4d8>
 8008526:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008528:	2b00      	cmp	r3, #0
 800852a:	f47f ae45 	bne.w	80081b8 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 800852e:	4620      	mov	r0, r4
 8008530:	f7fe fae4 	bl	8006afc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008534:	f8d9 3000 	ldr.w	r3, [r9]
 8008538:	429c      	cmp	r4, r3
 800853a:	d0a1      	beq.n	8008480 <tcp_input+0x7a0>
 800853c:	2b00      	cmp	r3, #0
 800853e:	d0ac      	beq.n	800849a <tcp_input+0x7ba>
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	4294      	cmp	r4, r2
 8008544:	d0a3      	beq.n	800848e <tcp_input+0x7ae>
 8008546:	4613      	mov	r3, r2
 8008548:	e7f8      	b.n	800853c <tcp_input+0x85c>
    tcp_receive(pcb);
 800854a:	4620      	mov	r0, r4
 800854c:	f7ff f84e 	bl	80075ec <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	06d8      	lsls	r0, r3, #27
 8008556:	f57f ae2f 	bpl.w	80081b8 <tcp_input+0x4d8>
 800855a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	f47f ae2a 	bne.w	80081b8 <tcp_input+0x4d8>
 8008564:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008566:	2b00      	cmp	r3, #0
 8008568:	f47f ae26 	bne.w	80081b8 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 800856c:	f898 3000 	ldrb.w	r3, [r8]
 8008570:	f043 0310 	orr.w	r3, r3, #16
 8008574:	f888 3000 	strb.w	r3, [r8]
 8008578:	e61e      	b.n	80081b8 <tcp_input+0x4d8>
 800857a:	bf00      	nop
 800857c:	0800d1a9 	.word	0x0800d1a9
 8008580:	0800d148 	.word	0x0800d148
 8008584:	0800bc05 	.word	0x0800bc05
 8008588:	0800d15e 	.word	0x0800d15e
 800858c:	200055fc 	.word	0x200055fc
 8008590:	0800d171 	.word	0x0800d171
 8008594:	2000d920 	.word	0x2000d920
 8008598:	2000d934 	.word	0x2000d934
        if (recv_acked > 0) {
 800859c:	9b05      	ldr	r3, [sp, #20]
 800859e:	881a      	ldrh	r2, [r3, #0]
 80085a0:	b122      	cbz	r2, 80085ac <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80085a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80085a4:	b9eb      	cbnz	r3, 80085e2 <tcp_input+0x902>
          recv_acked = 0;
 80085a6:	9a05      	ldr	r2, [sp, #20]
 80085a8:	2300      	movs	r3, #0
 80085aa:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80085ac:	4620      	mov	r0, r4
 80085ae:	f7ff fb77 	bl	8007ca0 <tcp_input_delayed_close>
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f47f acc6 	bne.w	8007f44 <tcp_input+0x264>
        if (recv_data != NULL) {
 80085b8:	f8da 3000 	ldr.w	r3, [sl]
 80085bc:	b333      	cbz	r3, 800860c <tcp_input+0x92c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80085be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80085c0:	b133      	cbz	r3, 80085d0 <tcp_input+0x8f0>
 80085c2:	4b3f      	ldr	r3, [pc, #252]	; (80086c0 <tcp_input+0x9e0>)
 80085c4:	493f      	ldr	r1, [pc, #252]	; (80086c4 <tcp_input+0x9e4>)
 80085c6:	4840      	ldr	r0, [pc, #256]	; (80086c8 <tcp_input+0x9e8>)
 80085c8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80085cc:	f002 f9ce 	bl	800a96c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80085d0:	7ea3      	ldrb	r3, [r4, #26]
 80085d2:	f013 0310 	ands.w	r3, r3, #16
 80085d6:	d00a      	beq.n	80085ee <tcp_input+0x90e>
            pbuf_free(recv_data);
 80085d8:	f8da 0000 	ldr.w	r0, [sl]
 80085dc:	f7fd fe0a 	bl	80061f4 <pbuf_free>
 80085e0:	e6de      	b.n	80083a0 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80085e2:	4621      	mov	r1, r4
 80085e4:	6920      	ldr	r0, [r4, #16]
 80085e6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80085e8:	300d      	adds	r0, #13
 80085ea:	d1dc      	bne.n	80085a6 <tcp_input+0x8c6>
 80085ec:	e4aa      	b.n	8007f44 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80085ee:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80085f0:	b31e      	cbz	r6, 800863a <tcp_input+0x95a>
 80085f2:	f8da 2000 	ldr.w	r2, [sl]
 80085f6:	6920      	ldr	r0, [r4, #16]
 80085f8:	4621      	mov	r1, r4
 80085fa:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80085fc:	f110 0f0d 	cmn.w	r0, #13
 8008600:	f43f aca0 	beq.w	8007f44 <tcp_input+0x264>
          if (err != ERR_OK) {
 8008604:	b110      	cbz	r0, 800860c <tcp_input+0x92c>
            pcb->refused_data = recv_data;
 8008606:	f8da 3000 	ldr.w	r3, [sl]
 800860a:	6723      	str	r3, [r4, #112]	; 0x70
        if (recv_flags & TF_GOT_FIN) {
 800860c:	f898 3000 	ldrb.w	r3, [r8]
 8008610:	069a      	lsls	r2, r3, #26
 8008612:	d505      	bpl.n	8008620 <tcp_input+0x940>
          if (pcb->refused_data != NULL) {
 8008614:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008616:	b1c3      	cbz	r3, 800864a <tcp_input+0x96a>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008618:	7b5a      	ldrb	r2, [r3, #13]
 800861a:	f042 0220 	orr.w	r2, r2, #32
 800861e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8008620:	4b2a      	ldr	r3, [pc, #168]	; (80086cc <tcp_input+0x9ec>)
 8008622:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 8008624:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8008626:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008628:	f7ff fb3a 	bl	8007ca0 <tcp_input_delayed_close>
 800862c:	2800      	cmp	r0, #0
 800862e:	f47f ac89 	bne.w	8007f44 <tcp_input+0x264>
        tcp_output(pcb);
 8008632:	4620      	mov	r0, r4
 8008634:	f000 fcbc 	bl	8008fb0 <tcp_output>
 8008638:	e484      	b.n	8007f44 <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800863a:	4633      	mov	r3, r6
 800863c:	f8da 2000 	ldr.w	r2, [sl]
 8008640:	4621      	mov	r1, r4
 8008642:	4630      	mov	r0, r6
 8008644:	f7fe fd3a 	bl	80070bc <tcp_recv_null>
 8008648:	e7d8      	b.n	80085fc <tcp_input+0x91c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800864a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800864c:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800864e:	f640 3268 	movw	r2, #2920	; 0xb68
 8008652:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 8008654:	bf1c      	itt	ne
 8008656:	3301      	addne	r3, #1
 8008658:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800865a:	2e00      	cmp	r6, #0
 800865c:	d0e0      	beq.n	8008620 <tcp_input+0x940>
 800865e:	2300      	movs	r3, #0
 8008660:	461a      	mov	r2, r3
 8008662:	4621      	mov	r1, r4
 8008664:	6920      	ldr	r0, [r4, #16]
 8008666:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8008668:	300d      	adds	r0, #13
 800866a:	d1d9      	bne.n	8008620 <tcp_input+0x940>
 800866c:	e46a      	b.n	8007f44 <tcp_input+0x264>
      if (prev != NULL) {
 800866e:	b13c      	cbz	r4, 8008680 <tcp_input+0x9a0>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008670:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008674:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <tcp_input+0x9f0>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008678:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800867c:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 8008680:	9b03      	ldr	r3, [sp, #12]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	0759      	lsls	r1, r3, #29
 8008686:	f53f ace8 	bmi.w	800805a <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 800868a:	06dc      	lsls	r4, r3, #27
 800868c:	f57f ad1a 	bpl.w	80080c4 <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008690:	9b04      	ldr	r3, [sp, #16]
 8008692:	f8db 1000 	ldr.w	r1, [fp]
 8008696:	881c      	ldrh	r4, [r3, #0]
 8008698:	8813      	ldrh	r3, [r2, #0]
 800869a:	e88d 0009 	stmia.w	sp, {r0, r3}
 800869e:	e4c6      	b.n	800802e <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80086a0:	2900      	cmp	r1, #0
 80086a2:	f47f ad7f 	bne.w	80081a4 <tcp_input+0x4c4>
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <tcp_input+0x9e0>)
 80086a8:	490a      	ldr	r1, [pc, #40]	; (80086d4 <tcp_input+0x9f4>)
 80086aa:	4807      	ldr	r0, [pc, #28]	; (80086c8 <tcp_input+0x9e8>)
 80086ac:	f240 22e7 	movw	r2, #743	; 0x2e7
 80086b0:	f002 f95c 	bl	800a96c <iprintf>
 80086b4:	e576      	b.n	80081a4 <tcp_input+0x4c4>
      if (prev != NULL) {
 80086b6:	f1ba 0f00 	cmp.w	sl, #0
 80086ba:	f47f ac00 	bne.w	8007ebe <tcp_input+0x1de>
 80086be:	e40f      	b.n	8007ee0 <tcp_input+0x200>
 80086c0:	0800d1a9 	.word	0x0800d1a9
 80086c4:	0800d18f 	.word	0x0800d18f
 80086c8:	0800bc05 	.word	0x0800bc05
 80086cc:	2000d938 	.word	0x2000d938
 80086d0:	2000d92c 	.word	0x2000d92c
 80086d4:	0800d128 	.word	0x0800d128

080086d8 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80086d8:	4a02      	ldr	r2, [pc, #8]	; (80086e4 <tcp_trigger_input_pcb_close+0xc>)
 80086da:	7813      	ldrb	r3, [r2, #0]
 80086dc:	f043 0310 	orr.w	r3, r3, #16
 80086e0:	7013      	strb	r3, [r2, #0]
 80086e2:	4770      	bx	lr
 80086e4:	20005350 	.word	0x20005350

080086e8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80086e8:	b570      	push	{r4, r5, r6, lr}
 80086ea:	460c      	mov	r4, r1
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80086ec:	4294      	cmp	r4, r2
{
 80086ee:	461e      	mov	r6, r3
 80086f0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80086f4:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 80086f6:	d228      	bcs.n	800874a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80086f8:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80086fc:	07ad      	lsls	r5, r5, #30
 80086fe:	d407      	bmi.n	8008710 <tcp_pbuf_prealloc+0x28>
 8008700:	7e9d      	ldrb	r5, [r3, #26]
 8008702:	066d      	lsls	r5, r5, #25
 8008704:	d421      	bmi.n	800874a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 8008706:	b119      	cbz	r1, 8008710 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 8008708:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800870a:	b909      	cbnz	r1, 8008710 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800870c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800870e:	b1e3      	cbz	r3, 800874a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8008710:	f204 53b7 	addw	r3, r4, #1463	; 0x5b7
 8008714:	f023 0103 	bic.w	r1, r3, #3
 8008718:	428a      	cmp	r2, r1
 800871a:	bf28      	it	cs
 800871c:	460a      	movcs	r2, r1
 800871e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8008720:	2200      	movs	r2, #0
 8008722:	f7fd fdd1 	bl	80062c8 <pbuf_alloc>
  if (p == NULL) {
 8008726:	4605      	mov	r5, r0
 8008728:	b168      	cbz	r0, 8008746 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800872a:	6803      	ldr	r3, [r0, #0]
 800872c:	b133      	cbz	r3, 800873c <tcp_pbuf_prealloc+0x54>
 800872e:	4b08      	ldr	r3, [pc, #32]	; (8008750 <tcp_pbuf_prealloc+0x68>)
 8008730:	4908      	ldr	r1, [pc, #32]	; (8008754 <tcp_pbuf_prealloc+0x6c>)
 8008732:	4809      	ldr	r0, [pc, #36]	; (8008758 <tcp_pbuf_prealloc+0x70>)
 8008734:	f44f 7288 	mov.w	r2, #272	; 0x110
 8008738:	f002 f918 	bl	800a96c <iprintf>
  *oversize = p->len - length;
 800873c:	896b      	ldrh	r3, [r5, #10]
 800873e:	1b1b      	subs	r3, r3, r4
 8008740:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8008742:	812c      	strh	r4, [r5, #8]
 8008744:	816c      	strh	r4, [r5, #10]
  return p;
}
 8008746:	4628      	mov	r0, r5
 8008748:	bd70      	pop	{r4, r5, r6, pc}
 800874a:	4621      	mov	r1, r4
 800874c:	e7e8      	b.n	8008720 <tcp_pbuf_prealloc+0x38>
 800874e:	bf00      	nop
 8008750:	0800d44c 	.word	0x0800d44c
 8008754:	0800d47f 	.word	0x0800d47f
 8008758:	0800bc05 	.word	0x0800bc05

0800875c <tcp_create_segment>:
{
 800875c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008760:	f89d a020 	ldrb.w	sl, [sp, #32]
 8008764:	4680      	mov	r8, r0
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008766:	f01a 0f01 	tst.w	sl, #1
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800876a:	f04f 0003 	mov.w	r0, #3
{
 800876e:	460f      	mov	r7, r1
 8008770:	4616      	mov	r6, r2
 8008772:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008774:	bf14      	ite	ne
 8008776:	2504      	movne	r5, #4
 8008778:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800877a:	f7fd fbc5 	bl	8005f08 <memp_malloc>
 800877e:	4604      	mov	r4, r0
 8008780:	b928      	cbnz	r0, 800878e <tcp_create_segment+0x32>
    pbuf_free(p);
 8008782:	4638      	mov	r0, r7
 8008784:	f7fd fd36 	bl	80061f4 <pbuf_free>
}
 8008788:	4620      	mov	r0, r4
 800878a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->flags = optflags;
 800878e:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 8008792:	2300      	movs	r3, #0
  seg->p = p;
 8008794:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008798:	893b      	ldrh	r3, [r7, #8]
 800879a:	fa1f fa85 	uxth.w	sl, r5
 800879e:	4553      	cmp	r3, sl
 80087a0:	d205      	bcs.n	80087ae <tcp_create_segment+0x52>
 80087a2:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <tcp_create_segment+0xc4>)
 80087a4:	491f      	ldr	r1, [pc, #124]	; (8008824 <tcp_create_segment+0xc8>)
 80087a6:	4820      	ldr	r0, [pc, #128]	; (8008828 <tcp_create_segment+0xcc>)
 80087a8:	22ba      	movs	r2, #186	; 0xba
 80087aa:	f002 f8df 	bl	800a96c <iprintf>
  seg->len = p->tot_len - optlen;
 80087ae:	893b      	ldrh	r3, [r7, #8]
 80087b0:	eba3 030a 	sub.w	r3, r3, sl
  if (pbuf_header(p, TCP_HLEN)) {
 80087b4:	4638      	mov	r0, r7
  seg->len = p->tot_len - optlen;
 80087b6:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 80087b8:	2114      	movs	r1, #20
 80087ba:	f7fd fd15 	bl	80061e8 <pbuf_header>
 80087be:	4607      	mov	r7, r0
 80087c0:	b120      	cbz	r0, 80087cc <tcp_create_segment+0x70>
    tcp_seg_free(seg);
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7fe f924 	bl	8006a10 <tcp_seg_free>
    return NULL;
 80087c8:	2400      	movs	r4, #0
 80087ca:	e7dd      	b.n	8008788 <tcp_create_segment+0x2c>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80087cc:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80087ce:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80087d2:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80087d6:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80087da:	f7fb ff63 	bl	80046a4 <lwip_htons>
 80087de:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80087e2:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80087e6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80087ea:	f7fb ff5b 	bl	80046a4 <lwip_htons>
 80087ee:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80087f2:	4648      	mov	r0, r9
 80087f4:	f8d4 800c 	ldr.w	r8, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80087f8:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80087fa:	f7fb ff56 	bl	80046aa <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80087fe:	3505      	adds	r5, #5
 8008800:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008804:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008808:	b2a8      	uxth	r0, r5
 800880a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800880e:	f7fb ff49 	bl	80046a4 <lwip_htons>
  seg->tcphdr->urgp = 0;
 8008812:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008814:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 8008818:	749f      	strb	r7, [r3, #18]
 800881a:	74df      	strb	r7, [r3, #19]
  return seg;
 800881c:	e7b4      	b.n	8008788 <tcp_create_segment+0x2c>
 800881e:	bf00      	nop
 8008820:	0800d44c 	.word	0x0800d44c
 8008824:	0800d2d4 	.word	0x0800d2d4
 8008828:	0800bc05 	.word	0x0800bc05

0800882c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800882c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800882e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008830:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8008832:	4605      	mov	r5, r0
 8008834:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8008836:	2001      	movs	r0, #1
 8008838:	2200      	movs	r2, #0
 800883a:	f7fd fd45 	bl	80062c8 <pbuf_alloc>
  if (p != NULL) {
 800883e:	4606      	mov	r6, r0
 8008840:	b340      	cbz	r0, 8008894 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8008842:	8943      	ldrh	r3, [r0, #10]
 8008844:	2b13      	cmp	r3, #19
 8008846:	dc05      	bgt.n	8008854 <tcp_output_alloc_header.constprop.0+0x28>
 8008848:	4b13      	ldr	r3, [pc, #76]	; (8008898 <tcp_output_alloc_header.constprop.0+0x6c>)
 800884a:	4914      	ldr	r1, [pc, #80]	; (800889c <tcp_output_alloc_header.constprop.0+0x70>)
 800884c:	4814      	ldr	r0, [pc, #80]	; (80088a0 <tcp_output_alloc_header.constprop.0+0x74>)
 800884e:	2273      	movs	r2, #115	; 0x73
 8008850:	f002 f88c 	bl	800a96c <iprintf>
    tcphdr->src = lwip_htons(pcb->local_port);
 8008854:	8ae8      	ldrh	r0, [r5, #22]
    tcphdr = (struct tcp_hdr *)p->payload;
 8008856:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008858:	f7fb ff24 	bl	80046a4 <lwip_htons>
 800885c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800885e:	8b28      	ldrh	r0, [r5, #24]
 8008860:	f7fb ff20 	bl	80046a4 <lwip_htons>
    tcphdr->seqno = seqno_be;
 8008864:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008866:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008868:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800886a:	f7fb ff1e 	bl	80046aa <lwip_htonl>
 800886e:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008870:	f245 0010 	movw	r0, #20496	; 0x5010
 8008874:	f7fb ff16 	bl	80046a4 <lwip_htons>
 8008878:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800887a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800887c:	f7fb ff12 	bl	80046a4 <lwip_htons>
    tcphdr->chksum = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	7423      	strb	r3, [r4, #16]
 8008884:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 8008886:	74a3      	strb	r3, [r4, #18]
 8008888:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800888a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800888c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800888e:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008890:	4413      	add	r3, r2
 8008892:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8008894:	4630      	mov	r0, r6
 8008896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008898:	0800d44c 	.word	0x0800d44c
 800889c:	0800d41e 	.word	0x0800d41e
 80088a0:	0800bc05 	.word	0x0800bc05

080088a4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	b091      	sub	sp, #68	; 0x44
 80088aa:	4605      	mov	r5, r0
 80088ac:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80088b4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
{
 80088b8:	9205      	str	r2, [sp, #20]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80088ba:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80088bc:	9108      	str	r1, [sp, #32]
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	4293      	cmp	r3, r2
 80088c2:	bf28      	it	cs
 80088c4:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	bf08      	it	eq
 80088ca:	4613      	moveq	r3, r2
 80088cc:	9307      	str	r3, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80088ce:	b959      	cbnz	r1, 80088e8 <tcp_write+0x44>
 80088d0:	4ba1      	ldr	r3, [pc, #644]	; (8008b58 <tcp_write+0x2b4>)
 80088d2:	49a2      	ldr	r1, [pc, #648]	; (8008b5c <tcp_write+0x2b8>)
 80088d4:	48a2      	ldr	r0, [pc, #648]	; (8008b60 <tcp_write+0x2bc>)
 80088d6:	f44f 72c9 	mov.w	r2, #402	; 0x192
 80088da:	f002 f847 	bl	800a96c <iprintf>
 80088de:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 80088e2:	b011      	add	sp, #68	; 0x44
 80088e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 80088e8:	7d2b      	ldrb	r3, [r5, #20]
 80088ea:	2b07      	cmp	r3, #7
 80088ec:	d003      	beq.n	80088f6 <tcp_write+0x52>
      (pcb->state != CLOSE_WAIT) &&
 80088ee:	3b02      	subs	r3, #2
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	f200 8254 	bhi.w	8008d9e <tcp_write+0x4fa>
  } else if (len == 0) {
 80088f6:	9b05      	ldr	r3, [sp, #20]
 80088f8:	b1db      	cbz	r3, 8008932 <tcp_write+0x8e>
  if (len > pcb->snd_buf) {
 80088fa:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80088fe:	9a05      	ldr	r2, [sp, #20]
 8008900:	4293      	cmp	r3, r2
 8008902:	d206      	bcs.n	8008912 <tcp_write+0x6e>
    pcb->flags |= TF_NAGLEMEMERR;
 8008904:	7eab      	ldrb	r3, [r5, #26]
 8008906:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800890a:	76ab      	strb	r3, [r5, #26]
  return ERR_MEM;
 800890c:	f04f 30ff 	mov.w	r0, #4294967295
 8008910:	e7e7      	b.n	80088e2 <tcp_write+0x3e>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008912:	f8b5 2062 	ldrh.w	r2, [r5, #98]	; 0x62
 8008916:	2a07      	cmp	r2, #7
 8008918:	d8f4      	bhi.n	8008904 <tcp_write+0x60>
 800891a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
  if (pcb->snd_queuelen != 0) {
 800891c:	b30a      	cbz	r2, 8008962 <tcp_write+0xbe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800891e:	b943      	cbnz	r3, 8008932 <tcp_write+0x8e>
 8008920:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008922:	b933      	cbnz	r3, 8008932 <tcp_write+0x8e>
 8008924:	4b8c      	ldr	r3, [pc, #560]	; (8008b58 <tcp_write+0x2b4>)
 8008926:	498f      	ldr	r1, [pc, #572]	; (8008b64 <tcp_write+0x2c0>)
 8008928:	f44f 72ab 	mov.w	r2, #342	; 0x156
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800892c:	488c      	ldr	r0, [pc, #560]	; (8008b60 <tcp_write+0x2bc>)
 800892e:	f002 f81d 	bl	800a96c <iprintf>
  if (pcb->unsent != NULL) {
 8008932:	6eac      	ldr	r4, [r5, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 8008934:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008938:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800893a:	b9dc      	cbnz	r4, 8008974 <tcp_write+0xd0>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800893c:	f8b5 8064 	ldrh.w	r8, [r5, #100]	; 0x64
 8008940:	f1b8 0f00 	cmp.w	r8, #0
 8008944:	f000 8103 	beq.w	8008b4e <tcp_write+0x2aa>
 8008948:	4b83      	ldr	r3, [pc, #524]	; (8008b58 <tcp_write+0x2b4>)
 800894a:	4987      	ldr	r1, [pc, #540]	; (8008b68 <tcp_write+0x2c4>)
 800894c:	4884      	ldr	r0, [pc, #528]	; (8008b60 <tcp_write+0x2bc>)
 800894e:	f240 2225 	movw	r2, #549	; 0x225
 8008952:	f002 f80b 	bl	800a96c <iprintf>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008956:	4627      	mov	r7, r4
  u16_t extendlen = 0;
 8008958:	46a2      	mov	sl, r4
  u16_t oversize_used = 0;
 800895a:	4626      	mov	r6, r4
  u16_t pos = 0; /* position in 'arg' data */
 800895c:	46a0      	mov	r8, r4
  struct pbuf *concat_p = NULL;
 800895e:	46a1      	mov	r9, r4
 8008960:	e094      	b.n	8008a8c <tcp_write+0x1e8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8008962:	b913      	cbnz	r3, 800896a <tcp_write+0xc6>
 8008964:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0e3      	beq.n	8008932 <tcp_write+0x8e>
 800896a:	4b7b      	ldr	r3, [pc, #492]	; (8008b58 <tcp_write+0x2b4>)
 800896c:	497f      	ldr	r1, [pc, #508]	; (8008b6c <tcp_write+0x2c8>)
 800896e:	f240 1259 	movw	r2, #345	; 0x159
 8008972:	e7db      	b.n	800892c <tcp_write+0x88>
  if (pcb->unsent != NULL) {
 8008974:	4627      	mov	r7, r4
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008976:	f8d7 b000 	ldr.w	fp, [r7]
 800897a:	f1bb 0f00 	cmp.w	fp, #0
 800897e:	f040 80b6 	bne.w	8008aee <tcp_write+0x24a>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008982:	7abb      	ldrb	r3, [r7, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008984:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8008986:	f013 0f01 	tst.w	r3, #1
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800898a:	893b      	ldrh	r3, [r7, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800898c:	bf14      	ite	ne
 800898e:	2404      	movne	r4, #4
 8008990:	2400      	moveq	r4, #0
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8008992:	4423      	add	r3, r4
 8008994:	429a      	cmp	r2, r3
 8008996:	da06      	bge.n	80089a6 <tcp_write+0x102>
 8008998:	4b6f      	ldr	r3, [pc, #444]	; (8008b58 <tcp_write+0x2b4>)
 800899a:	4975      	ldr	r1, [pc, #468]	; (8008b70 <tcp_write+0x2cc>)
 800899c:	4870      	ldr	r0, [pc, #448]	; (8008b60 <tcp_write+0x2bc>)
 800899e:	f240 12c7 	movw	r2, #455	; 0x1c7
 80089a2:	f001 ffe3 	bl	800a96c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80089a6:	f8b7 9008 	ldrh.w	r9, [r7, #8]
 80089aa:	9b07      	ldr	r3, [sp, #28]
    oversize = pcb->unsent_oversize;
 80089ac:	f8b5 6064 	ldrh.w	r6, [r5, #100]	; 0x64
 80089b0:	f8ad 603e 	strh.w	r6, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 80089b4:	eba3 0909 	sub.w	r9, r3, r9
 80089b8:	eba9 0904 	sub.w	r9, r9, r4
 80089bc:	fa1f f989 	uxth.w	r9, r9
    if (oversize > 0) {
 80089c0:	2e00      	cmp	r6, #0
 80089c2:	f000 8096 	beq.w	8008af2 <tcp_write+0x24e>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80089c6:	45b1      	cmp	r9, r6
 80089c8:	d206      	bcs.n	80089d8 <tcp_write+0x134>
 80089ca:	4b63      	ldr	r3, [pc, #396]	; (8008b58 <tcp_write+0x2b4>)
 80089cc:	4969      	ldr	r1, [pc, #420]	; (8008b74 <tcp_write+0x2d0>)
 80089ce:	4864      	ldr	r0, [pc, #400]	; (8008b60 <tcp_write+0x2bc>)
 80089d0:	f240 12d9 	movw	r2, #473	; 0x1d9
 80089d4:	f001 ffca 	bl	800a96c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80089d8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	429a      	cmp	r2, r3
 80089e0:	bf28      	it	cs
 80089e2:	461a      	movcs	r2, r3
 80089e4:	454a      	cmp	r2, r9
 80089e6:	4616      	mov	r6, r2
 80089e8:	bfa8      	it	ge
 80089ea:	464e      	movge	r6, r9
      oversize -= oversize_used;
 80089ec:	1b9b      	subs	r3, r3, r6
      space -= oversize_used;
 80089ee:	eba9 0906 	sub.w	r9, r9, r6
      oversize -= oversize_used;
 80089f2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 80089f6:	fa1f f989 	uxth.w	r9, r9
 80089fa:	463c      	mov	r4, r7
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80089fc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008a00:	b153      	cbz	r3, 8008a18 <tcp_write+0x174>
 8008a02:	9b05      	ldr	r3, [sp, #20]
 8008a04:	429e      	cmp	r6, r3
 8008a06:	f000 81cd 	beq.w	8008da4 <tcp_write+0x500>
 8008a0a:	4b53      	ldr	r3, [pc, #332]	; (8008b58 <tcp_write+0x2b4>)
 8008a0c:	495a      	ldr	r1, [pc, #360]	; (8008b78 <tcp_write+0x2d4>)
 8008a0e:	4854      	ldr	r0, [pc, #336]	; (8008b60 <tcp_write+0x2bc>)
 8008a10:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008a14:	f001 ffaa 	bl	800a96c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8008a18:	9b05      	ldr	r3, [sp, #20]
 8008a1a:	429e      	cmp	r6, r3
 8008a1c:	f080 81c2 	bcs.w	8008da4 <tcp_write+0x500>
 8008a20:	f1b9 0f00 	cmp.w	r9, #0
 8008a24:	f000 808f 	beq.w	8008b46 <tcp_write+0x2a2>
 8008a28:	f8b7 a008 	ldrh.w	sl, [r7, #8]
 8008a2c:	f1ba 0f00 	cmp.w	sl, #0
 8008a30:	f000 808a 	beq.w	8008b48 <tcp_write+0x2a4>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008a34:	1b9c      	subs	r4, r3, r6
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008a38:	454c      	cmp	r4, r9
 8008a3a:	bfa8      	it	ge
 8008a3c:	464c      	movge	r4, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a3e:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 8008a40:	fa1f f884 	uxth.w	r8, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a44:	d557      	bpl.n	8008af6 <tcp_write+0x252>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8008a46:	2301      	movs	r3, #1
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	464a      	mov	r2, r9
 8008a50:	9500      	str	r5, [sp, #0]
 8008a52:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008a56:	4641      	mov	r1, r8
 8008a58:	2004      	movs	r0, #4
 8008a5a:	f7ff fe45 	bl	80086e8 <tcp_pbuf_prealloc>
 8008a5e:	4681      	mov	r9, r0
 8008a60:	2800      	cmp	r0, #0
 8008a62:	f000 8199 	beq.w	8008d98 <tcp_write+0x4f4>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8008a66:	9b08      	ldr	r3, [sp, #32]
 8008a68:	6840      	ldr	r0, [r0, #4]
 8008a6a:	4642      	mov	r2, r8
 8008a6c:	1999      	adds	r1, r3, r6
 8008a6e:	f001 ff6a 	bl	800a946 <memcpy>
        queuelen += pbuf_clen(concat_p);
 8008a72:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 8008a74:	f7fd fd74 	bl	8006560 <pbuf_clen>
 8008a78:	9b06      	ldr	r3, [sp, #24]
 8008a7a:	4403      	add	r3, r0
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	9306      	str	r3, [sp, #24]
  u16_t extendlen = 0;
 8008a80:	f04f 0a00 	mov.w	sl, #0
      pos += seglen;
 8008a84:	44b0      	add	r8, r6
 8008a86:	fa1f f888 	uxth.w	r8, r8
 8008a8a:	463c      	mov	r4, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8e:	f04f 0b00 	mov.w	fp, #0
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008a9a:	930c      	str	r3, [sp, #48]	; 0x30
  while (pos < len) {
 8008a9c:	9b05      	ldr	r3, [sp, #20]
 8008a9e:	4598      	cmp	r8, r3
 8008aa0:	d370      	bcc.n	8008b84 <tcp_write+0x2e0>
  if (oversize_used > 0) {
 8008aa2:	b146      	cbz	r6, 8008ab6 <tcp_write+0x212>
    for (p = last_unsent->p; p; p = p->next) {
 8008aa4:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8008aa8:	f1b8 0f00 	cmp.w	r8, #0
 8008aac:	f040 8110 	bne.w	8008cd0 <tcp_write+0x42c>
    last_unsent->len += oversize_used;
 8008ab0:	893b      	ldrh	r3, [r7, #8]
 8008ab2:	441e      	add	r6, r3
 8008ab4:	813e      	strh	r6, [r7, #8]
  pcb->unsent_oversize = oversize;
 8008ab6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008aba:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
  if (concat_p != NULL) {
 8008abe:	f1b9 0f00 	cmp.w	r9, #0
 8008ac2:	f000 811e 	beq.w	8008d02 <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8008ac6:	b937      	cbnz	r7, 8008ad6 <tcp_write+0x232>
 8008ac8:	4b23      	ldr	r3, [pc, #140]	; (8008b58 <tcp_write+0x2b4>)
 8008aca:	492c      	ldr	r1, [pc, #176]	; (8008b7c <tcp_write+0x2d8>)
 8008acc:	4824      	ldr	r0, [pc, #144]	; (8008b60 <tcp_write+0x2bc>)
 8008ace:	f240 22bb 	movw	r2, #699	; 0x2bb
 8008ad2:	f001 ff4b 	bl	800a96c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f7fd fd65 	bl	80065a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8008ade:	893b      	ldrh	r3, [r7, #8]
 8008ae0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	813b      	strh	r3, [r7, #8]
    last_unsent->next = queue;
 8008ae8:	f8c7 b000 	str.w	fp, [r7]
 8008aec:	e12b      	b.n	8008d46 <tcp_write+0x4a2>
 8008aee:	465f      	mov	r7, fp
 8008af0:	e741      	b.n	8008976 <tcp_write+0xd2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008af2:	4634      	mov	r4, r6
 8008af4:	e782      	b.n	80089fc <tcp_write+0x158>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 9000 	ldr.w	r9, [r3]
 8008afc:	f1b9 0f00 	cmp.w	r9, #0
 8008b00:	d112      	bne.n	8008b28 <tcp_write+0x284>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8008b02:	7b1a      	ldrb	r2, [r3, #12]
 8008b04:	2a01      	cmp	r2, #1
 8008b06:	d111      	bne.n	8008b2c <tcp_write+0x288>
 8008b08:	895a      	ldrh	r2, [r3, #10]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	9a08      	ldr	r2, [sp, #32]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d10b      	bne.n	8008b2c <tcp_write+0x288>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8008b14:	b136      	cbz	r6, 8008b24 <tcp_write+0x280>
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <tcp_write+0x2b4>)
 8008b18:	4919      	ldr	r1, [pc, #100]	; (8008b80 <tcp_write+0x2dc>)
 8008b1a:	4811      	ldr	r0, [pc, #68]	; (8008b60 <tcp_write+0x2bc>)
 8008b1c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8008b20:	f001 ff24 	bl	800a96c <iprintf>
          extendlen = seglen;
 8008b24:	46c2      	mov	sl, r8
 8008b26:	e7ad      	b.n	8008a84 <tcp_write+0x1e0>
 8008b28:	464b      	mov	r3, r9
 8008b2a:	e7e5      	b.n	8008af8 <tcp_write+0x254>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	4641      	mov	r1, r8
 8008b30:	2004      	movs	r0, #4
 8008b32:	f7fd fbc9 	bl	80062c8 <pbuf_alloc>
 8008b36:	4681      	mov	r9, r0
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	f000 812d 	beq.w	8008d98 <tcp_write+0x4f4>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8008b3e:	9b08      	ldr	r3, [sp, #32]
 8008b40:	4433      	add	r3, r6
 8008b42:	6043      	str	r3, [r0, #4]
 8008b44:	e796      	b.n	8008a74 <tcp_write+0x1d0>
  u16_t extendlen = 0;
 8008b46:	46ca      	mov	sl, r9
 8008b48:	46b0      	mov	r8, r6
  struct pbuf *concat_p = NULL;
 8008b4a:	46d1      	mov	r9, sl
 8008b4c:	e79e      	b.n	8008a8c <tcp_write+0x1e8>
  u16_t extendlen = 0;
 8008b4e:	46c2      	mov	sl, r8
  u16_t oversize_used = 0;
 8008b50:	4646      	mov	r6, r8
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8008b52:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 8008b54:	46c1      	mov	r9, r8
 8008b56:	e799      	b.n	8008a8c <tcp_write+0x1e8>
 8008b58:	0800d44c 	.word	0x0800d44c
 8008b5c:	0800d493 	.word	0x0800d493
 8008b60:	0800bc05 	.word	0x0800bc05
 8008b64:	0800d4c4 	.word	0x0800d4c4
 8008b68:	0800d5ae 	.word	0x0800d5ae
 8008b6c:	0800d4fe 	.word	0x0800d4fe
 8008b70:	0800d530 	.word	0x0800d530
 8008b74:	0800d547 	.word	0x0800d547
 8008b78:	0800d567 	.word	0x0800d567
 8008b7c:	0800d63a 	.word	0x0800d63a
 8008b80:	0800d585 	.word	0x0800d585
    u16_t left = len - pos;
 8008b84:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 8008b86:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 8008b88:	eba3 0308 	sub.w	r3, r3, r8
    u16_t seglen = LWIP_MIN(left, max_len);
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	bf28      	it	cs
 8008b92:	4613      	movcs	r3, r2
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8008b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b9a:	b363      	cbz	r3, 8008bf6 <tcp_write+0x352>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8008b9c:	fabb f38b 	clz	r3, fp
 8008ba0:	095b      	lsrs	r3, r3, #5
 8008ba2:	9302      	str	r3, [sp, #8]
 8008ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	9500      	str	r5, [sp, #0]
 8008baa:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8008bae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008bb0:	2000      	movs	r0, #0
 8008bb2:	f7ff fd99 	bl	80086e8 <tcp_pbuf_prealloc>
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d03b      	beq.n	8008c34 <tcp_write+0x390>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8008bbc:	8943      	ldrh	r3, [r0, #10]
 8008bbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d206      	bcs.n	8008bd2 <tcp_write+0x32e>
 8008bc4:	4b7b      	ldr	r3, [pc, #492]	; (8008db4 <tcp_write+0x510>)
 8008bc6:	497c      	ldr	r1, [pc, #496]	; (8008db8 <tcp_write+0x514>)
 8008bc8:	487c      	ldr	r0, [pc, #496]	; (8008dbc <tcp_write+0x518>)
 8008bca:	f240 2241 	movw	r2, #577	; 0x241
 8008bce:	f001 fecd 	bl	800a96c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8008bd2:	9b08      	ldr	r3, [sp, #32]
 8008bd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bd6:	6860      	ldr	r0, [r4, #4]
 8008bd8:	eb03 0108 	add.w	r1, r3, r8
 8008bdc:	f001 feb3 	bl	800a946 <memcpy>
    queuelen += pbuf_clen(p);
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7fd fcbd 	bl	8006560 <pbuf_clen>
 8008be6:	9b06      	ldr	r3, [sp, #24]
 8008be8:	4403      	add	r3, r0
 8008bea:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008bec:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 8008bee:	9306      	str	r3, [sp, #24]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8008bf0:	d949      	bls.n	8008c86 <tcp_write+0x3e2>
      pbuf_free(p);
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	e01c      	b.n	8008c30 <tcp_write+0x38c>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8008bf6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008bfa:	b133      	cbz	r3, 8008c0a <tcp_write+0x366>
 8008bfc:	4b6d      	ldr	r3, [pc, #436]	; (8008db4 <tcp_write+0x510>)
 8008bfe:	4970      	ldr	r1, [pc, #448]	; (8008dc0 <tcp_write+0x51c>)
 8008c00:	486e      	ldr	r0, [pc, #440]	; (8008dbc <tcp_write+0x518>)
 8008c02:	f240 224b 	movw	r2, #587	; 0x24b
 8008c06:	f001 feb1 	bl	800a96c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f7fd fb5a 	bl	80062c8 <pbuf_alloc>
 8008c14:	b170      	cbz	r0, 8008c34 <tcp_write+0x390>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8008c16:	9a08      	ldr	r2, [sp, #32]
 8008c18:	900d      	str	r0, [sp, #52]	; 0x34
 8008c1a:	4442      	add	r2, r8
 8008c1c:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4611      	mov	r1, r2
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fd fb50 	bl	80062c8 <pbuf_alloc>
 8008c28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	bb38      	cbnz	r0, 8008c7e <tcp_write+0x3da>
        pbuf_free(p2);
 8008c2e:	4618      	mov	r0, r3
      pbuf_free(p);
 8008c30:	f7fd fae0 	bl	80061f4 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 8008c34:	7eab      	ldrb	r3, [r5, #26]
 8008c36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c3a:	76ab      	strb	r3, [r5, #26]
  if (concat_p != NULL) {
 8008c3c:	f1b9 0f00 	cmp.w	r9, #0
 8008c40:	d002      	beq.n	8008c48 <tcp_write+0x3a4>
    pbuf_free(concat_p);
 8008c42:	4648      	mov	r0, r9
 8008c44:	f7fd fad6 	bl	80061f4 <pbuf_free>
  if (queue != NULL) {
 8008c48:	f1bb 0f00 	cmp.w	fp, #0
 8008c4c:	d002      	beq.n	8008c54 <tcp_write+0x3b0>
    tcp_segs_free(queue);
 8008c4e:	4658      	mov	r0, fp
 8008c50:	f7fd feec 	bl	8006a2c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8008c54:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f43f ae57 	beq.w	800890c <tcp_write+0x68>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8008c5e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f47f ae53 	bne.w	800890c <tcp_write+0x68>
 8008c66:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f47f ae4f 	bne.w	800890c <tcp_write+0x68>
 8008c6e:	4b51      	ldr	r3, [pc, #324]	; (8008db4 <tcp_write+0x510>)
 8008c70:	4954      	ldr	r1, [pc, #336]	; (8008dc4 <tcp_write+0x520>)
 8008c72:	4852      	ldr	r0, [pc, #328]	; (8008dbc <tcp_write+0x518>)
 8008c74:	f240 3202 	movw	r2, #770	; 0x302
 8008c78:	f001 fe78 	bl	800a96c <iprintf>
 8008c7c:	e646      	b.n	800890c <tcp_write+0x68>
      pbuf_cat(p/*header*/, p2/*data*/);
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f7fd fc92 	bl	80065a8 <pbuf_cat>
 8008c84:	e7ac      	b.n	8008be0 <tcp_write+0x33c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8008c86:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	9200      	str	r2, [sp, #0]
 8008c8e:	4443      	add	r3, r8
 8008c90:	4628      	mov	r0, r5
 8008c92:	f7ff fd63 	bl	800875c <tcp_create_segment>
 8008c96:	4604      	mov	r4, r0
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d0cb      	beq.n	8008c34 <tcp_write+0x390>
    if (queue == NULL) {
 8008c9c:	f1bb 0f00 	cmp.w	fp, #0
 8008ca0:	d010      	beq.n	8008cc4 <tcp_write+0x420>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8008ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ca4:	b933      	cbnz	r3, 8008cb4 <tcp_write+0x410>
 8008ca6:	4b43      	ldr	r3, [pc, #268]	; (8008db4 <tcp_write+0x510>)
 8008ca8:	4947      	ldr	r1, [pc, #284]	; (8008dc8 <tcp_write+0x524>)
 8008caa:	4844      	ldr	r0, [pc, #272]	; (8008dbc <tcp_write+0x518>)
 8008cac:	f240 2285 	movw	r2, #645	; 0x285
 8008cb0:	f001 fe5c 	bl	800a96c <iprintf>
      prev_seg->next = seg;
 8008cb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cb6:	601c      	str	r4, [r3, #0]
    pos += seglen;
 8008cb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cba:	940b      	str	r4, [sp, #44]	; 0x2c
 8008cbc:	4498      	add	r8, r3
 8008cbe:	fa1f f888 	uxth.w	r8, r8
 8008cc2:	e6eb      	b.n	8008a9c <tcp_write+0x1f8>
 8008cc4:	4683      	mov	fp, r0
 8008cc6:	e7f7      	b.n	8008cb8 <tcp_write+0x414>
  if (oversize_used > 0) {
 8008cc8:	f04f 0a00 	mov.w	sl, #0
 8008ccc:	46d1      	mov	r9, sl
 8008cce:	e6e9      	b.n	8008aa4 <tcp_write+0x200>
      p->tot_len += oversize_used;
 8008cd0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008cd4:	4433      	add	r3, r6
 8008cd6:	f8a8 3008 	strh.w	r3, [r8, #8]
      if (p->next == NULL) {
 8008cda:	f8d8 3000 	ldr.w	r3, [r8]
 8008cde:	b96b      	cbnz	r3, 8008cfc <tcp_write+0x458>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8008ce0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ce4:	f8b8 000a 	ldrh.w	r0, [r8, #10]
 8008ce8:	9908      	ldr	r1, [sp, #32]
 8008cea:	4418      	add	r0, r3
 8008cec:	4632      	mov	r2, r6
 8008cee:	f001 fe2a 	bl	800a946 <memcpy>
        p->len += oversize_used;
 8008cf2:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8008cf6:	4433      	add	r3, r6
 8008cf8:	f8a8 300a 	strh.w	r3, [r8, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8008cfc:	f8d8 8000 	ldr.w	r8, [r8]
 8008d00:	e6d2      	b.n	8008aa8 <tcp_write+0x204>
  } else if (extendlen > 0) {
 8008d02:	f1ba 0f00 	cmp.w	sl, #0
 8008d06:	d019      	beq.n	8008d3c <tcp_write+0x498>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8008d08:	b10f      	cbz	r7, 8008d0e <tcp_write+0x46a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	b933      	cbnz	r3, 8008d1c <tcp_write+0x478>
 8008d0e:	4b29      	ldr	r3, [pc, #164]	; (8008db4 <tcp_write+0x510>)
 8008d10:	492e      	ldr	r1, [pc, #184]	; (8008dcc <tcp_write+0x528>)
 8008d12:	482a      	ldr	r0, [pc, #168]	; (8008dbc <tcp_write+0x518>)
 8008d14:	f240 22c1 	movw	r2, #705	; 0x2c1
 8008d18:	f001 fe28 	bl	800a96c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	891a      	ldrh	r2, [r3, #8]
 8008d20:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 8008d22:	4452      	add	r2, sl
 8008d24:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8008d26:	b939      	cbnz	r1, 8008d38 <tcp_write+0x494>
    p->len += extendlen;
 8008d28:	895a      	ldrh	r2, [r3, #10]
 8008d2a:	4452      	add	r2, sl
 8008d2c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8008d2e:	893b      	ldrh	r3, [r7, #8]
 8008d30:	449a      	add	sl, r3
 8008d32:	f8a7 a008 	strh.w	sl, [r7, #8]
 8008d36:	e6d7      	b.n	8008ae8 <tcp_write+0x244>
      p->tot_len += extendlen;
 8008d38:	460b      	mov	r3, r1
 8008d3a:	e7f0      	b.n	8008d1e <tcp_write+0x47a>
  if (last_unsent == NULL) {
 8008d3c:	2f00      	cmp	r7, #0
 8008d3e:	f47f aed3 	bne.w	8008ae8 <tcp_write+0x244>
    pcb->unsent = queue;
 8008d42:	f8c5 b068 	str.w	fp, [r5, #104]	; 0x68
  pcb->snd_lbb += len;
 8008d46:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8008d48:	9a05      	ldr	r2, [sp, #20]
 8008d4a:	4413      	add	r3, r2
 8008d4c:	65ab      	str	r3, [r5, #88]	; 0x58
  pcb->snd_buf -= len;
 8008d4e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8008d52:	1a9b      	subs	r3, r3, r2
 8008d54:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8008d58:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8008d5c:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008d60:	9b06      	ldr	r3, [sp, #24]
 8008d62:	b153      	cbz	r3, 8008d7a <tcp_write+0x4d6>
    LWIP_ASSERT("tcp_write: valid queue length",
 8008d64:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008d66:	b943      	cbnz	r3, 8008d7a <tcp_write+0x4d6>
 8008d68:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8008d6a:	b933      	cbnz	r3, 8008d7a <tcp_write+0x4d6>
 8008d6c:	4b11      	ldr	r3, [pc, #68]	; (8008db4 <tcp_write+0x510>)
 8008d6e:	4915      	ldr	r1, [pc, #84]	; (8008dc4 <tcp_write+0x520>)
 8008d70:	4812      	ldr	r0, [pc, #72]	; (8008dbc <tcp_write+0x518>)
 8008d72:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008d76:	f001 fdf9 	bl	800a96c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8008d7a:	b15c      	cbz	r4, 8008d94 <tcp_write+0x4f0>
 8008d7c:	68e4      	ldr	r4, [r4, #12]
 8008d7e:	b14c      	cbz	r4, 8008d94 <tcp_write+0x4f0>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	f013 0602 	ands.w	r6, r3, #2
 8008d86:	d105      	bne.n	8008d94 <tcp_write+0x4f0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8008d88:	2008      	movs	r0, #8
 8008d8a:	89a5      	ldrh	r5, [r4, #12]
 8008d8c:	f7fb fc8a 	bl	80046a4 <lwip_htons>
 8008d90:	4328      	orrs	r0, r5
 8008d92:	81a0      	strh	r0, [r4, #12]
  return ERR_OK;
 8008d94:	2000      	movs	r0, #0
 8008d96:	e5a4      	b.n	80088e2 <tcp_write+0x3e>
      p->tot_len += extendlen;
 8008d98:	f04f 0900 	mov.w	r9, #0
 8008d9c:	e74a      	b.n	8008c34 <tcp_write+0x390>
    return ERR_CONN;
 8008d9e:	f06f 000a 	mvn.w	r0, #10
 8008da2:	e59e      	b.n	80088e2 <tcp_write+0x3e>
  if (oversize_used > 0) {
 8008da4:	2e00      	cmp	r6, #0
 8008da6:	d18f      	bne.n	8008cc8 <tcp_write+0x424>
  pcb->unsent_oversize = oversize;
 8008da8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8008dac:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
 8008db0:	e69a      	b.n	8008ae8 <tcp_write+0x244>
 8008db2:	bf00      	nop
 8008db4:	0800d44c 	.word	0x0800d44c
 8008db8:	0800d5dd 	.word	0x0800d5dd
 8008dbc:	0800bc05 	.word	0x0800bc05
 8008dc0:	0800d61b 	.word	0x0800d61b
 8008dc4:	0800d6a7 	.word	0x0800d6a7
 8008dc8:	0800d629 	.word	0x0800d629
 8008dcc:	0800d672 	.word	0x0800d672

08008dd0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008dd4:	f011 0803 	ands.w	r8, r1, #3
{
 8008dd8:	4604      	mov	r4, r0
 8008dda:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008ddc:	d106      	bne.n	8008dec <tcp_enqueue_flags+0x1c>
 8008dde:	4b41      	ldr	r3, [pc, #260]	; (8008ee4 <tcp_enqueue_flags+0x114>)
 8008de0:	4941      	ldr	r1, [pc, #260]	; (8008ee8 <tcp_enqueue_flags+0x118>)
 8008de2:	4842      	ldr	r0, [pc, #264]	; (8008eec <tcp_enqueue_flags+0x11c>)
 8008de4:	f240 321b 	movw	r2, #795	; 0x31b
 8008de8:	f001 fdc0 	bl	800a96c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008dec:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008df0:	2b07      	cmp	r3, #7
 8008df2:	d90a      	bls.n	8008e0a <tcp_enqueue_flags+0x3a>
 8008df4:	07f1      	lsls	r1, r6, #31
 8008df6:	d408      	bmi.n	8008e0a <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8008df8:	7ea3      	ldrb	r3, [r4, #26]
 8008dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008dfe:	76a3      	strb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008e00:	f04f 30ff 	mov.w	r0, #4294967295
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8008e04:	b003      	add	sp, #12
 8008e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e0a:	f006 0302 	and.w	r3, r6, #2
  if (flags & TCP_SYN) {
 8008e0e:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008e10:	bf14      	ite	ne
 8008e12:	2704      	movne	r7, #4
 8008e14:	2700      	moveq	r7, #0
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	4610      	mov	r0, r2
  u8_t optflags = 0;
 8008e1e:	bf14      	ite	ne
 8008e20:	f04f 0901 	movne.w	r9, #1
 8008e24:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008e28:	f7fd fa4e 	bl	80062c8 <pbuf_alloc>
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d0e2      	beq.n	8008df8 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008e32:	8943      	ldrh	r3, [r0, #10]
 8008e34:	42bb      	cmp	r3, r7
 8008e36:	d206      	bcs.n	8008e46 <tcp_enqueue_flags+0x76>
 8008e38:	4b2a      	ldr	r3, [pc, #168]	; (8008ee4 <tcp_enqueue_flags+0x114>)
 8008e3a:	492d      	ldr	r1, [pc, #180]	; (8008ef0 <tcp_enqueue_flags+0x120>)
 8008e3c:	482b      	ldr	r0, [pc, #172]	; (8008eec <tcp_enqueue_flags+0x11c>)
 8008e3e:	f240 3241 	movw	r2, #833	; 0x341
 8008e42:	f001 fd93 	bl	800a96c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008e46:	f8cd 9000 	str.w	r9, [sp]
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e4e:	4632      	mov	r2, r6
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7ff fc83 	bl	800875c <tcp_create_segment>
 8008e56:	4605      	mov	r5, r0
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d0cd      	beq.n	8008df8 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008e5c:	68c3      	ldr	r3, [r0, #12]
 8008e5e:	079a      	lsls	r2, r3, #30
 8008e60:	d006      	beq.n	8008e70 <tcp_enqueue_flags+0xa0>
 8008e62:	4b20      	ldr	r3, [pc, #128]	; (8008ee4 <tcp_enqueue_flags+0x114>)
 8008e64:	4923      	ldr	r1, [pc, #140]	; (8008ef4 <tcp_enqueue_flags+0x124>)
 8008e66:	4821      	ldr	r0, [pc, #132]	; (8008eec <tcp_enqueue_flags+0x11c>)
 8008e68:	f240 3249 	movw	r2, #841	; 0x349
 8008e6c:	f001 fd7e 	bl	800a96c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008e70:	892b      	ldrh	r3, [r5, #8]
 8008e72:	b133      	cbz	r3, 8008e82 <tcp_enqueue_flags+0xb2>
 8008e74:	4b1b      	ldr	r3, [pc, #108]	; (8008ee4 <tcp_enqueue_flags+0x114>)
 8008e76:	4920      	ldr	r1, [pc, #128]	; (8008ef8 <tcp_enqueue_flags+0x128>)
 8008e78:	481c      	ldr	r0, [pc, #112]	; (8008eec <tcp_enqueue_flags+0x11c>)
 8008e7a:	f240 324a 	movw	r2, #842	; 0x34a
 8008e7e:	f001 fd75 	bl	800a96c <iprintf>
  if (pcb->unsent == NULL) {
 8008e82:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008e84:	bb4b      	cbnz	r3, 8008eda <tcp_enqueue_flags+0x10a>
    pcb->unsent = seg;
 8008e86:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008e8e:	f1b8 0f00 	cmp.w	r8, #0
 8008e92:	d002      	beq.n	8008e9a <tcp_enqueue_flags+0xca>
    pcb->snd_lbb++;
 8008e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e96:	3301      	adds	r3, #1
 8008e98:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8008e9a:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8008e9c:	bf42      	ittt	mi
 8008e9e:	7ea3      	ldrbmi	r3, [r4, #26]
 8008ea0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ea4:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008ea6:	6868      	ldr	r0, [r5, #4]
 8008ea8:	f7fd fb5a 	bl	8006560 <pbuf_clen>
 8008eac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008eb0:	4418      	add	r0, r3
 8008eb2:	b280      	uxth	r0, r0
 8008eb4:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d0a3      	beq.n	8008e04 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008ebc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008ebe:	b948      	cbnz	r0, 8008ed4 <tcp_enqueue_flags+0x104>
 8008ec0:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	d19e      	bne.n	8008e04 <tcp_enqueue_flags+0x34>
 8008ec6:	4b07      	ldr	r3, [pc, #28]	; (8008ee4 <tcp_enqueue_flags+0x114>)
 8008ec8:	490c      	ldr	r1, [pc, #48]	; (8008efc <tcp_enqueue_flags+0x12c>)
 8008eca:	4808      	ldr	r0, [pc, #32]	; (8008eec <tcp_enqueue_flags+0x11c>)
 8008ecc:	f240 326d 	movw	r2, #877	; 0x36d
 8008ed0:	f001 fd4c 	bl	800a96c <iprintf>
  return ERR_OK;
 8008ed4:	2000      	movs	r0, #0
 8008ed6:	e795      	b.n	8008e04 <tcp_enqueue_flags+0x34>
 8008ed8:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	2a00      	cmp	r2, #0
 8008ede:	d1fb      	bne.n	8008ed8 <tcp_enqueue_flags+0x108>
    useg->next = seg;
 8008ee0:	601d      	str	r5, [r3, #0]
 8008ee2:	e7d1      	b.n	8008e88 <tcp_enqueue_flags+0xb8>
 8008ee4:	0800d44c 	.word	0x0800d44c
 8008ee8:	0800d2e9 	.word	0x0800d2e9
 8008eec:	0800bc05 	.word	0x0800bc05
 8008ef0:	0800d33e 	.word	0x0800d33e
 8008ef4:	0800d377 	.word	0x0800d377
 8008ef8:	0800d38f 	.word	0x0800d38f
 8008efc:	0800d3b9 	.word	0x0800d3b9

08008f00 <tcp_send_fin>:
{
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8008f02:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8008f04:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8008f06:	b934      	cbnz	r4, 8008f16 <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008f08:	4628      	mov	r0, r5
 8008f0a:	2101      	movs	r1, #1
}
 8008f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008f10:	f7ff bf5e 	b.w	8008dd0 <tcp_enqueue_flags>
 8008f14:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1fb      	bne.n	8008f14 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008f1c:	68e3      	ldr	r3, [r4, #12]
 8008f1e:	8998      	ldrh	r0, [r3, #12]
 8008f20:	f7fb fbc0 	bl	80046a4 <lwip_htons>
 8008f24:	f010 0707 	ands.w	r7, r0, #7
 8008f28:	d1ee      	bne.n	8008f08 <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008f2a:	68e6      	ldr	r6, [r4, #12]
 8008f2c:	2001      	movs	r0, #1
 8008f2e:	89b4      	ldrh	r4, [r6, #12]
 8008f30:	f7fb fbb8 	bl	80046a4 <lwip_htons>
 8008f34:	4320      	orrs	r0, r4
 8008f36:	81b0      	strh	r0, [r6, #12]
      pcb->flags |= TF_FIN;
 8008f38:	7eab      	ldrb	r3, [r5, #26]
 8008f3a:	f043 0320 	orr.w	r3, r3, #32
 8008f3e:	76ab      	strb	r3, [r5, #26]
}
 8008f40:	4638      	mov	r0, r7
 8008f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f44 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008f46:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008f48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008f4a:	f7fb fbae 	bl	80046aa <lwip_htonl>
 8008f4e:	2100      	movs	r1, #0
 8008f50:	4602      	mov	r2, r0
 8008f52:	4620      	mov	r0, r4
 8008f54:	f7ff fc6a 	bl	800882c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8008f58:	4606      	mov	r6, r0
 8008f5a:	b940      	cbnz	r0, 8008f6e <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008f5c:	7ea3      	ldrb	r3, [r4, #26]
 8008f5e:	f043 0303 	orr.w	r3, r3, #3
 8008f62:	76a3      	strb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008f64:	f06f 0501 	mvn.w	r5, #1
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8008f68:	4628      	mov	r0, r5
 8008f6a:	b004      	add	sp, #16
 8008f6c:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f6e:	1d25      	adds	r5, r4, #4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7fc f82d 	bl	8004fd0 <ip4_route>
  if (netif == NULL) {
 8008f76:	b1a0      	cbz	r0, 8008fa2 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008f78:	2206      	movs	r2, #6
 8008f7a:	9201      	str	r2, [sp, #4]
 8008f7c:	7a62      	ldrb	r2, [r4, #9]
 8008f7e:	9002      	str	r0, [sp, #8]
 8008f80:	9200      	str	r2, [sp, #0]
 8008f82:	7aa3      	ldrb	r3, [r4, #10]
 8008f84:	462a      	mov	r2, r5
 8008f86:	4621      	mov	r1, r4
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7fc f987 	bl	800529c <ip4_output_if>
 8008f8e:	4605      	mov	r5, r0
  pbuf_free(p);
 8008f90:	4630      	mov	r0, r6
 8008f92:	f7fd f92f 	bl	80061f4 <pbuf_free>
 8008f96:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8008f98:	b135      	cbz	r5, 8008fa8 <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008f9a:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008f9e:	76a3      	strb	r3, [r4, #26]
 8008fa0:	e7e2      	b.n	8008f68 <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8008fa2:	f06f 0503 	mvn.w	r5, #3
 8008fa6:	e7f3      	b.n	8008f90 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008fa8:	f023 0303 	bic.w	r3, r3, #3
 8008fac:	e7f7      	b.n	8008f9e <tcp_send_empty_ack+0x5a>
	...

08008fb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008fb4:	7d03      	ldrb	r3, [r0, #20]
 8008fb6:	2b01      	cmp	r3, #1
{
 8008fb8:	b087      	sub	sp, #28
 8008fba:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008fbc:	d106      	bne.n	8008fcc <tcp_output+0x1c>
 8008fbe:	4ba5      	ldr	r3, [pc, #660]	; (8009254 <tcp_output+0x2a4>)
 8008fc0:	49a5      	ldr	r1, [pc, #660]	; (8009258 <tcp_output+0x2a8>)
 8008fc2:	48a6      	ldr	r0, [pc, #664]	; (800925c <tcp_output+0x2ac>)
 8008fc4:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008fc8:	f001 fcd0 	bl	800a96c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008fcc:	4ba4      	ldr	r3, [pc, #656]	; (8009260 <tcp_output+0x2b0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d052      	beq.n	800907a <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008fd4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008fd8:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8008fdc:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008fde:	429f      	cmp	r7, r3
 8008fe0:	bf28      	it	cs
 8008fe2:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8008fe4:	7ea3      	ldrb	r3, [r4, #26]
 8008fe6:	0799      	lsls	r1, r3, #30
 8008fe8:	d510      	bpl.n	800900c <tcp_output+0x5c>
 8008fea:	b92d      	cbnz	r5, 8008ff8 <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8008fec:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8008fee:	b007      	add	sp, #28
 8008ff0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8008ff4:	f7ff bfa6 	b.w	8008f44 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008ff8:	68eb      	ldr	r3, [r5, #12]
 8008ffa:	6858      	ldr	r0, [r3, #4]
 8008ffc:	f7fb fb55 	bl	80046aa <lwip_htonl>
 8009000:	892b      	ldrh	r3, [r5, #8]
 8009002:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009004:	1a9b      	subs	r3, r3, r2
 8009006:	4418      	add	r0, r3
     (seg == NULL ||
 8009008:	4287      	cmp	r7, r0
 800900a:	d3ef      	bcc.n	8008fec <tcp_output+0x3c>
  useg = pcb->unacked;
 800900c:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800900e:	2e00      	cmp	r6, #0
 8009010:	d136      	bne.n	8009080 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009012:	f104 0804 	add.w	r8, r4, #4
 8009016:	4640      	mov	r0, r8
 8009018:	f7fb ffda 	bl	8004fd0 <ip4_route>
  if (netif == NULL) {
 800901c:	4681      	mov	r9, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	f000 813c 	beq.w	800929c <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009024:	b10c      	cbz	r4, 800902a <tcp_output+0x7a>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	b913      	cbnz	r3, 8009030 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800902a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800902e:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8009030:	b1d5      	cbz	r5, 8009068 <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009032:	68eb      	ldr	r3, [r5, #12]
 8009034:	6858      	ldr	r0, [r3, #4]
 8009036:	f7fb fb38 	bl	80046aa <lwip_htonl>
 800903a:	892b      	ldrh	r3, [r5, #8]
 800903c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800903e:	1a9b      	subs	r3, r3, r2
 8009040:	4418      	add	r0, r3
  if (seg != NULL &&
 8009042:	4287      	cmp	r7, r0
 8009044:	d26f      	bcs.n	8009126 <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009046:	2f00      	cmp	r7, #0
 8009048:	d06d      	beq.n	8009126 <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800904a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800904e:	429f      	cmp	r7, r3
 8009050:	d169      	bne.n	8009126 <tcp_output+0x176>
 8009052:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d166      	bne.n	8009126 <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8009058:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800905c:	b923      	cbnz	r3, 8009068 <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 800905e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      pcb->persist_backoff = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  if (pcb->unsent == NULL) {
 8009068:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800906a:	b913      	cbnz	r3, 8009072 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8009072:	7ea3      	ldrb	r3, [r4, #26]
 8009074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009078:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800907a:	2000      	movs	r0, #0
 800907c:	e0e6      	b.n	800924c <tcp_output+0x29c>
 800907e:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1fb      	bne.n	800907e <tcp_output+0xce>
 8009086:	e7c4      	b.n	8009012 <tcp_output+0x62>
    pcb->unsent = seg->next;
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800908c:	7d23      	ldrb	r3, [r4, #20]
 800908e:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009090:	bf1e      	ittt	ne
 8009092:	7ea3      	ldrbne	r3, [r4, #26]
 8009094:	f023 0303 	bicne.w	r3, r3, #3
 8009098:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800909a:	68eb      	ldr	r3, [r5, #12]
 800909c:	6858      	ldr	r0, [r3, #4]
 800909e:	f7fb fb04 	bl	80046aa <lwip_htonl>
 80090a2:	68e9      	ldr	r1, [r5, #12]
 80090a4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80090a8:	4683      	mov	fp, r0
 80090aa:	8988      	ldrh	r0, [r1, #12]
 80090ac:	f7fb fafa 	bl	80046a4 <lwip_htons>
 80090b0:	f010 0003 	ands.w	r0, r0, #3
 80090b4:	eb0b 030a 	add.w	r3, fp, sl
 80090b8:	bf18      	it	ne
 80090ba:	2001      	movne	r0, #1
 80090bc:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80090be:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80090c0:	68ea      	ldr	r2, [r5, #12]
 80090c2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80090c6:	1a1b      	subs	r3, r3, r0
 80090c8:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 80090ca:	bfb8      	it	lt
 80090cc:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 80090ce:	8990      	ldrh	r0, [r2, #12]
 80090d0:	f7fb fae8 	bl	80046a4 <lwip_htons>
 80090d4:	f010 0003 	ands.w	r0, r0, #3
 80090d8:	bf18      	it	ne
 80090da:	2001      	movne	r0, #1
 80090dc:	eb10 0f0a 	cmn.w	r0, sl
 80090e0:	f000 80d8 	beq.w	8009294 <tcp_output+0x2e4>
      seg->next = NULL;
 80090e4:	2300      	movs	r3, #0
 80090e6:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 80090e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090ea:	b913      	cbnz	r3, 80090f2 <tcp_output+0x142>
        pcb->unacked = seg;
 80090ec:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 80090ee:	462e      	mov	r6, r5
 80090f0:	e016      	b.n	8009120 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80090f2:	68eb      	ldr	r3, [r5, #12]
 80090f4:	6858      	ldr	r0, [r3, #4]
 80090f6:	f7fb fad8 	bl	80046aa <lwip_htonl>
 80090fa:	68f2      	ldr	r2, [r6, #12]
 80090fc:	4682      	mov	sl, r0
 80090fe:	6850      	ldr	r0, [r2, #4]
 8009100:	f7fb fad3 	bl	80046aa <lwip_htonl>
 8009104:	ebaa 0000 	sub.w	r0, sl, r0
 8009108:	2800      	cmp	r0, #0
 800910a:	f280 80c1 	bge.w	8009290 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800910e:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	2a00      	cmp	r2, #0
 8009116:	f040 80a9 	bne.w	800926c <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800911e:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8009120:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8009122:	2d00      	cmp	r5, #0
 8009124:	d0a2      	beq.n	800906c <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009126:	68eb      	ldr	r3, [r5, #12]
 8009128:	6858      	ldr	r0, [r3, #4]
 800912a:	f7fb fabe 	bl	80046aa <lwip_htonl>
 800912e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009130:	1ac0      	subs	r0, r0, r3
 8009132:	892b      	ldrh	r3, [r5, #8]
 8009134:	4418      	add	r0, r3
  while (seg != NULL &&
 8009136:	4287      	cmp	r7, r0
 8009138:	d396      	bcc.n	8009068 <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 800913a:	68eb      	ldr	r3, [r5, #12]
 800913c:	8998      	ldrh	r0, [r3, #12]
 800913e:	f7fb fab1 	bl	80046a4 <lwip_htons>
 8009142:	0742      	lsls	r2, r0, #29
 8009144:	d506      	bpl.n	8009154 <tcp_output+0x1a4>
 8009146:	4b43      	ldr	r3, [pc, #268]	; (8009254 <tcp_output+0x2a4>)
 8009148:	4946      	ldr	r1, [pc, #280]	; (8009264 <tcp_output+0x2b4>)
 800914a:	4844      	ldr	r0, [pc, #272]	; (800925c <tcp_output+0x2ac>)
 800914c:	f240 4246 	movw	r2, #1094	; 0x446
 8009150:	f001 fc0c 	bl	800a96c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009154:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009156:	b19b      	cbz	r3, 8009180 <tcp_output+0x1d0>
 8009158:	7ea2      	ldrb	r2, [r4, #26]
 800915a:	f012 0f44 	tst.w	r2, #68	; 0x44
 800915e:	d10f      	bne.n	8009180 <tcp_output+0x1d0>
 8009160:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009162:	b12b      	cbz	r3, 8009170 <tcp_output+0x1c0>
 8009164:	6819      	ldr	r1, [r3, #0]
 8009166:	b959      	cbnz	r1, 8009180 <tcp_output+0x1d0>
 8009168:	8919      	ldrh	r1, [r3, #8]
 800916a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800916c:	4299      	cmp	r1, r3
 800916e:	d207      	bcs.n	8009180 <tcp_output+0x1d0>
 8009170:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009174:	b123      	cbz	r3, 8009180 <tcp_output+0x1d0>
 8009176:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800917a:	2b07      	cmp	r3, #7
 800917c:	f240 8091 	bls.w	80092a2 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8009180:	7d23      	ldrb	r3, [r4, #20]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d00a      	beq.n	800919c <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009186:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800918a:	2010      	movs	r0, #16
 800918c:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8009190:	f7fb fa88 	bl	80046a4 <lwip_htons>
 8009194:	ea4b 0000 	orr.w	r0, fp, r0
 8009198:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800919c:	686b      	ldr	r3, [r5, #4]
 800919e:	89db      	ldrh	r3, [r3, #14]
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	f47f af71 	bne.w	8009088 <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80091a6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091a8:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80091ac:	f7fb fa7d 	bl	80046aa <lwip_htonl>
 80091b0:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80091b4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80091b6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80091ba:	f7fb fa73 	bl	80046a4 <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80091be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80091c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80091c2:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80091c6:	4413      	add	r3, r2
 80091c8:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80091ca:	7aab      	ldrb	r3, [r5, #10]
 80091cc:	07db      	lsls	r3, r3, #31
 80091ce:	d50c      	bpl.n	80091ea <tcp_output+0x23a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80091d0:	4641      	mov	r1, r8
 80091d2:	f240 50b4 	movw	r0, #1460	; 0x5b4
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80091d6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80091da:	f7fe f951 	bl	8007480 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80091de:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80091e2:	f7fb fa62 	bl	80046aa <lwip_htonl>
 80091e6:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80091ea:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 80091ee:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 80091f0:	bfbc      	itt	lt
 80091f2:	2300      	movlt	r3, #0
 80091f4:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80091f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80091f8:	b93b      	cbnz	r3, 800920a <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 80091fa:	4b1b      	ldr	r3, [pc, #108]	; (8009268 <tcp_output+0x2b8>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009200:	68eb      	ldr	r3, [r5, #12]
 8009202:	6858      	ldr	r0, [r3, #4]
 8009204:	f7fb fa51 	bl	80046aa <lwip_htonl>
 8009208:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800920a:	6868      	ldr	r0, [r5, #4]
 800920c:	68ea      	ldr	r2, [r5, #12]
 800920e:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009210:	8941      	ldrh	r1, [r0, #10]
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8009212:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8009218:	1ac9      	subs	r1, r1, r3
 800921a:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800921c:	8901      	ldrh	r1, [r0, #8]
 800921e:	1acb      	subs	r3, r1, r3
 8009220:	8103      	strh	r3, [r0, #8]

  seg->tcphdr->chksum = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	7413      	strb	r3, [r2, #16]
 8009226:	7453      	strb	r3, [r2, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009228:	2206      	movs	r2, #6
 800922a:	9201      	str	r2, [sp, #4]
 800922c:	7a62      	ldrb	r2, [r4, #9]
 800922e:	9200      	str	r2, [sp, #0]
 8009230:	7aa3      	ldrb	r3, [r4, #10]
 8009232:	f8cd 9008 	str.w	r9, [sp, #8]
 8009236:	4642      	mov	r2, r8
 8009238:	4621      	mov	r1, r4
 800923a:	f7fc f82f 	bl	800529c <ip4_output_if>
    if (err != ERR_OK) {
 800923e:	2800      	cmp	r0, #0
 8009240:	f43f af22 	beq.w	8009088 <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8009244:	7ea3      	ldrb	r3, [r4, #26]
 8009246:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800924a:	76a3      	strb	r3, [r4, #26]
}
 800924c:	b007      	add	sp, #28
 800924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009252:	bf00      	nop
 8009254:	0800d44c 	.word	0x0800d44c
 8009258:	0800d3e1 	.word	0x0800d3e1
 800925c:	0800bc05 	.word	0x0800bc05
 8009260:	2000d938 	.word	0x2000d938
 8009264:	0800d407 	.word	0x0800d407
 8009268:	2000d928 	.word	0x2000d928
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800926c:	68d2      	ldr	r2, [r2, #12]
 800926e:	9305      	str	r3, [sp, #20]
 8009270:	6850      	ldr	r0, [r2, #4]
 8009272:	f7fb fa1a 	bl	80046aa <lwip_htonl>
 8009276:	68e9      	ldr	r1, [r5, #12]
 8009278:	4682      	mov	sl, r0
 800927a:	6848      	ldr	r0, [r1, #4]
 800927c:	f7fb fa15 	bl	80046aa <lwip_htonl>
 8009280:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8009284:	2800      	cmp	r0, #0
 8009286:	9b05      	ldr	r3, [sp, #20]
 8009288:	f6bf af47 	bge.w	800911a <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	e740      	b.n	8009112 <tcp_output+0x162>
          useg->next = seg;
 8009290:	6035      	str	r5, [r6, #0]
 8009292:	e72c      	b.n	80090ee <tcp_output+0x13e>
      tcp_seg_free(seg);
 8009294:	4628      	mov	r0, r5
 8009296:	f7fd fbbb 	bl	8006a10 <tcp_seg_free>
 800929a:	e741      	b.n	8009120 <tcp_output+0x170>
    return ERR_RTE;
 800929c:	f06f 0003 	mvn.w	r0, #3
 80092a0:	e7d4      	b.n	800924c <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80092a2:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 80092a6:	f47f af6b 	bne.w	8009180 <tcp_output+0x1d0>
 80092aa:	e6dd      	b.n	8009068 <tcp_output+0xb8>

080092ac <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80092ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b0:	b085      	sub	sp, #20
 80092b2:	4681      	mov	r9, r0
 80092b4:	460e      	mov	r6, r1
 80092b6:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80092b8:	2114      	movs	r1, #20
 80092ba:	2200      	movs	r2, #0
 80092bc:	2001      	movs	r0, #1
{
 80092be:	461f      	mov	r7, r3
 80092c0:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 80092c4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80092c8:	f7fc fffe 	bl	80062c8 <pbuf_alloc>
  if (p == NULL) {
 80092cc:	4605      	mov	r5, r0
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d03c      	beq.n	800934c <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80092d2:	8943      	ldrh	r3, [r0, #10]
 80092d4:	2b13      	cmp	r3, #19
 80092d6:	d806      	bhi.n	80092e6 <tcp_rst+0x3a>
 80092d8:	4b1e      	ldr	r3, [pc, #120]	; (8009354 <tcp_rst+0xa8>)
 80092da:	491f      	ldr	r1, [pc, #124]	; (8009358 <tcp_rst+0xac>)
 80092dc:	481f      	ldr	r0, [pc, #124]	; (800935c <tcp_rst+0xb0>)
 80092de:	f240 524d 	movw	r2, #1357	; 0x54d
 80092e2:	f001 fb43 	bl	800a96c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  tcphdr->src = lwip_htons(local_port);
 80092e6:	4658      	mov	r0, fp
  tcphdr = (struct tcp_hdr *)p->payload;
 80092e8:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 80092ea:	f7fb f9db 	bl	80046a4 <lwip_htons>
 80092ee:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80092f0:	4650      	mov	r0, sl
 80092f2:	f7fb f9d7 	bl	80046a4 <lwip_htons>
 80092f6:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80092f8:	4648      	mov	r0, r9
 80092fa:	f7fb f9d6 	bl	80046aa <lwip_htonl>
 80092fe:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009300:	4630      	mov	r0, r6
 8009302:	f7fb f9d2 	bl	80046aa <lwip_htonl>
 8009306:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009308:	f245 0014 	movw	r0, #20500	; 0x5014
 800930c:	f7fb f9ca 	bl	80046a4 <lwip_htons>
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009310:	230b      	movs	r3, #11
 8009312:	2600      	movs	r6, #0
 8009314:	73a3      	strb	r3, [r4, #14]
 8009316:	2368      	movs	r3, #104	; 0x68
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009318:	81a0      	strh	r0, [r4, #12]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800931a:	73e3      	strb	r3, [r4, #15]
#endif
  tcphdr->chksum = 0;
 800931c:	7426      	strb	r6, [r4, #16]
 800931e:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8009320:	74a6      	strb	r6, [r4, #18]
 8009322:	74e6      	strb	r6, [r4, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009324:	4638      	mov	r0, r7
 8009326:	f7fb fe53 	bl	8004fd0 <ip4_route>
  if (netif != NULL) {
 800932a:	b148      	cbz	r0, 8009340 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800932c:	2306      	movs	r3, #6
 800932e:	9002      	str	r0, [sp, #8]
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	9600      	str	r6, [sp, #0]
 8009334:	23ff      	movs	r3, #255	; 0xff
 8009336:	463a      	mov	r2, r7
 8009338:	4641      	mov	r1, r8
 800933a:	4628      	mov	r0, r5
 800933c:	f7fb ffae 	bl	800529c <ip4_output_if>
  }
  pbuf_free(p);
 8009340:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009342:	b005      	add	sp, #20
 8009344:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009348:	f7fc bf54 	b.w	80061f4 <pbuf_free>
}
 800934c:	b005      	add	sp, #20
 800934e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009352:	bf00      	nop
 8009354:	0800d44c 	.word	0x0800d44c
 8009358:	0800d41e 	.word	0x0800d41e
 800935c:	0800bc05 	.word	0x0800bc05

08009360 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009360:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8009362:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8009364:	b1aa      	cbz	r2, 8009392 <tcp_rexmit_rto+0x32>
 8009366:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009368:	680b      	ldr	r3, [r1, #0]
 800936a:	b983      	cbnz	r3, 800938e <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800936c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800936e:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009370:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009372:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8009376:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009378:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800937a:	bf1c      	itt	ne
 800937c:	3301      	addne	r3, #1
 800937e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009382:	2300      	movs	r3, #0
 8009384:	6343      	str	r3, [r0, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8009386:	f85d 4b04 	ldr.w	r4, [sp], #4
  tcp_output(pcb);
 800938a:	f7ff be11 	b.w	8008fb0 <tcp_output>
 800938e:	4619      	mov	r1, r3
 8009390:	e7ea      	b.n	8009368 <tcp_rexmit_rto+0x8>
}
 8009392:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009396:	4770      	bx	lr

08009398 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800939a:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800939c:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800939e:	b1ad      	cbz	r5, 80093cc <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 80093a0:	682b      	ldr	r3, [r5, #0]
 80093a2:	66c3      	str	r3, [r0, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80093a4:	f100 0668 	add.w	r6, r0, #104	; 0x68
  while (*cur_seg &&
 80093a8:	6833      	ldr	r3, [r6, #0]
 80093aa:	b983      	cbnz	r3, 80093ce <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 80093ac:	6833      	ldr	r3, [r6, #0]
 80093ae:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 80093b0:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80093b2:	682b      	ldr	r3, [r5, #0]
 80093b4:	b90b      	cbnz	r3, 80093ba <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80093b6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80093ba:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80093be:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80093c0:	bf1c      	itt	ne
 80093c2:	3301      	addne	r3, #1
 80093c4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	6363      	str	r3, [r4, #52]	; 0x34
 80093cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	6858      	ldr	r0, [r3, #4]
 80093d2:	f7fb f96a 	bl	80046aa <lwip_htonl>
 80093d6:	68eb      	ldr	r3, [r5, #12]
 80093d8:	4607      	mov	r7, r0
 80093da:	6858      	ldr	r0, [r3, #4]
 80093dc:	f7fb f965 	bl	80046aa <lwip_htonl>
 80093e0:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 80093e2:	2800      	cmp	r0, #0
 80093e4:	dae2      	bge.n	80093ac <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 80093e6:	6836      	ldr	r6, [r6, #0]
 80093e8:	e7de      	b.n	80093a8 <tcp_rexmit+0x10>

080093ea <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80093ea:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 80093ec:	b510      	push	{r4, lr}
 80093ee:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80093f0:	b30b      	cbz	r3, 8009436 <tcp_rexmit_fast+0x4c>
 80093f2:	7e83      	ldrb	r3, [r0, #26]
 80093f4:	075b      	lsls	r3, r3, #29
 80093f6:	d41e      	bmi.n	8009436 <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80093f8:	f7ff ffce 	bl	8009398 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80093fc:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8009400:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009404:	4293      	cmp	r3, r2
 8009406:	bf38      	it	cc
 8009408:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800940a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800940c:	bf28      	it	cs
 800940e:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009410:	0059      	lsls	r1, r3, #1
 8009412:	428a      	cmp	r2, r1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009414:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009418:	bf38      	it	cc
 800941a:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800941e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009422:	440b      	add	r3, r1
 8009424:	4413      	add	r3, r2
 8009426:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800942a:	7ea3      	ldrb	r3, [r4, #26]
 800942c:	f043 0304 	orr.w	r3, r3, #4
 8009430:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	8623      	strh	r3, [r4, #48]	; 0x30
 8009436:	bd10      	pop	{r4, pc}

08009438 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009438:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800943a:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800943c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800943e:	3801      	subs	r0, #1
 8009440:	f7fb f933 	bl	80046aa <lwip_htonl>
 8009444:	2100      	movs	r1, #0
 8009446:	4602      	mov	r2, r0
 8009448:	4620      	mov	r0, r4
 800944a:	f7ff f9ef 	bl	800882c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800944e:	4605      	mov	r5, r0
 8009450:	b1c8      	cbz	r0, 8009486 <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009452:	1d26      	adds	r6, r4, #4
 8009454:	4630      	mov	r0, r6
 8009456:	f7fb fdbb 	bl	8004fd0 <ip4_route>
  if (netif == NULL) {
 800945a:	b188      	cbz	r0, 8009480 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800945c:	2100      	movs	r1, #0
 800945e:	2206      	movs	r2, #6
 8009460:	7aa3      	ldrb	r3, [r4, #10]
 8009462:	9002      	str	r0, [sp, #8]
 8009464:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009468:	4628      	mov	r0, r5
 800946a:	4621      	mov	r1, r4
 800946c:	4632      	mov	r2, r6
 800946e:	f7fb ff15 	bl	800529c <ip4_output_if>
 8009472:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009474:	4628      	mov	r0, r5
 8009476:	f7fc febd 	bl	80061f4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800947a:	4620      	mov	r0, r4
 800947c:	b004      	add	sp, #16
 800947e:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8009480:	f06f 0403 	mvn.w	r4, #3
 8009484:	e7f6      	b.n	8009474 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8009486:	f04f 34ff 	mov.w	r4, #4294967295
 800948a:	e7f6      	b.n	800947a <tcp_keepalive+0x42>

0800948c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800948c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009490:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8009492:	4606      	mov	r6, r0

  if (seg == NULL) {
 8009494:	b914      	cbnz	r4, 800949c <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8009496:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8009498:	2c00      	cmp	r4, #0
 800949a:	d042      	beq.n	8009522 <tcp_zero_window_probe+0x96>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800949c:	68e3      	ldr	r3, [r4, #12]
 800949e:	8998      	ldrh	r0, [r3, #12]
 80094a0:	f7fb f900 	bl	80046a4 <lwip_htons>
 80094a4:	f010 0501 	ands.w	r5, r0, #1
 80094a8:	bf18      	it	ne
 80094aa:	8925      	ldrhne	r5, [r4, #8]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80094ac:	68e3      	ldr	r3, [r4, #12]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80094ae:	bf1c      	itt	ne
 80094b0:	fab5 f585 	clzne	r5, r5
 80094b4:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	f085 0101 	eor.w	r1, r5, #1
 80094bc:	4630      	mov	r0, r6
 80094be:	f7ff f9b5 	bl	800882c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80094c2:	4607      	mov	r7, r0
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d03e      	beq.n	8009546 <tcp_zero_window_probe+0xba>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80094c8:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 80094cc:	b36d      	cbz	r5, 800952a <tcp_zero_window_probe+0x9e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80094ce:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 80094d2:	2011      	movs	r0, #17
 80094d4:	f7fb f8e6 	bl	80046a4 <lwip_htons>
 80094d8:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80094dc:	b2ad      	uxth	r5, r5
 80094de:	4328      	orrs	r0, r5
 80094e0:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80094e4:	68e3      	ldr	r3, [r4, #12]
 80094e6:	6858      	ldr	r0, [r3, #4]
 80094e8:	f7fb f8df 	bl	80046aa <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80094ec:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80094ee:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80094f0:	1a1b      	subs	r3, r3, r0
 80094f2:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80094f4:	f106 0404 	add.w	r4, r6, #4
    pcb->snd_nxt = snd_nxt;
 80094f8:	bfb8      	it	lt
 80094fa:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80094fc:	4620      	mov	r0, r4
 80094fe:	f7fb fd67 	bl	8004fd0 <ip4_route>
  if (netif == NULL) {
 8009502:	b1e8      	cbz	r0, 8009540 <tcp_zero_window_probe+0xb4>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009504:	2100      	movs	r1, #0
 8009506:	2206      	movs	r2, #6
 8009508:	e88d 0006 	stmia.w	sp, {r1, r2}
 800950c:	9002      	str	r0, [sp, #8]
 800950e:	4622      	mov	r2, r4
 8009510:	7ab3      	ldrb	r3, [r6, #10]
 8009512:	4631      	mov	r1, r6
 8009514:	4638      	mov	r0, r7
 8009516:	f7fb fec1 	bl	800529c <ip4_output_if>
 800951a:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800951c:	4638      	mov	r0, r7
 800951e:	f7fc fe69 	bl	80061f4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009522:	4620      	mov	r0, r4
 8009524:	b004      	add	sp, #16
 8009526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800952a:	6860      	ldr	r0, [r4, #4]
 800952c:	8922      	ldrh	r2, [r4, #8]
 800952e:	8903      	ldrh	r3, [r0, #8]
 8009530:	1a9b      	subs	r3, r3, r2
 8009532:	b29b      	uxth	r3, r3
 8009534:	2201      	movs	r2, #1
 8009536:	f108 0114 	add.w	r1, r8, #20
 800953a:	f7fd f8f9 	bl	8006730 <pbuf_copy_partial>
 800953e:	e7d1      	b.n	80094e4 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8009540:	f06f 0403 	mvn.w	r4, #3
 8009544:	e7ea      	b.n	800951c <tcp_zero_window_probe+0x90>
    return ERR_MEM;
 8009546:	f04f 34ff 	mov.w	r4, #4294967295
 800954a:	e7ea      	b.n	8009522 <tcp_zero_window_probe+0x96>

0800954c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009552:	200a      	movs	r0, #10
{
 8009554:	460f      	mov	r7, r1
 8009556:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009558:	f7fc fcd6 	bl	8005f08 <memp_malloc>
  if (timeout == NULL) {
 800955c:	4604      	mov	r4, r0
 800955e:	b938      	cbnz	r0, 8009570 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009560:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <sys_timeout+0x90>)
 8009562:	491f      	ldr	r1, [pc, #124]	; (80095e0 <sys_timeout+0x94>)
 8009564:	481f      	ldr	r0, [pc, #124]	; (80095e4 <sys_timeout+0x98>)
 8009566:	22d4      	movs	r2, #212	; 0xd4
        t->next = timeout;
        break;
      }
    }
  }
}
 8009568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800956c:	f001 b9fe 	b.w	800a96c <iprintf>
  now = sys_now();
 8009570:	f000 fcde 	bl	8009f30 <sys_now>
  if (next_timeout == NULL) {
 8009574:	4a1c      	ldr	r2, [pc, #112]	; (80095e8 <sys_timeout+0x9c>)
 8009576:	491d      	ldr	r1, [pc, #116]	; (80095ec <sys_timeout+0xa0>)
 8009578:	6813      	ldr	r3, [r2, #0]
 800957a:	b95b      	cbnz	r3, 8009594 <sys_timeout+0x48>
    timeouts_last_time = now;
 800957c:	6008      	str	r0, [r1, #0]
    diff = 0;
 800957e:	4618      	mov	r0, r3
  timeout->next = NULL;
 8009580:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8009582:	4428      	add	r0, r5
  timeout->next = NULL;
 8009584:	6021      	str	r1, [r4, #0]
  timeout->h = handler;
 8009586:	60a7      	str	r7, [r4, #8]
  timeout->arg = arg;
 8009588:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800958a:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800958c:	b92b      	cbnz	r3, 800959a <sys_timeout+0x4e>
    next_timeout = timeout;
 800958e:	6014      	str	r4, [r2, #0]
 8009590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8009594:	6809      	ldr	r1, [r1, #0]
 8009596:	1a40      	subs	r0, r0, r1
 8009598:	e7f2      	b.n	8009580 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800959a:	6859      	ldr	r1, [r3, #4]
 800959c:	428d      	cmp	r5, r1
 800959e:	d217      	bcs.n	80095d0 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 80095a0:	1b4d      	subs	r5, r1, r5
 80095a2:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	e7f2      	b.n	800958e <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 80095a8:	684e      	ldr	r6, [r1, #4]
 80095aa:	42b2      	cmp	r2, r6
 80095ac:	d312      	bcc.n	80095d4 <sys_timeout+0x88>
 80095ae:	4608      	mov	r0, r1
      timeout->time -= t->time;
 80095b0:	6841      	ldr	r1, [r0, #4]
 80095b2:	6862      	ldr	r2, [r4, #4]
 80095b4:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 80095b6:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 80095b8:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80095ba:	2900      	cmp	r1, #0
 80095bc:	d1f4      	bne.n	80095a8 <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 80095be:	4295      	cmp	r5, r2
 80095c0:	d202      	bcs.n	80095c8 <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	441d      	add	r5, r3
 80095c6:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 80095c8:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 80095ca:	6004      	str	r4, [r0, #0]
        break;
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d0:	4618      	mov	r0, r3
 80095d2:	e7ed      	b.n	80095b0 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 80095d4:	1ab2      	subs	r2, r6, r2
 80095d6:	604a      	str	r2, [r1, #4]
 80095d8:	e7f6      	b.n	80095c8 <sys_timeout+0x7c>
 80095da:	bf00      	nop
 80095dc:	0800d6e0 	.word	0x0800d6e0
 80095e0:	0800d714 	.word	0x0800d714
 80095e4:	0800bc05 	.word	0x0800bc05
 80095e8:	2000536c 	.word	0x2000536c
 80095ec:	20005374 	.word	0x20005374

080095f0 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80095f0:	4b08      	ldr	r3, [pc, #32]	; (8009614 <tcp_timer_needed+0x24>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	b962      	cbnz	r2, 8009610 <tcp_timer_needed+0x20>
 80095f6:	4a08      	ldr	r2, [pc, #32]	; (8009618 <tcp_timer_needed+0x28>)
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	b912      	cbnz	r2, 8009602 <tcp_timer_needed+0x12>
 80095fc:	4a07      	ldr	r2, [pc, #28]	; (800961c <tcp_timer_needed+0x2c>)
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	b132      	cbz	r2, 8009610 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009606:	4906      	ldr	r1, [pc, #24]	; (8009620 <tcp_timer_needed+0x30>)
 8009608:	2200      	movs	r2, #0
 800960a:	20fa      	movs	r0, #250	; 0xfa
 800960c:	f7ff bf9e 	b.w	800954c <sys_timeout>
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20005370 	.word	0x20005370
 8009618:	2000d924 	.word	0x2000d924
 800961c:	2000d934 	.word	0x2000d934
 8009620:	08009625 	.word	0x08009625

08009624 <tcpip_tcp_timer>:
{
 8009624:	b508      	push	{r3, lr}
  tcp_tmr();
 8009626:	f7fd fdcd 	bl	80071c4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800962a:	4b08      	ldr	r3, [pc, #32]	; (800964c <tcpip_tcp_timer+0x28>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	b913      	cbnz	r3, 8009636 <tcpip_tcp_timer+0x12>
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <tcpip_tcp_timer+0x2c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	b133      	cbz	r3, 8009644 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009636:	2200      	movs	r2, #0
 8009638:	4906      	ldr	r1, [pc, #24]	; (8009654 <tcpip_tcp_timer+0x30>)
 800963a:	20fa      	movs	r0, #250	; 0xfa
}
 800963c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009640:	f7ff bf84 	b.w	800954c <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8009644:	4a04      	ldr	r2, [pc, #16]	; (8009658 <tcpip_tcp_timer+0x34>)
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	bd08      	pop	{r3, pc}
 800964a:	bf00      	nop
 800964c:	2000d924 	.word	0x2000d924
 8009650:	2000d934 	.word	0x2000d934
 8009654:	08009625 	.word	0x08009625
 8009658:	20005370 	.word	0x20005370

0800965c <sys_timeouts_init>:
{
 800965c:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800965e:	4d0a      	ldr	r5, [pc, #40]	; (8009688 <sys_timeouts_init+0x2c>)
 8009660:	4c0a      	ldr	r4, [pc, #40]	; (800968c <sys_timeouts_init+0x30>)
 8009662:	f105 0208 	add.w	r2, r5, #8
 8009666:	4621      	mov	r1, r4
 8009668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800966c:	f7ff ff6e 	bl	800954c <sys_timeout>
 8009670:	f105 0210 	add.w	r2, r5, #16
 8009674:	4621      	mov	r1, r4
 8009676:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800967a:	f7ff ff67 	bl	800954c <sys_timeout>
  timeouts_last_time = sys_now();
 800967e:	f000 fc57 	bl	8009f30 <sys_now>
 8009682:	4b03      	ldr	r3, [pc, #12]	; (8009690 <sys_timeouts_init+0x34>)
 8009684:	6018      	str	r0, [r3, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	0800d6c8 	.word	0x0800d6c8
 800968c:	08009695 	.word	0x08009695
 8009690:	20005374 	.word	0x20005374

08009694 <cyclic_timer>:
{
 8009694:	b510      	push	{r4, lr}
 8009696:	4604      	mov	r4, r0
  cyclic->handler();
 8009698:	6843      	ldr	r3, [r0, #4]
 800969a:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800969c:	4622      	mov	r2, r4
 800969e:	6820      	ldr	r0, [r4, #0]
 80096a0:	4902      	ldr	r1, [pc, #8]	; (80096ac <cyclic_timer+0x18>)
}
 80096a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80096a6:	f7ff bf51 	b.w	800954c <sys_timeout>
 80096aa:	bf00      	nop
 80096ac:	08009695 	.word	0x08009695

080096b0 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 80096b0:	b470      	push	{r4, r5, r6}
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 80096b2:	4c10      	ldr	r4, [pc, #64]	; (80096f4 <sys_untimeout+0x44>)
 80096b4:	6823      	ldr	r3, [r4, #0]
 80096b6:	b1db      	cbz	r3, 80096f0 <sys_untimeout+0x40>
 80096b8:	2500      	movs	r5, #0
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
    if ((t->h == handler) && (t->arg == arg)) {
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	4282      	cmp	r2, r0
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	d113      	bne.n	80096ea <sys_untimeout+0x3a>
 80096c2:	68de      	ldr	r6, [r3, #12]
 80096c4:	428e      	cmp	r6, r1
 80096c6:	d110      	bne.n	80096ea <sys_untimeout+0x3a>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 80096c8:	b96d      	cbnz	r5, 80096e6 <sys_untimeout+0x36>
        next_timeout = t->next;
 80096ca:	6022      	str	r2, [r4, #0]
      } else {
        prev_t->next = t->next;
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	b11a      	cbz	r2, 80096d8 <sys_untimeout+0x28>
        t->next->time += t->time;
 80096d0:	6851      	ldr	r1, [r2, #4]
 80096d2:	6858      	ldr	r0, [r3, #4]
 80096d4:	4401      	add	r1, r0
 80096d6:	6051      	str	r1, [r2, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 80096d8:	4619      	mov	r1, r3
 80096da:	200a      	movs	r0, #10
      return;
    }
  }
  return;
}
 80096dc:	bc70      	pop	{r4, r5, r6}
      memp_free(MEMP_SYS_TIMEOUT, t);
 80096de:	f7fc bc2f 	b.w	8005f40 <memp_free>
 80096e2:	4613      	mov	r3, r2
 80096e4:	e7e9      	b.n	80096ba <sys_untimeout+0xa>
        prev_t->next = t->next;
 80096e6:	602a      	str	r2, [r5, #0]
 80096e8:	e7f0      	b.n	80096cc <sys_untimeout+0x1c>
 80096ea:	461d      	mov	r5, r3
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d1f8      	bne.n	80096e2 <sys_untimeout+0x32>
}
 80096f0:	bc70      	pop	{r4, r5, r6}
 80096f2:	4770      	bx	lr
 80096f4:	2000536c 	.word	0x2000536c

080096f8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80096f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80096fc:	4d24      	ldr	r5, [pc, #144]	; (8009790 <sys_timeouts_mbox_fetch+0x98>)
  diff = sys_now() - timeouts_last_time;
 80096fe:	4c25      	ldr	r4, [pc, #148]	; (8009794 <sys_timeouts_mbox_fetch+0x9c>)
{
 8009700:	4681      	mov	r9, r0
 8009702:	468a      	mov	sl, r1
 8009704:	462e      	mov	r6, r5
  if (!next_timeout) {
 8009706:	682a      	ldr	r2, [r5, #0]
 8009708:	b932      	cbnz	r2, 8009718 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800970a:	4651      	mov	r1, sl
 800970c:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800970e:	b003      	add	sp, #12
 8009710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009714:	f000 b992 	b.w	8009a3c <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 8009718:	f000 fc0a 	bl	8009f30 <sys_now>
 800971c:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 800971e:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 8009720:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	4290      	cmp	r0, r2
 8009726:	d928      	bls.n	800977a <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0eb      	beq.n	8009706 <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 800972e:	f000 fbff 	bl	8009f30 <sys_now>
    diff = now - timeouts_last_time;
 8009732:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 8009734:	4f18      	ldr	r7, [pc, #96]	; (8009798 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 8009736:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 800973a:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800973c:	2900      	cmp	r1, #0
 800973e:	d0e2      	beq.n	8009706 <sys_timeouts_mbox_fetch+0xe>
 8009740:	684a      	ldr	r2, [r1, #4]
 8009742:	455a      	cmp	r2, fp
 8009744:	d8df      	bhi.n	8009706 <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 8009746:	6820      	ldr	r0, [r4, #0]
        handler = tmptimeout->h;
 8009748:	f8d1 8008 	ldr.w	r8, [r1, #8]
        arg = tmptimeout->arg;
 800974c:	68cb      	ldr	r3, [r1, #12]
 800974e:	9301      	str	r3, [sp, #4]
        timeouts_last_time += tmptimeout->time;
 8009750:	4410      	add	r0, r2
 8009752:	6020      	str	r0, [r4, #0]
        diff -= tmptimeout->time;
 8009754:	ebab 0b02 	sub.w	fp, fp, r2
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009758:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800975a:	680a      	ldr	r2, [r1, #0]
 800975c:	6032      	str	r2, [r6, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800975e:	f7fc fbef 	bl	8005f40 <memp_free>
        if (handler != NULL) {
 8009762:	f1b8 0f00 	cmp.w	r8, #0
 8009766:	d0e8      	beq.n	800973a <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 8009768:	4638      	mov	r0, r7
 800976a:	f000 f9aa 	bl	8009ac2 <sys_mutex_lock>
          handler(arg);
 800976e:	9801      	ldr	r0, [sp, #4]
 8009770:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 8009772:	4638      	mov	r0, r7
 8009774:	f000 f9aa 	bl	8009acc <sys_mutex_unlock>
 8009778:	e7df      	b.n	800973a <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800977a:	1a12      	subs	r2, r2, r0
 800977c:	d0d4      	beq.n	8009728 <sys_timeouts_mbox_fetch+0x30>
 800977e:	4651      	mov	r1, sl
 8009780:	4648      	mov	r0, r9
 8009782:	f000 f95b 	bl	8009a3c <sys_arch_mbox_fetch>
 8009786:	3001      	adds	r0, #1
 8009788:	d0ce      	beq.n	8009728 <sys_timeouts_mbox_fetch+0x30>
}
 800978a:	b003      	add	sp, #12
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	2000536c 	.word	0x2000536c
 8009794:	20005374 	.word	0x20005374
 8009798:	200055e8 	.word	0x200055e8

0800979c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800979c:	4770      	bx	lr
	...

080097a0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80097a4:	8943      	ldrh	r3, [r0, #10]
 80097a6:	2b07      	cmp	r3, #7
{
 80097a8:	b085      	sub	sp, #20
 80097aa:	4605      	mov	r5, r0
 80097ac:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 80097ae:	d805      	bhi.n	80097bc <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80097b0:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80097b2:	b005      	add	sp, #20
 80097b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 80097b8:	f7fc bd1c 	b.w	80061f4 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80097bc:	4e3e      	ldr	r6, [pc, #248]	; (80098b8 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 80097be:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80097c0:	6831      	ldr	r1, [r6, #0]
 80097c2:	6970      	ldr	r0, [r6, #20]
 80097c4:	f7fb fd7b 	bl	80052be <ip4_addr_isbroadcast_u32>
 80097c8:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 80097ca:	8820      	ldrh	r0, [r4, #0]
 80097cc:	f7fa ff6a 	bl	80046a4 <lwip_htons>
 80097d0:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 80097d2:	8860      	ldrh	r0, [r4, #2]
 80097d4:	f7fa ff66 	bl	80046a4 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80097d8:	4a38      	ldr	r2, [pc, #224]	; (80098bc <udp_input+0x11c>)
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80097da:	6971      	ldr	r1, [r6, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80097dc:	f8d6 e010 	ldr.w	lr, [r6, #16]
 80097e0:	9603      	str	r6, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 80097e2:	4682      	mov	sl, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80097e4:	6810      	ldr	r0, [r2, #0]
  uncon_pcb = NULL;
 80097e6:	2400      	movs	r4, #0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80097e8:	4603      	mov	r3, r0
  prev = NULL;
 80097ea:	46a4      	mov	ip, r4
 80097ec:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80097ee:	b92b      	cbnz	r3, 80097fc <udp_input+0x5c>
  if (pcb != NULL) {
 80097f0:	bb0c      	cbnz	r4, 8009836 <udp_input+0x96>
  if (for_us) {
 80097f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80097f6:	428b      	cmp	r3, r1
 80097f8:	d1da      	bne.n	80097b0 <udp_input+0x10>
 80097fa:	e01c      	b.n	8009836 <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 80097fc:	8a5a      	ldrh	r2, [r3, #18]
 80097fe:	4552      	cmp	r2, sl
 8009800:	d12b      	bne.n	800985a <udp_input+0xba>
 8009802:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8009804:	b32f      	cbz	r7, 8009852 <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009806:	b13a      	cbz	r2, 8009818 <udp_input+0x78>
 8009808:	1c4e      	adds	r6, r1, #1
 800980a:	d005      	beq.n	8009818 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800980c:	404a      	eors	r2, r1
 800980e:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009810:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009814:	4216      	tst	r6, r2
 8009816:	d120      	bne.n	800985a <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009818:	7c1a      	ldrb	r2, [r3, #16]
 800981a:	0752      	lsls	r2, r2, #29
 800981c:	d402      	bmi.n	8009824 <udp_input+0x84>
 800981e:	2c00      	cmp	r4, #0
 8009820:	bf08      	it	eq
 8009822:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8009824:	8a9a      	ldrh	r2, [r3, #20]
 8009826:	4542      	cmp	r2, r8
 8009828:	d117      	bne.n	800985a <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800982a:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800982c:	b9c2      	cbnz	r2, 8009860 <udp_input+0xc0>
        if (prev != NULL) {
 800982e:	f1bc 0f00 	cmp.w	ip, #0
 8009832:	d118      	bne.n	8009866 <udp_input+0xc6>
 8009834:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8009836:	f06f 0107 	mvn.w	r1, #7
 800983a:	4628      	mov	r0, r5
 800983c:	f7fc fcd4 	bl	80061e8 <pbuf_header>
 8009840:	b1c0      	cbz	r0, 8009874 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009842:	4b1f      	ldr	r3, [pc, #124]	; (80098c0 <udp_input+0x120>)
 8009844:	491f      	ldr	r1, [pc, #124]	; (80098c4 <udp_input+0x124>)
 8009846:	4820      	ldr	r0, [pc, #128]	; (80098c8 <udp_input+0x128>)
 8009848:	f240 1255 	movw	r2, #341	; 0x155
 800984c:	f001 f88e 	bl	800a96c <iprintf>
 8009850:	e7ae      	b.n	80097b0 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009852:	2a00      	cmp	r2, #0
 8009854:	d0e0      	beq.n	8009818 <udp_input+0x78>
 8009856:	428a      	cmp	r2, r1
 8009858:	d0de      	beq.n	8009818 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800985a:	469c      	mov	ip, r3
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	e7c6      	b.n	80097ee <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009860:	4572      	cmp	r2, lr
 8009862:	d1fa      	bne.n	800985a <udp_input+0xba>
 8009864:	e7e3      	b.n	800982e <udp_input+0x8e>
          prev->next = pcb->next;
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	f8cc 200c 	str.w	r2, [ip, #12]
          udp_pcbs = pcb;
 800986c:	f8cb 3000 	str.w	r3, [fp]
          pcb->next = udp_pcbs;
 8009870:	60d8      	str	r0, [r3, #12]
 8009872:	e7df      	b.n	8009834 <udp_input+0x94>
    if (pcb != NULL) {
 8009874:	b164      	cbz	r4, 8009890 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8009876:	69a6      	ldr	r6, [r4, #24]
 8009878:	2e00      	cmp	r6, #0
 800987a:	d099      	beq.n	80097b0 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800987c:	f8cd 8000 	str.w	r8, [sp]
 8009880:	4b12      	ldr	r3, [pc, #72]	; (80098cc <udp_input+0x12c>)
 8009882:	69e0      	ldr	r0, [r4, #28]
 8009884:	462a      	mov	r2, r5
 8009886:	4621      	mov	r1, r4
 8009888:	47b0      	blx	r6
}
 800988a:	b005      	add	sp, #20
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009890:	2f00      	cmp	r7, #0
 8009892:	d18d      	bne.n	80097b0 <udp_input+0x10>
 8009894:	9b03      	ldr	r3, [sp, #12]
 8009896:	695b      	ldr	r3, [r3, #20]
 8009898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800989c:	2be0      	cmp	r3, #224	; 0xe0
 800989e:	d087      	beq.n	80097b0 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	8999      	ldrh	r1, [r3, #12]
 80098a4:	3108      	adds	r1, #8
 80098a6:	b209      	sxth	r1, r1
 80098a8:	4628      	mov	r0, r5
 80098aa:	f7fc fca0 	bl	80061ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80098ae:	2103      	movs	r1, #3
 80098b0:	4628      	mov	r0, r5
 80098b2:	f7fb fb83 	bl	8004fbc <icmp_dest_unreach>
 80098b6:	e77b      	b.n	80097b0 <udp_input+0x10>
 80098b8:	200055ec 	.word	0x200055ec
 80098bc:	2000d93c 	.word	0x2000d93c
 80098c0:	0800d751 	.word	0x0800d751
 80098c4:	0800d780 	.word	0x0800d780
 80098c8:	0800bc05 	.word	0x0800bc05
 80098cc:	200055fc 	.word	0x200055fc

080098d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80098d0:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80098d2:	b138      	cbz	r0, 80098e4 <udp_netif_ip_addr_changed+0x14>
 80098d4:	6803      	ldr	r3, [r0, #0]
 80098d6:	b12b      	cbz	r3, 80098e4 <udp_netif_ip_addr_changed+0x14>
 80098d8:	b121      	cbz	r1, 80098e4 <udp_netif_ip_addr_changed+0x14>
 80098da:	680b      	ldr	r3, [r1, #0]
 80098dc:	b113      	cbz	r3, 80098e4 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80098de:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <udp_netif_ip_addr_changed+0x28>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	b903      	cbnz	r3, 80098e6 <udp_netif_ip_addr_changed+0x16>
 80098e4:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80098e6:	681c      	ldr	r4, [r3, #0]
 80098e8:	6802      	ldr	r2, [r0, #0]
 80098ea:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80098ec:	bf04      	itt	eq
 80098ee:	680a      	ldreq	r2, [r1, #0]
 80098f0:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	e7f5      	b.n	80098e2 <udp_netif_ip_addr_changed+0x12>
 80098f6:	bf00      	nop
 80098f8:	2000d93c 	.word	0x2000d93c

080098fc <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80098fc:	8943      	ldrh	r3, [r0, #10]
 80098fe:	2b0e      	cmp	r3, #14
{
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	4604      	mov	r4, r0
 8009904:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 8009906:	d914      	bls.n	8009932 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009908:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800990a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800990c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800990e:	07d9      	lsls	r1, r3, #31
 8009910:	d50a      	bpl.n	8009928 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009912:	2b01      	cmp	r3, #1
 8009914:	d111      	bne.n	800993a <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009916:	7843      	ldrb	r3, [r0, #1]
 8009918:	b933      	cbnz	r3, 8009928 <ethernet_input+0x2c>
 800991a:	7883      	ldrb	r3, [r0, #2]
 800991c:	2b5e      	cmp	r3, #94	; 0x5e
 800991e:	d103      	bne.n	8009928 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009920:	7b63      	ldrb	r3, [r4, #13]
 8009922:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009926:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8009928:	2e08      	cmp	r6, #8
 800992a:	d010      	beq.n	800994e <ethernet_input+0x52>
 800992c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8009930:	d01e      	beq.n	8009970 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 8009932:	4620      	mov	r0, r4
 8009934:	f7fc fc5e 	bl	80061f4 <pbuf_free>
  return ERR_OK;
 8009938:	e018      	b.n	800996c <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800993a:	2206      	movs	r2, #6
 800993c:	4914      	ldr	r1, [pc, #80]	; (8009990 <ethernet_input+0x94>)
 800993e:	f000 fff3 	bl	800a928 <memcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	d1f0      	bne.n	8009928 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 8009946:	7b63      	ldrb	r3, [r4, #13]
 8009948:	f043 0308 	orr.w	r3, r3, #8
 800994c:	e7eb      	b.n	8009926 <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800994e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009952:	071a      	lsls	r2, r3, #28
 8009954:	d5ed      	bpl.n	8009932 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009956:	f06f 010d 	mvn.w	r1, #13
 800995a:	4620      	mov	r0, r4
 800995c:	f7fc fc44 	bl	80061e8 <pbuf_header>
 8009960:	2800      	cmp	r0, #0
 8009962:	d1e6      	bne.n	8009932 <ethernet_input+0x36>
        ip4_input(p, netif);
 8009964:	4629      	mov	r1, r5
 8009966:	4620      	mov	r0, r4
 8009968:	f7fb fb5e 	bl	8005028 <ip4_input>
}
 800996c:	2000      	movs	r0, #0
 800996e:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8009970:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009974:	071b      	lsls	r3, r3, #28
 8009976:	d5dc      	bpl.n	8009932 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8009978:	f06f 010d 	mvn.w	r1, #13
 800997c:	4620      	mov	r0, r4
 800997e:	f7fc fc33 	bl	80061e8 <pbuf_header>
 8009982:	2800      	cmp	r0, #0
 8009984:	d1d5      	bne.n	8009932 <ethernet_input+0x36>
        etharp_input(p, netif);
 8009986:	4629      	mov	r1, r5
 8009988:	4620      	mov	r0, r4
 800998a:	f7fa ffbf 	bl	800490c <etharp_input>
      break;
 800998e:	e7ed      	b.n	800996c <ethernet_input+0x70>
 8009990:	0800d794 	.word	0x0800d794

08009994 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8009994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009998:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800999a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800999e:	460d      	mov	r5, r1
 80099a0:	4616      	mov	r6, r2
 80099a2:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80099a4:	f7fa fe7e 	bl	80046a4 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80099a8:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80099aa:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80099ac:	4628      	mov	r0, r5
 80099ae:	f7fc fc1b 	bl	80061e8 <pbuf_header>
 80099b2:	b9e0      	cbnz	r0, 80099ee <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80099b4:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 80099b6:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	600b      	str	r3, [r1, #0]
 80099be:	88bb      	ldrh	r3, [r7, #4]
 80099c0:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 80099c2:	6833      	ldr	r3, [r6, #0]
 80099c4:	f8c1 3006 	str.w	r3, [r1, #6]
 80099c8:	88b3      	ldrh	r3, [r6, #4]
 80099ca:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80099cc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80099d0:	2b06      	cmp	r3, #6
 80099d2:	d006      	beq.n	80099e2 <ethernet_output+0x4e>
 80099d4:	4b08      	ldr	r3, [pc, #32]	; (80099f8 <ethernet_output+0x64>)
 80099d6:	4909      	ldr	r1, [pc, #36]	; (80099fc <ethernet_output+0x68>)
 80099d8:	4809      	ldr	r0, [pc, #36]	; (8009a00 <ethernet_output+0x6c>)
 80099da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80099de:	f000 ffc5 	bl	800a96c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80099e2:	69a3      	ldr	r3, [r4, #24]
 80099e4:	4629      	mov	r1, r5
 80099e6:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80099e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80099ec:	4718      	bx	r3
}
 80099ee:	f06f 0001 	mvn.w	r0, #1
 80099f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f6:	bf00      	nop
 80099f8:	0800d79a 	.word	0x0800d79a
 80099fc:	0800d7cf 	.word	0x0800d7cf
 8009a00:	0800bc05 	.word	0x0800bc05

08009a04 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8009a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a06:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8009a08:	9100      	str	r1, [sp, #0]
 8009a0a:	2304      	movs	r3, #4
 8009a0c:	2100      	movs	r1, #0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8009a0e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8009a10:	9301      	str	r3, [sp, #4]
 8009a12:	9102      	str	r1, [sp, #8]
 8009a14:	9103      	str	r1, [sp, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8009a16:	f7f8 f9c7 	bl	8001da8 <osMessageCreate>
 8009a1a:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8009a1c:	fab0 f080 	clz	r0, r0
 8009a20:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 8009a22:	4240      	negs	r0, r0
 8009a24:	b004      	add	sp, #16
 8009a26:	bd10      	pop	{r4, pc}

08009a28 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8009a28:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6800      	ldr	r0, [r0, #0]
 8009a2e:	f7f8 f9cf 	bl	8001dd0 <osMessagePut>
 8009a32:	3000      	adds	r0, #0
 8009a34:	bf18      	it	ne
 8009a36:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8009a38:	4240      	negs	r0, r0
 8009a3a:	bd08      	pop	{r3, pc}

08009a3c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8009a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	4606      	mov	r6, r0
 8009a42:	460d      	mov	r5, r1
 8009a44:	4617      	mov	r7, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8009a46:	f7f8 f8d9 	bl	8001bfc <osKernelSysTick>
 8009a4a:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8009a4c:	b177      	cbz	r7, 8009a6c <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8009a4e:	463a      	mov	r2, r7
 8009a50:	6831      	ldr	r1, [r6, #0]
 8009a52:	a801      	add	r0, sp, #4
 8009a54:	f7f8 f9e4 	bl	8001e20 <osMessageGet>

    if(event.status == osEventMessage)
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	2b10      	cmp	r3, #16
 8009a5c:	d10d      	bne.n	8009a7a <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 8009a62:	f7f8 f8cb 	bl	8001bfc <osKernelSysTick>
 8009a66:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8009a68:	b005      	add	sp, #20
 8009a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8009a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a70:	6831      	ldr	r1, [r6, #0]
 8009a72:	a801      	add	r0, sp, #4
 8009a74:	f7f8 f9d4 	bl	8001e20 <osMessageGet>
 8009a78:	e7f1      	b.n	8009a5e <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 8009a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7e:	e7f3      	b.n	8009a68 <sys_arch_mbox_fetch+0x2c>

08009a80 <sys_mbox_valid>:
 8009a80:	6800      	ldr	r0, [r0, #0]
 8009a82:	3000      	adds	r0, #0
 8009a84:	bf18      	it	ne
 8009a86:	2001      	movne	r0, #1
 8009a88:	4770      	bx	lr
	...

08009a8c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8009a8c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8009a8e:	4803      	ldr	r0, [pc, #12]	; (8009a9c <sys_init+0x10>)
 8009a90:	f7f8 f8eb 	bl	8001c6a <osMutexCreate>
 8009a94:	4b02      	ldr	r3, [pc, #8]	; (8009aa0 <sys_init+0x14>)
 8009a96:	6018      	str	r0, [r3, #0]
 8009a98:	bd08      	pop	{r3, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800d808 	.word	0x0800d808
 8009aa0:	2000d944 	.word	0x2000d944

08009aa4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8009aa4:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8009aa6:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8009aa8:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 8009aaa:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8009ab0:	f7f8 f8db 	bl	8001c6a <osMutexCreate>
 8009ab4:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8009ab6:	fab0 f080 	clz	r0, r0
 8009aba:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8009abc:	4240      	negs	r0, r0
 8009abe:	b002      	add	sp, #8
 8009ac0:	bd10      	pop	{r4, pc}

08009ac2 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8009ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac6:	6800      	ldr	r0, [r0, #0]
 8009ac8:	f7f8 b8d6 	b.w	8001c78 <osMutexWait>

08009acc <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8009acc:	6800      	ldr	r0, [r0, #0]
 8009ace:	f7f8 b969 	b.w	8001da4 <osMutexRelease>

08009ad2 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8009ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad4:	b089      	sub	sp, #36	; 0x24
 8009ad6:	4607      	mov	r7, r0
 8009ad8:	460e      	mov	r6, r1
 8009ada:	4614      	mov	r4, r2
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8009adc:	2100      	movs	r1, #0
 8009ade:	221c      	movs	r2, #28
 8009ae0:	a801      	add	r0, sp, #4
{
 8009ae2:	461d      	mov	r5, r3
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8009ae4:	f000 ff3a 	bl	800a95c <memset>
 8009ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aea:	9701      	str	r7, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 8009aec:	4621      	mov	r1, r4
 8009aee:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8009af0:	9602      	str	r6, [sp, #8]
 8009af2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009af6:	9505      	str	r5, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8009af8:	f7f8 f887 	bl	8001c0a <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8009afc:	b009      	add	sp, #36	; 0x24
 8009afe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8009b00:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8009b02:	4b04      	ldr	r3, [pc, #16]	; (8009b14 <sys_arch_protect+0x14>)
 8009b04:	f04f 31ff 	mov.w	r1, #4294967295
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f7f8 f8b5 	bl	8001c78 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 8009b0e:	2001      	movs	r0, #1
 8009b10:	bd08      	pop	{r3, pc}
 8009b12:	bf00      	nop
 8009b14:	2000d944 	.word	0x2000d944

08009b18 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8009b18:	4b01      	ldr	r3, [pc, #4]	; (8009b20 <sys_arch_unprotect+0x8>)
 8009b1a:	6818      	ldr	r0, [r3, #0]
 8009b1c:	f7f8 b942 	b.w	8001da4 <osMutexRelease>
 8009b20:	2000d944 	.word	0x2000d944

08009b24 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009b24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009b28:	4a25      	ldr	r2, [pc, #148]	; (8009bc0 <low_level_output+0x9c>)
 8009b2a:	9200      	str	r2, [sp, #0]
 8009b2c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 8009b2e:	f04f 0800 	mov.w	r8, #0
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009b32:	68ab      	ldr	r3, [r5, #8]
{
 8009b34:	460c      	mov	r4, r1
  uint32_t framelength = 0;
 8009b36:	4647      	mov	r7, r8
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b38:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  for(q = p; q != NULL; q = q->next)
 8009b3c:	b92c      	cbnz	r4, 8009b4a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009b3e:	4639      	mov	r1, r7
 8009b40:	481f      	ldr	r0, [pc, #124]	; (8009bc0 <low_level_output+0x9c>)
 8009b42:	f7f6 fee5 	bl	8000910 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8009b46:	4620      	mov	r0, r4
 8009b48:	e004      	b.n	8009b54 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009b4a:	682a      	ldr	r2, [r5, #0]
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	da11      	bge.n	8009b74 <low_level_output+0x50>
        errval = ERR_USE;
 8009b50:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009b54:	9b00      	ldr	r3, [sp, #0]
 8009b56:	f241 0214 	movw	r2, #4116	; 0x1014
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	5899      	ldr	r1, [r3, r2]
 8009b5e:	0689      	lsls	r1, r1, #26
 8009b60:	d505      	bpl.n	8009b6e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009b62:	2120      	movs	r1, #32
 8009b64:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009b66:	f241 0204 	movw	r2, #4100	; 0x1004
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8009b6e:	b003      	add	sp, #12
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8009b74:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b78:	4646      	mov	r6, r8
      payloadoffset = 0;
 8009b7a:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b7e:	eb06 0809 	add.w	r8, r6, r9
 8009b82:	45d8      	cmp	r8, fp
 8009b84:	eb03 0006 	add.w	r0, r3, r6
 8009b88:	6861      	ldr	r1, [r4, #4]
 8009b8a:	d808      	bhi.n	8009b9e <low_level_output+0x7a>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009b8c:	464a      	mov	r2, r9
 8009b8e:	4451      	add	r1, sl
 8009b90:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8009b92:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009b94:	f000 fed7 	bl	800a946 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8009b98:	6824      	ldr	r4, [r4, #0]
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	e7ce      	b.n	8009b3c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009b9e:	ebab 0606 	sub.w	r6, fp, r6
 8009ba2:	4632      	mov	r2, r6
 8009ba4:	4451      	add	r1, sl
 8009ba6:	f000 fece 	bl	800a946 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009baa:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009bac:	682b      	ldr	r3, [r5, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	dbce      	blt.n	8009b50 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009bb2:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009bb4:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009bb6:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009bb8:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8009bbc:	2600      	movs	r6, #0
 8009bbe:	e7de      	b.n	8009b7e <low_level_output+0x5a>
 8009bc0:	2000f218 	.word	0x2000f218

08009bc4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009bca:	4c3b      	ldr	r4, [pc, #236]	; (8009cb8 <ethernetif_input+0xf4>)
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	f04f 31ff 	mov.w	r1, #4294967295
 8009bd2:	f7f8 f89d 	bl	8001d10 <osSemaphoreWait>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d1f8      	bne.n	8009bcc <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009bda:	4d38      	ldr	r5, [pc, #224]	; (8009cbc <ethernetif_input+0xf8>)
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8009bdc:	4838      	ldr	r0, [pc, #224]	; (8009cc0 <ethernetif_input+0xfc>)
 8009bde:	f7ff ff70 	bl	8009ac2 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009be2:	4628      	mov	r0, r5
 8009be4:	f7f6 ff08 	bl	80009f8 <HAL_ETH_GetReceivedFrame_IT>
 8009be8:	4606      	mov	r6, r0
 8009bea:	b130      	cbz	r0, 8009bfa <ethernetif_input+0x36>
    return NULL;
 8009bec:	2400      	movs	r4, #0
          if (netif->input( p, netif) != ERR_OK )
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8009bee:	4834      	ldr	r0, [pc, #208]	; (8009cc0 <ethernetif_input+0xfc>)
 8009bf0:	f7ff ff6c 	bl	8009acc <sys_mutex_unlock>
      } while(p!=NULL);
 8009bf4:	2c00      	cmp	r4, #0
 8009bf6:	d1f0      	bne.n	8009bda <ethernetif_input+0x16>
 8009bf8:	e7e7      	b.n	8009bca <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 8009bfa:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009bfc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8009bfe:	9301      	str	r3, [sp, #4]
  if (len > 0)
 8009c00:	bb01      	cbnz	r1, 8009c44 <ethernetif_input+0x80>
  struct pbuf *p = NULL;
 8009c02:	2400      	movs	r4, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009c04:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009c06:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8009c08:	2200      	movs	r2, #0
 8009c0a:	4282      	cmp	r2, r0
 8009c0c:	d14d      	bne.n	8009caa <ethernetif_input+0xe6>
    heth.RxFrameInfos.SegCount =0;  
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009c12:	f241 0214 	movw	r2, #4116	; 0x1014
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	5899      	ldr	r1, [r3, r2]
 8009c1a:	0609      	lsls	r1, r1, #24
 8009c1c:	d505      	bpl.n	8009c2a <ethernetif_input+0x66>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009c1e:	2180      	movs	r1, #128	; 0x80
 8009c20:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 8009c22:	f241 0208 	movw	r2, #4104	; 0x1008
 8009c26:	2100      	movs	r1, #0
 8009c28:	5099      	str	r1, [r3, r2]
        if   (p != NULL)
 8009c2a:	2c00      	cmp	r4, #0
 8009c2c:	d0de      	beq.n	8009bec <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 8009c2e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009c32:	4651      	mov	r1, sl
 8009c34:	4620      	mov	r0, r4
 8009c36:	4798      	blx	r3
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d0d8      	beq.n	8009bee <ethernetif_input+0x2a>
            pbuf_free(p);
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7fc fad9 	bl	80061f4 <pbuf_free>
 8009c42:	e7d4      	b.n	8009bee <ethernetif_input+0x2a>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009c44:	2203      	movs	r2, #3
 8009c46:	2004      	movs	r0, #4
 8009c48:	f7fc fb3e 	bl	80062c8 <pbuf_alloc>
  if (p != NULL)
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d0d7      	beq.n	8009c02 <ethernetif_input+0x3e>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009c52:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8009c56:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 8009c58:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8009c5c:	4637      	mov	r7, r6
      payloadoffset = 0;
 8009c5e:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009c62:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8009c66:	18be      	adds	r6, r7, r2
 8009c68:	429e      	cmp	r6, r3
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009c70:	eb03 0107 	add.w	r1, r3, r7
 8009c74:	d808      	bhi.n	8009c88 <ethernetif_input+0xc4>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009c76:	4448      	add	r0, r9
 8009c78:	f000 fe65 	bl	800a946 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8009c7c:	f8d8 8000 	ldr.w	r8, [r8]
 8009c80:	f1b8 0f00 	cmp.w	r8, #0
 8009c84:	d1e8      	bne.n	8009c58 <ethernetif_input+0x94>
 8009c86:	e7bd      	b.n	8009c04 <ethernetif_input+0x40>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009c88:	f5c7 67be 	rsb	r7, r7, #1520	; 0x5f0
 8009c8c:	3704      	adds	r7, #4
 8009c8e:	463a      	mov	r2, r7
 8009c90:	4448      	add	r0, r9
 8009c92:	f000 fe58 	bl	800a946 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009c96:	f8db b00c 	ldr.w	fp, [fp, #12]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009c9a:	f8db 3008 	ldr.w	r3, [fp, #8]
 8009c9e:	9301      	str	r3, [sp, #4]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009ca0:	44b9      	add	r9, r7
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009ca2:	f2a6 52f4 	subw	r2, r6, #1524	; 0x5f4
        bufferoffset = 0;
 8009ca6:	2700      	movs	r7, #0
 8009ca8:	e7db      	b.n	8009c62 <ethernetif_input+0x9e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009cb0:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009cb2:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009cb4:	3201      	adds	r2, #1
 8009cb6:	e7a8      	b.n	8009c0a <ethernetif_input+0x46>
 8009cb8:	20005378 	.word	0x20005378
 8009cbc:	2000f218 	.word	0x2000f218
 8009cc0:	200055e8 	.word	0x200055e8

08009cc4 <HAL_ETH_MspInit>:
{
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cca:	2214      	movs	r2, #20
 8009ccc:	2100      	movs	r1, #0
 8009cce:	a807      	add	r0, sp, #28
 8009cd0:	f000 fe44 	bl	800a95c <memset>
  if(ethHandle->Instance==ETH)
 8009cd4:	6822      	ldr	r2, [r4, #0]
 8009cd6:	4b36      	ldr	r3, [pc, #216]	; (8009db0 <HAL_ETH_MspInit+0xec>)
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d167      	bne.n	8009dac <HAL_ETH_MspInit+0xe8>
    __HAL_RCC_ETH_CLK_ENABLE();
 8009cdc:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8009ce0:	2400      	movs	r4, #0
 8009ce2:	9401      	str	r4, [sp, #4]
 8009ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009ce6:	4833      	ldr	r0, [pc, #204]	; (8009db4 <HAL_ETH_MspInit+0xf0>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8009ce8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009cec:	631a      	str	r2, [r3, #48]	; 0x30
 8009cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cf0:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8009cf4:	9201      	str	r2, [sp, #4]
 8009cf6:	9a01      	ldr	r2, [sp, #4]
 8009cf8:	9402      	str	r4, [sp, #8]
 8009cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cfc:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009d00:	631a      	str	r2, [r3, #48]	; 0x30
 8009d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d04:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009d08:	9202      	str	r2, [sp, #8]
 8009d0a:	9a02      	ldr	r2, [sp, #8]
 8009d0c:	9403      	str	r4, [sp, #12]
 8009d0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d10:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009d14:	631a      	str	r2, [r3, #48]	; 0x30
 8009d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009d1c:	9203      	str	r2, [sp, #12]
 8009d1e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009d20:	9404      	str	r4, [sp, #16]
 8009d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d24:	f042 0204 	orr.w	r2, r2, #4
 8009d28:	631a      	str	r2, [r3, #48]	; 0x30
 8009d2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d2c:	f002 0204 	and.w	r2, r2, #4
 8009d30:	9204      	str	r2, [sp, #16]
 8009d32:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d34:	9405      	str	r4, [sp, #20]
 8009d36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d38:	f042 0201 	orr.w	r2, r2, #1
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8009d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d40:	f002 0201 	and.w	r2, r2, #1
 8009d44:	9205      	str	r2, [sp, #20]
 8009d46:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d48:	9406      	str	r4, [sp, #24]
 8009d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d4c:	f042 0202 	orr.w	r2, r2, #2
 8009d50:	631a      	str	r2, [r3, #48]	; 0x30
 8009d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d54:	f003 0302 	and.w	r3, r3, #2
 8009d58:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d5a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d5c:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d5e:	250b      	movs	r5, #11
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d60:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d62:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009d64:	2332      	movs	r3, #50	; 0x32
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d66:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009d68:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d6a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d6c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d6e:	f7f7 f86b 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009d72:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d74:	a907      	add	r1, sp, #28
 8009d76:	4810      	ldr	r0, [pc, #64]	; (8009db8 <HAL_ETH_MspInit+0xf4>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009d78:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d7a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d7c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d7e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d80:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d82:	f7f7 f861 	bl	8000e48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009d86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d8a:	a907      	add	r1, sp, #28
 8009d8c:	480b      	ldr	r0, [pc, #44]	; (8009dbc <HAL_ETH_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009d8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d90:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d92:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d94:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d96:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d98:	f7f7 f856 	bl	8000e48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009d9c:	203d      	movs	r0, #61	; 0x3d
 8009d9e:	4622      	mov	r2, r4
 8009da0:	2105      	movs	r1, #5
 8009da2:	f7f6 fc57 	bl	8000654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009da6:	203d      	movs	r0, #61	; 0x3d
 8009da8:	f7f6 fc88 	bl	80006bc <HAL_NVIC_EnableIRQ>
}
 8009dac:	b00d      	add	sp, #52	; 0x34
 8009dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db0:	40028000 	.word	0x40028000
 8009db4:	40020800 	.word	0x40020800
 8009db8:	40020000 	.word	0x40020000
 8009dbc:	40020400 	.word	0x40020400

08009dc0 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8009dc0:	4b01      	ldr	r3, [pc, #4]	; (8009dc8 <HAL_ETH_RxCpltCallback+0x8>)
 8009dc2:	6818      	ldr	r0, [r3, #0]
 8009dc4:	f7f7 bfca 	b.w	8001d5c <osSemaphoreRelease>
 8009dc8:	20005378 	.word	0x20005378

08009dcc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009dce:	4604      	mov	r4, r0
{
 8009dd0:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009dd2:	b930      	cbnz	r0, 8009de2 <ethernetif_init+0x16>
 8009dd4:	4b49      	ldr	r3, [pc, #292]	; (8009efc <ethernetif_init+0x130>)
 8009dd6:	494a      	ldr	r1, [pc, #296]	; (8009f00 <ethernetif_init+0x134>)
 8009dd8:	484a      	ldr	r0, [pc, #296]	; (8009f04 <ethernetif_init+0x138>)
 8009dda:	f240 222b 	movw	r2, #555	; 0x22b
 8009dde:	f000 fdc5 	bl	800a96c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009de2:	2373      	movs	r3, #115	; 0x73
  MACAddr[0] = 0x04;
 8009de4:	2104      	movs	r1, #4
  netif->name[0] = IFNAME0;
 8009de6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  MACAddr[0] = 0x04;
 8009dea:	f88d 1004 	strb.w	r1, [sp, #4]
  netif->name[1] = IFNAME1;
 8009dee:	2374      	movs	r3, #116	; 0x74
  MACAddr[1] = 0x80;
 8009df0:	2180      	movs	r1, #128	; 0x80
  netif->name[1] = IFNAME1;
 8009df2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  MACAddr[1] = 0x80;
 8009df6:	f88d 1005 	strb.w	r1, [sp, #5]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009dfa:	4b43      	ldr	r3, [pc, #268]	; (8009f08 <ethernetif_init+0x13c>)
  heth.Instance = ETH;
 8009dfc:	4d43      	ldr	r5, [pc, #268]	; (8009f0c <ethernetif_init+0x140>)
  netif->output = etharp_output;
 8009dfe:	6163      	str	r3, [r4, #20]
  MACAddr[2] = 0xE1;
 8009e00:	21e1      	movs	r1, #225	; 0xe1
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009e02:	4b43      	ldr	r3, [pc, #268]	; (8009f10 <ethernetif_init+0x144>)
  MACAddr[2] = 0xE1;
 8009e04:	f88d 1006 	strb.w	r1, [sp, #6]
  MACAddr[3] = 0x06;
 8009e08:	2106      	movs	r1, #6
  netif->linkoutput = low_level_output;
 8009e0a:	61a3      	str	r3, [r4, #24]
  MACAddr[3] = 0x06;
 8009e0c:	f88d 1007 	strb.w	r1, [sp, #7]
  heth.Instance = ETH;
 8009e10:	4b40      	ldr	r3, [pc, #256]	; (8009f14 <ethernetif_init+0x148>)
 8009e12:	602b      	str	r3, [r5, #0]
  MACAddr[4] = 0xFD;
 8009e14:	21fd      	movs	r1, #253	; 0xfd
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009e16:	2301      	movs	r3, #1
  MACAddr[4] = 0xFD;
 8009e18:	f88d 1008 	strb.w	r1, [sp, #8]
  MACAddr[5] = 0xEF;
 8009e1c:	21ef      	movs	r1, #239	; 0xef
  uint32_t regvalue = 0;
 8009e1e:	2200      	movs	r2, #0
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8009e20:	606b      	str	r3, [r5, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009e22:	822b      	strh	r3, [r5, #16]
  MACAddr[5] = 0xEF;
 8009e24:	f88d 1009 	strb.w	r1, [sp, #9]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009e28:	61ab      	str	r3, [r5, #24]
  heth.Init.MACAddr = &MACAddr[0];
 8009e2a:	a901      	add	r1, sp, #4
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009e2c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009e30:	4628      	mov	r0, r5
  uint32_t regvalue = 0;
 8009e32:	9200      	str	r2, [sp, #0]
  heth.Init.MACAddr = &MACAddr[0];
 8009e34:	6169      	str	r1, [r5, #20]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009e36:	61ea      	str	r2, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009e38:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009e3a:	f7f6 fecd 	bl	8000bd8 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8009e3e:	b928      	cbnz	r0, 8009e4c <ethernetif_init+0x80>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009e40:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009e44:	f043 0304 	orr.w	r3, r3, #4
 8009e48:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	4a32      	ldr	r2, [pc, #200]	; (8009f18 <ethernetif_init+0x14c>)
 8009e50:	4932      	ldr	r1, [pc, #200]	; (8009f1c <ethernetif_init+0x150>)
 8009e52:	482e      	ldr	r0, [pc, #184]	; (8009f0c <ethernetif_init+0x140>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009e54:	4e32      	ldr	r6, [pc, #200]	; (8009f20 <ethernetif_init+0x154>)
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009e56:	f7f6 fce1 	bl	800081c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009e5a:	2304      	movs	r3, #4
 8009e5c:	4a31      	ldr	r2, [pc, #196]	; (8009f24 <ethernetif_init+0x158>)
 8009e5e:	4932      	ldr	r1, [pc, #200]	; (8009f28 <ethernetif_init+0x15c>)
 8009e60:	482a      	ldr	r0, [pc, #168]	; (8009f0c <ethernetif_init+0x140>)
 8009e62:	f7f6 fd18 	bl	8000896 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009e66:	2306      	movs	r3, #6
 8009e68:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009e6c:	696b      	ldr	r3, [r5, #20]
 8009e6e:	781a      	ldrb	r2, [r3, #0]
 8009e70:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009e74:	785a      	ldrb	r2, [r3, #1]
 8009e76:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009e7a:	789a      	ldrb	r2, [r3, #2]
 8009e7c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009e80:	78da      	ldrb	r2, [r3, #3]
 8009e82:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009e86:	791a      	ldrb	r2, [r3, #4]
 8009e88:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009e8c:	795b      	ldrb	r3, [r3, #5]
 8009e8e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  netif->mtu = 1500;
 8009e92:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8009e96:	8463      	strh	r3, [r4, #34]	; 0x22
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009e98:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8009e9c:	f043 030a 	orr.w	r3, r3, #10
  osSemaphoreDef(SEM);
 8009ea0:	2700      	movs	r7, #0
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009ea2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	a803      	add	r0, sp, #12
  osSemaphoreDef(SEM);
 8009eaa:	9703      	str	r7, [sp, #12]
 8009eac:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009eae:	f7f7 ff09 	bl	8001cc4 <osSemaphoreCreate>
 8009eb2:	4b1e      	ldr	r3, [pc, #120]	; (8009f2c <ethernetif_init+0x160>)
 8009eb4:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009eb6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009eb8:	ad05      	add	r5, sp, #20
 8009eba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ebc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8009ec0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009ec4:	4621      	mov	r1, r4
 8009ec6:	a805      	add	r0, sp, #20
 8009ec8:	f7f7 fe9f 	bl	8001c0a <osThreadCreate>
  HAL_ETH_Start(&heth);
 8009ecc:	480f      	ldr	r0, [pc, #60]	; (8009f0c <ethernetif_init+0x140>)
 8009ece:	f7f6 ff7f 	bl	8000dd0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009ed2:	466a      	mov	r2, sp
 8009ed4:	211d      	movs	r1, #29
 8009ed6:	480d      	ldr	r0, [pc, #52]	; (8009f0c <ethernetif_init+0x140>)
 8009ed8:	f7f6 fe0d 	bl	8000af6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009edc:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009ede:	480b      	ldr	r0, [pc, #44]	; (8009f0c <ethernetif_init+0x140>)
  regvalue |= (PHY_ISFR_INT4);
 8009ee0:	f042 020b 	orr.w	r2, r2, #11
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009ee4:	211d      	movs	r1, #29
  regvalue |= (PHY_ISFR_INT4);
 8009ee6:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009ee8:	f7f6 fe3f 	bl	8000b6a <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009eec:	466a      	mov	r2, sp
 8009eee:	211d      	movs	r1, #29
 8009ef0:	4806      	ldr	r0, [pc, #24]	; (8009f0c <ethernetif_init+0x140>)
 8009ef2:	f7f6 fe00 	bl	8000af6 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	b00d      	add	sp, #52	; 0x34
 8009efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efc:	0800d810 	.word	0x0800d810
 8009f00:	0800c228 	.word	0x0800c228
 8009f04:	0800bc05 	.word	0x0800bc05
 8009f08:	08004cd1 	.word	0x08004cd1
 8009f0c:	2000f218 	.word	0x2000f218
 8009f10:	08009b25 	.word	0x08009b25
 8009f14:	40028000 	.word	0x40028000
 8009f18:	2000f260 	.word	0x2000f260
 8009f1c:	2000d948 	.word	0x2000d948
 8009f20:	0800bb00 	.word	0x0800bb00
 8009f24:	2000d9c8 	.word	0x2000d9c8
 8009f28:	2000f198 	.word	0x2000f198
 8009f2c:	20005378 	.word	0x20005378

08009f30 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 8009f30:	f7f6 bb64 	b.w	80005fc <HAL_GetTick>

08009f34 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009f34:	4b03      	ldr	r3, [pc, #12]	; (8009f44 <vApplicationGetIdleTaskMemory+0x10>)
 8009f36:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8009f38:	4b03      	ldr	r3, [pc, #12]	; (8009f48 <vApplicationGetIdleTaskMemory+0x14>)
 8009f3a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009f3c:	2380      	movs	r3, #128	; 0x80
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	2000557c 	.word	0x2000557c
 8009f48:	2000537c 	.word	0x2000537c

08009f4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 8009f4e:	4f2e      	ldr	r7, [pc, #184]	; (800a008 <MX_LWIP_Init+0xbc>)
  IP_ADDRESS[3] = 190;
  NETMASK_ADDRESS[0] = 255;
  NETMASK_ADDRESS[1] = 255;
  NETMASK_ADDRESS[2] = 0;
  NETMASK_ADDRESS[3] = 0;
  GATEWAY_ADDRESS[0] = 169;
 8009f50:	4d2e      	ldr	r5, [pc, #184]	; (800a00c <MX_LWIP_Init+0xc0>)
  NETMASK_ADDRESS[0] = 255;
 8009f52:	4e2f      	ldr	r6, [pc, #188]	; (800a010 <MX_LWIP_Init+0xc4>)
  IP_ADDRESS[3] = 190;
 8009f54:	20be      	movs	r0, #190	; 0xbe
  NETMASK_ADDRESS[2] = 0;
 8009f56:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 169;
 8009f58:	21a9      	movs	r1, #169	; 0xa9
  IP_ADDRESS[2] = 193;
 8009f5a:	23c1      	movs	r3, #193	; 0xc1
  IP_ADDRESS[3] = 190;
 8009f5c:	70f8      	strb	r0, [r7, #3]
  NETMASK_ADDRESS[0] = 255;
 8009f5e:	20ff      	movs	r0, #255	; 0xff
{
 8009f60:	b085      	sub	sp, #20
  IP_ADDRESS[1] = 254;
 8009f62:	22fe      	movs	r2, #254	; 0xfe
  GATEWAY_ADDRESS[0] = 169;
 8009f64:	7029      	strb	r1, [r5, #0]
  GATEWAY_ADDRESS[1] = 254;
  GATEWAY_ADDRESS[2] = 193;
 8009f66:	70ab      	strb	r3, [r5, #2]
  IP_ADDRESS[0] = 169;
 8009f68:	7039      	strb	r1, [r7, #0]
  IP_ADDRESS[2] = 193;
 8009f6a:	70bb      	strb	r3, [r7, #2]
  NETMASK_ADDRESS[0] = 255;
 8009f6c:	7030      	strb	r0, [r6, #0]
  GATEWAY_ADDRESS[3] = 90;
 8009f6e:	235a      	movs	r3, #90	; 0x5a
  NETMASK_ADDRESS[1] = 255;
 8009f70:	7070      	strb	r0, [r6, #1]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009f72:	4621      	mov	r1, r4
 8009f74:	4620      	mov	r0, r4
  GATEWAY_ADDRESS[1] = 254;
 8009f76:	706a      	strb	r2, [r5, #1]
  GATEWAY_ADDRESS[3] = 90;
 8009f78:	70eb      	strb	r3, [r5, #3]
  IP_ADDRESS[1] = 254;
 8009f7a:	707a      	strb	r2, [r7, #1]
  NETMASK_ADDRESS[2] = 0;
 8009f7c:	70b4      	strb	r4, [r6, #2]
  NETMASK_ADDRESS[3] = 0;
 8009f7e:	70f4      	strb	r4, [r6, #3]
  tcpip_init( NULL, NULL );
 8009f80:	f7f9 fca6 	bl	80038d0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009f84:	787b      	ldrb	r3, [r7, #1]
 8009f86:	783a      	ldrb	r2, [r7, #0]
 8009f88:	4922      	ldr	r1, [pc, #136]	; (800a014 <MX_LWIP_Init+0xc8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009f8a:	7868      	ldrb	r0, [r5, #1]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009f8c:	041b      	lsls	r3, r3, #16
 8009f8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009f92:	78fa      	ldrb	r2, [r7, #3]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	78ba      	ldrb	r2, [r7, #2]
 8009f98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009f9c:	ba1b      	rev	r3, r3
 8009f9e:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009fa0:	7873      	ldrb	r3, [r6, #1]
 8009fa2:	7832      	ldrb	r2, [r6, #0]
 8009fa4:	041b      	lsls	r3, r3, #16
 8009fa6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009faa:	78f2      	ldrb	r2, [r6, #3]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	78b2      	ldrb	r2, [r6, #2]
 8009fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009fb4:	4a18      	ldr	r2, [pc, #96]	; (800a018 <MX_LWIP_Init+0xcc>)
 8009fb6:	ba1b      	rev	r3, r3
 8009fb8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009fba:	782b      	ldrb	r3, [r5, #0]
 8009fbc:	0400      	lsls	r0, r0, #16
 8009fbe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009fc2:	78eb      	ldrb	r3, [r5, #3]
 8009fc4:	4318      	orrs	r0, r3
 8009fc6:	78ab      	ldrb	r3, [r5, #2]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009fc8:	4d14      	ldr	r5, [pc, #80]	; (800a01c <MX_LWIP_Init+0xd0>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009fca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8009fce:	4b14      	ldr	r3, [pc, #80]	; (800a020 <MX_LWIP_Init+0xd4>)
 8009fd0:	ba00      	rev	r0, r0
 8009fd2:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009fd4:	4813      	ldr	r0, [pc, #76]	; (800a024 <MX_LWIP_Init+0xd8>)
 8009fd6:	9002      	str	r0, [sp, #8]
 8009fd8:	4813      	ldr	r0, [pc, #76]	; (800a028 <MX_LWIP_Init+0xdc>)
 8009fda:	9001      	str	r0, [sp, #4]
 8009fdc:	9400      	str	r4, [sp, #0]
 8009fde:	4628      	mov	r0, r5
 8009fe0:	f7fc f810 	bl	8006004 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f7fc f84b 	bl	8006080 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009fea:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8009fee:	075b      	lsls	r3, r3, #29
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009ff0:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8009ff2:	d504      	bpl.n	8009ffe <MX_LWIP_Init+0xb2>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009ff4:	b005      	add	sp, #20
 8009ff6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_up(&gnetif);
 8009ffa:	f7fc b847 	b.w	800608c <netif_set_up>
}
 8009ffe:	b005      	add	sp, #20
 800a000:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    netif_set_down(&gnetif);
 800a004:	f7fc b851 	b.w	80060aa <netif_set_down>
 800a008:	20010a6c 	.word	0x20010a6c
 800a00c:	20010a30 	.word	0x20010a30
 800a010:	20010a68 	.word	0x20010a68
 800a014:	20010a64 	.word	0x20010a64
 800a018:	20010a70 	.word	0x20010a70
 800a01c:	20010a34 	.word	0x20010a34
 800a020:	20010a74 	.word	0x20010a74
 800a024:	080038b5 	.word	0x080038b5
 800a028:	08009dcd 	.word	0x08009dcd

0800a02c <mqtt_sub_request_cb>:




static void mqtt_sub_request_cb(void *arg, err_t result)
{
 800a02c:	b510      	push	{r4, lr}
  /* Just print the result code here for simplicity,
     normal behaviour would be to take some action if subscribe fails like
     notifying user, retry subscribe or disconnect from server */
  sprintf(buffer,"Subscribe result: %d\n\r", result);
 800a02e:	4c09      	ldr	r4, [pc, #36]	; (800a054 <mqtt_sub_request_cb+0x28>)
 800a030:	460a      	mov	r2, r1
 800a032:	4620      	mov	r0, r4
 800a034:	4908      	ldr	r1, [pc, #32]	; (800a058 <mqtt_sub_request_cb+0x2c>)
 800a036:	f000 fcb1 	bl	800a99c <siprintf>
  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a03a:	4620      	mov	r0, r4
 800a03c:	f7f6 f8d2 	bl	80001e4 <strlen>
 800a040:	4621      	mov	r1, r4
 800a042:	b282      	uxth	r2, r0
 800a044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a048:	4804      	ldr	r0, [pc, #16]	; (800a05c <mqtt_sub_request_cb+0x30>)

}
 800a04a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a04e:	f7f7 bd71 	b.w	8001b34 <HAL_UART_Transmit>
 800a052:	bf00      	nop
 800a054:	20010a78 	.word	0x20010a78
 800a058:	0800d9af 	.word	0x0800d9af
 800a05c:	20010e64 	.word	0x20010e64

0800a060 <mqtt_pub_request_cb>:
  }
}

/* Called when publish is complete either with sucess or failure */
static void mqtt_pub_request_cb(void *arg, err_t result)
{
 800a060:	b510      	push	{r4, lr}
  if(result != ERR_OK) {
 800a062:	460a      	mov	r2, r1
 800a064:	b179      	cbz	r1, 800a086 <mqtt_pub_request_cb+0x26>
    sprintf(buffer,"Publish result: %d\n", result);
 800a066:	4908      	ldr	r1, [pc, #32]	; (800a088 <mqtt_pub_request_cb+0x28>)
 800a068:	4808      	ldr	r0, [pc, #32]	; (800a08c <mqtt_pub_request_cb+0x2c>)
 800a06a:	f000 fc97 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a06e:	4807      	ldr	r0, [pc, #28]	; (800a08c <mqtt_pub_request_cb+0x2c>)
 800a070:	f7f6 f8b8 	bl	80001e4 <strlen>
 800a074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a078:	b282      	uxth	r2, r0
 800a07a:	4904      	ldr	r1, [pc, #16]	; (800a08c <mqtt_pub_request_cb+0x2c>)
 800a07c:	4804      	ldr	r0, [pc, #16]	; (800a090 <mqtt_pub_request_cb+0x30>)
  }
}
 800a07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a082:	f7f7 bd57 	b.w	8001b34 <HAL_UART_Transmit>
 800a086:	bd10      	pop	{r4, pc}
 800a088:	0800d99b 	.word	0x0800d99b
 800a08c:	20010a78 	.word	0x20010a78
 800a090:	20010e64 	.word	0x20010e64

0800a094 <mqtt_incoming_data_cb>:
{
 800a094:	b570      	push	{r4, r5, r6, lr}
	  sprintf(buffer,"Incoming publish payload with length %d, flags %u\n\r", len, (unsigned int)flags);
 800a096:	4818      	ldr	r0, [pc, #96]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
{
 800a098:	460d      	mov	r5, r1
	  sprintf(buffer,"Incoming publish payload with length %d, flags %u\n\r", len, (unsigned int)flags);
 800a09a:	4918      	ldr	r1, [pc, #96]	; (800a0fc <mqtt_incoming_data_cb+0x68>)
{
 800a09c:	461e      	mov	r6, r3
 800a09e:	4614      	mov	r4, r2
	  sprintf(buffer,"Incoming publish payload with length %d, flags %u\n\r", len, (unsigned int)flags);
 800a0a0:	f000 fc7c 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a0a4:	4814      	ldr	r0, [pc, #80]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
 800a0a6:	f7f6 f89d 	bl	80001e4 <strlen>
 800a0aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0ae:	b282      	uxth	r2, r0
 800a0b0:	4911      	ldr	r1, [pc, #68]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
 800a0b2:	4813      	ldr	r0, [pc, #76]	; (800a100 <mqtt_incoming_data_cb+0x6c>)
 800a0b4:	f7f7 fd3e 	bl	8001b34 <HAL_UART_Transmit>
  if(flags & MQTT_DATA_FLAG_LAST) {
 800a0b8:	07f3      	lsls	r3, r6, #31
 800a0ba:	d51c      	bpl.n	800a0f6 <mqtt_incoming_data_cb+0x62>
    if(inpub_id == 0) {
 800a0bc:	4b11      	ldr	r3, [pc, #68]	; (800a104 <mqtt_incoming_data_cb+0x70>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	b9cb      	cbnz	r3, 800a0f6 <mqtt_incoming_data_cb+0x62>
      if(data[len-1] == 0) {
 800a0c2:	442c      	add	r4, r5
 800a0c4:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800a0c8:	b983      	cbnz	r3, 800a0ec <mqtt_incoming_data_cb+0x58>
    	  sprintf(buffer,"mqtt_incoming_data_cb: %s\n\r", (const char *)data);
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	490e      	ldr	r1, [pc, #56]	; (800a108 <mqtt_incoming_data_cb+0x74>)
 800a0ce:	480a      	ldr	r0, [pc, #40]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
 800a0d0:	f000 fc64 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);}
 800a0d4:	4808      	ldr	r0, [pc, #32]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
 800a0d6:	f7f6 f885 	bl	80001e4 <strlen>
 800a0da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a0de:	b282      	uxth	r2, r0
 800a0e0:	4905      	ldr	r1, [pc, #20]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
 800a0e2:	4807      	ldr	r0, [pc, #28]	; (800a100 <mqtt_incoming_data_cb+0x6c>)
}
 800a0e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);}
 800a0e8:	f7f7 bd24 	b.w	8001b34 <HAL_UART_Transmit>
      sprintf(buffer,"mqtt_incoming_data_cb: Ignoring payload...\n\r");
 800a0ec:	4907      	ldr	r1, [pc, #28]	; (800a10c <mqtt_incoming_data_cb+0x78>)
 800a0ee:	4802      	ldr	r0, [pc, #8]	; (800a0f8 <mqtt_incoming_data_cb+0x64>)
 800a0f0:	f000 fc78 	bl	800a9e4 <strcpy>
 800a0f4:	e7ee      	b.n	800a0d4 <mqtt_incoming_data_cb+0x40>
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	20010a78 	.word	0x20010a78
 800a0fc:	0800d8dc 	.word	0x0800d8dc
 800a100:	20010e64 	.word	0x20010e64
 800a104:	200055d0 	.word	0x200055d0
 800a108:	0800d910 	.word	0x0800d910
 800a10c:	0800d92c 	.word	0x0800d92c

0800a110 <mqtt_incoming_publish_cb>:
{
 800a110:	b510      	push	{r4, lr}
  sprintf(buffer,"Incoming publish at topic %s with total length %u\n\r", topic, (unsigned int)tot_len);
 800a112:	4613      	mov	r3, r2
{
 800a114:	460c      	mov	r4, r1
  sprintf(buffer,"Incoming publish at topic %s with total length %u\n\r", topic, (unsigned int)tot_len);
 800a116:	460a      	mov	r2, r1
 800a118:	480e      	ldr	r0, [pc, #56]	; (800a154 <mqtt_incoming_publish_cb+0x44>)
 800a11a:	490f      	ldr	r1, [pc, #60]	; (800a158 <mqtt_incoming_publish_cb+0x48>)
 800a11c:	f000 fc3e 	bl	800a99c <siprintf>
HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a120:	480c      	ldr	r0, [pc, #48]	; (800a154 <mqtt_incoming_publish_cb+0x44>)
 800a122:	f7f6 f85f 	bl	80001e4 <strlen>
 800a126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a12a:	b282      	uxth	r2, r0
 800a12c:	4909      	ldr	r1, [pc, #36]	; (800a154 <mqtt_incoming_publish_cb+0x44>)
 800a12e:	480b      	ldr	r0, [pc, #44]	; (800a15c <mqtt_incoming_publish_cb+0x4c>)
 800a130:	f7f7 fd00 	bl	8001b34 <HAL_UART_Transmit>
  if(strcmp(topic, "print_payload") == 0) {
 800a134:	490a      	ldr	r1, [pc, #40]	; (800a160 <mqtt_incoming_publish_cb+0x50>)
 800a136:	4620      	mov	r0, r4
 800a138:	f7f6 f84a 	bl	80001d0 <strcmp>
 800a13c:	4b09      	ldr	r3, [pc, #36]	; (800a164 <mqtt_incoming_publish_cb+0x54>)
 800a13e:	b908      	cbnz	r0, 800a144 <mqtt_incoming_publish_cb+0x34>
    inpub_id = 0;
 800a140:	6018      	str	r0, [r3, #0]
 800a142:	bd10      	pop	{r4, pc}
  } else if(topic[0] == 'A') {
 800a144:	7822      	ldrb	r2, [r4, #0]
 800a146:	2a41      	cmp	r2, #65	; 0x41
    inpub_id = 1;
 800a148:	bf0c      	ite	eq
 800a14a:	2201      	moveq	r2, #1
    inpub_id = 9;
 800a14c:	2209      	movne	r2, #9
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	bd10      	pop	{r4, pc}
 800a152:	bf00      	nop
 800a154:	20010a78 	.word	0x20010a78
 800a158:	0800d959 	.word	0x0800d959
 800a15c:	20010e64 	.word	0x20010e64
 800a160:	0800d98d 	.word	0x0800d98d
 800a164:	200055d0 	.word	0x200055d0

0800a168 <example_do_connect>:
{
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	b08a      	sub	sp, #40	; 0x28
  memset(&ci, 0, sizeof(ci));
 800a16c:	ac03      	add	r4, sp, #12
{
 800a16e:	4605      	mov	r5, r0
 800a170:	460e      	mov	r6, r1
  memset(&ci, 0, sizeof(ci));
 800a172:	221c      	movs	r2, #28
 800a174:	2100      	movs	r1, #0
 800a176:	4620      	mov	r0, r4
 800a178:	f000 fbf0 	bl	800a95c <memset>
  ci.client_id = "xonga";
 800a17c:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <example_do_connect+0x54>)
 800a17e:	9303      	str	r3, [sp, #12]
  IP4_ADDR(&mqttServerIP, 169, 254, 193, 90);
 800a180:	a90a      	add	r1, sp, #40	; 0x28
 800a182:	4b0f      	ldr	r3, [pc, #60]	; (800a1c0 <example_do_connect+0x58>)
 800a184:	f841 3d20 	str.w	r3, [r1, #-32]!
  err = mqtt_client_connect(client, &mqttServerIP, MQTT_PORT, mqtt_connection_cb, topic, &ci);
 800a188:	f240 725b 	movw	r2, #1883	; 0x75b
 800a18c:	9401      	str	r4, [sp, #4]
 800a18e:	9600      	str	r6, [sp, #0]
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <example_do_connect+0x5c>)
 800a192:	4628      	mov	r0, r5
 800a194:	f7fa f964 	bl	8004460 <mqtt_client_connect>
  if(err != ERR_OK) {
 800a198:	4602      	mov	r2, r0
 800a19a:	b168      	cbz	r0, 800a1b8 <example_do_connect+0x50>
    sprintf(buffer,"mqtt_connect return %d\n\r", err);
 800a19c:	490a      	ldr	r1, [pc, #40]	; (800a1c8 <example_do_connect+0x60>)
 800a19e:	480b      	ldr	r0, [pc, #44]	; (800a1cc <example_do_connect+0x64>)
 800a1a0:	f000 fbfc 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a1a4:	4809      	ldr	r0, [pc, #36]	; (800a1cc <example_do_connect+0x64>)
 800a1a6:	f7f6 f81d 	bl	80001e4 <strlen>
 800a1aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1ae:	b282      	uxth	r2, r0
 800a1b0:	4906      	ldr	r1, [pc, #24]	; (800a1cc <example_do_connect+0x64>)
 800a1b2:	4807      	ldr	r0, [pc, #28]	; (800a1d0 <example_do_connect+0x68>)
 800a1b4:	f7f7 fcbe 	bl	8001b34 <HAL_UART_Transmit>
}
 800a1b8:	b00a      	add	sp, #40	; 0x28
 800a1ba:	bd70      	pop	{r4, r5, r6, pc}
 800a1bc:	0800d82a 	.word	0x0800d82a
 800a1c0:	5ac1fea9 	.word	0x5ac1fea9
 800a1c4:	0800a1d5 	.word	0x0800a1d5
 800a1c8:	0800d830 	.word	0x0800d830
 800a1cc:	20010a78 	.word	0x20010a78
 800a1d0:	20010e64 	.word	0x20010e64

0800a1d4 <mqtt_connection_cb>:
{
 800a1d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	460d      	mov	r5, r1
  if(status == MQTT_CONNECT_ACCEPTED) {
 800a1da:	4616      	mov	r6, r2
 800a1dc:	2a00      	cmp	r2, #0
 800a1de:	d12f      	bne.n	800a240 <mqtt_connection_cb+0x6c>
    sprintf(buffer,"mqtt_connection_cb: Successfully connected\n");
 800a1e0:	4922      	ldr	r1, [pc, #136]	; (800a26c <mqtt_connection_cb+0x98>)
 800a1e2:	4823      	ldr	r0, [pc, #140]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a1e4:	f000 fbfe 	bl	800a9e4 <strcpy>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a1e8:	4821      	ldr	r0, [pc, #132]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a1ea:	f7f5 fffb 	bl	80001e4 <strlen>
 800a1ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a1f2:	b282      	uxth	r2, r0
 800a1f4:	491e      	ldr	r1, [pc, #120]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a1f6:	481f      	ldr	r0, [pc, #124]	; (800a274 <mqtt_connection_cb+0xa0>)
 800a1f8:	f7f7 fc9c 	bl	8001b34 <HAL_UART_Transmit>
    mqtt_set_inpub_callback(client, mqtt_incoming_publish_cb, mqtt_incoming_data_cb, arg);
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	4a1e      	ldr	r2, [pc, #120]	; (800a278 <mqtt_connection_cb+0xa4>)
 800a200:	491e      	ldr	r1, [pc, #120]	; (800a27c <mqtt_connection_cb+0xa8>)
 800a202:	4620      	mov	r0, r4
 800a204:	f7fa f906 	bl	8004414 <mqtt_set_inpub_callback>
    err = mqtt_subscribe(client, topico, 0, mqtt_sub_request_cb, arg);
 800a208:	2301      	movs	r3, #1
 800a20a:	9301      	str	r3, [sp, #4]
 800a20c:	4632      	mov	r2, r6
 800a20e:	9500      	str	r5, [sp, #0]
 800a210:	4b1b      	ldr	r3, [pc, #108]	; (800a280 <mqtt_connection_cb+0xac>)
 800a212:	4629      	mov	r1, r5
 800a214:	4620      	mov	r0, r4
 800a216:	f7fa f853 	bl	80042c0 <mqtt_sub_unsub>
    if(err != ERR_OK) {
 800a21a:	4602      	mov	r2, r0
 800a21c:	b320      	cbz	r0, 800a268 <mqtt_connection_cb+0x94>
      sprintf(buffer,"mqtt_subscribe return: %d\n", err);
 800a21e:	4919      	ldr	r1, [pc, #100]	; (800a284 <mqtt_connection_cb+0xb0>)
 800a220:	4813      	ldr	r0, [pc, #76]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a222:	f000 fbbb 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a226:	4812      	ldr	r0, [pc, #72]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a228:	f7f5 ffdc 	bl	80001e4 <strlen>
 800a22c:	4910      	ldr	r1, [pc, #64]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a22e:	b282      	uxth	r2, r0
 800a230:	4810      	ldr	r0, [pc, #64]	; (800a274 <mqtt_connection_cb+0xa0>)
 800a232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a236:	b002      	add	sp, #8
 800a238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a23c:	f7f7 bc7a 	b.w	8001b34 <HAL_UART_Transmit>
    sprintf(buffer,"mqtt_connection_cb: Disconnected, reason: %d\n", status);
 800a240:	4911      	ldr	r1, [pc, #68]	; (800a288 <mqtt_connection_cb+0xb4>)
 800a242:	480b      	ldr	r0, [pc, #44]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a244:	f000 fbaa 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a248:	4809      	ldr	r0, [pc, #36]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a24a:	f7f5 ffcb 	bl	80001e4 <strlen>
 800a24e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a252:	b282      	uxth	r2, r0
 800a254:	4906      	ldr	r1, [pc, #24]	; (800a270 <mqtt_connection_cb+0x9c>)
 800a256:	4807      	ldr	r0, [pc, #28]	; (800a274 <mqtt_connection_cb+0xa0>)
 800a258:	f7f7 fc6c 	bl	8001b34 <HAL_UART_Transmit>
    example_do_connect(client);
 800a25c:	4620      	mov	r0, r4
}
 800a25e:	b002      	add	sp, #8
 800a260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    example_do_connect(client);
 800a264:	f7ff bf80 	b.w	800a168 <example_do_connect>
}
 800a268:	b002      	add	sp, #8
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	0800d867 	.word	0x0800d867
 800a270:	20010a78 	.word	0x20010a78
 800a274:	20010e64 	.word	0x20010e64
 800a278:	0800a095 	.word	0x0800a095
 800a27c:	0800a111 	.word	0x0800a111
 800a280:	0800a02d 	.word	0x0800a02d
 800a284:	0800d893 	.word	0x0800d893
 800a288:	0800d8ae 	.word	0x0800d8ae

0800a28c <example_publish>:
void example_publish(mqtt_client_t *client, void *arg)
{
 800a28c:	b530      	push	{r4, r5, lr}
 800a28e:	4605      	mov	r5, r0
 800a290:	b085      	sub	sp, #20
  //const char *pub_payload= "Hola mundo de mierda!";
  const char *pub_payload= arg;
  err_t err;
  u8_t qos = 0; /* 0 1 or 2, see MQTT specification */
  u8_t retain = 0; /* No don't retain such crappy payload... */
  err = mqtt_publish(client, "hello_world", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 800a292:	4608      	mov	r0, r1
{
 800a294:	460c      	mov	r4, r1
  err = mqtt_publish(client, "hello_world", pub_payload, strlen(pub_payload), qos, retain, mqtt_pub_request_cb, arg);
 800a296:	f7f5 ffa5 	bl	80001e4 <strlen>
 800a29a:	4b10      	ldr	r3, [pc, #64]	; (800a2dc <example_publish+0x50>)
 800a29c:	9302      	str	r3, [sp, #8]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	9300      	str	r3, [sp, #0]
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	b283      	uxth	r3, r0
 800a2a8:	9403      	str	r4, [sp, #12]
 800a2aa:	490d      	ldr	r1, [pc, #52]	; (800a2e0 <example_publish+0x54>)
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f7f9 ff55 	bl	800415c <mqtt_publish>
  if(err != ERR_OK) {
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	b180      	cbz	r0, 800a2d8 <example_publish+0x4c>
    sprintf(buffer,"Publish err: %d\n\r", err);
 800a2b6:	490b      	ldr	r1, [pc, #44]	; (800a2e4 <example_publish+0x58>)
 800a2b8:	480b      	ldr	r0, [pc, #44]	; (800a2e8 <example_publish+0x5c>)
 800a2ba:	f000 fb6f 	bl	800a99c <siprintf>
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a2be:	480a      	ldr	r0, [pc, #40]	; (800a2e8 <example_publish+0x5c>)
 800a2c0:	f7f5 ff90 	bl	80001e4 <strlen>
 800a2c4:	4908      	ldr	r1, [pc, #32]	; (800a2e8 <example_publish+0x5c>)
 800a2c6:	b282      	uxth	r2, r0
 800a2c8:	4808      	ldr	r0, [pc, #32]	; (800a2ec <example_publish+0x60>)
 800a2ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  }
}
 800a2ce:	b005      	add	sp, #20
 800a2d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  HAL_UART_Transmit(&huart3,buffer,strlen(buffer),1000);
 800a2d4:	f7f7 bc2e 	b.w	8001b34 <HAL_UART_Transmit>
}
 800a2d8:	b005      	add	sp, #20
 800a2da:	bd30      	pop	{r4, r5, pc}
 800a2dc:	0800a061 	.word	0x0800a061
 800a2e0:	0800d849 	.word	0x0800d849
 800a2e4:	0800d855 	.word	0x0800d855
 800a2e8:	20010a78 	.word	0x20010a78
 800a2ec:	20010e64 	.word	0x20010e64

0800a2f0 <StartDHT22>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDHT22 */
void StartDHT22(void const * argument)
{
 800a2f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDHT22 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	f7f7 fcb1 	bl	8001c5a <osDelay>
 800a2f8:	e7fb      	b.n	800a2f2 <StartDHT22+0x2>
	...

0800a2fc <StartDefaultTask>:
{
 800a2fc:	b508      	push	{r3, lr}
  MX_LWIP_Init();
 800a2fe:	f7ff fe25 	bl	8009f4c <MX_LWIP_Init>
 client = mqtt_client_new();
 800a302:	f7fa f89f 	bl	8004444 <mqtt_client_new>
 800a306:	4d0d      	ldr	r5, [pc, #52]	; (800a33c <StartDefaultTask+0x40>)
 800a308:	4604      	mov	r4, r0
 800a30a:	6028      	str	r0, [r5, #0]
if(client != NULL) {
 800a30c:	b158      	cbz	r0, 800a326 <StartDefaultTask+0x2a>
   sprintf(pacote,"hello_mohamed");
 800a30e:	490c      	ldr	r1, [pc, #48]	; (800a340 <StartDefaultTask+0x44>)
 800a310:	480c      	ldr	r0, [pc, #48]	; (800a344 <StartDefaultTask+0x48>)
 800a312:	f000 fb67 	bl	800a9e4 <strcpy>
    example_do_connect(client, "hello_world");
 800a316:	490c      	ldr	r1, [pc, #48]	; (800a348 <StartDefaultTask+0x4c>)
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff ff25 	bl	800a168 <example_do_connect>
    example_publish(client, pacote);
 800a31e:	4909      	ldr	r1, [pc, #36]	; (800a344 <StartDefaultTask+0x48>)
 800a320:	6828      	ldr	r0, [r5, #0]
 800a322:	f7ff ffb3 	bl	800a28c <example_publish>
  if(HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a326:	4809      	ldr	r0, [pc, #36]	; (800a34c <StartDefaultTask+0x50>)
 800a328:	f7f7 fa44 	bl	80017b4 <HAL_TIM_Base_Init>
  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 800a32c:	4807      	ldr	r0, [pc, #28]	; (800a34c <StartDefaultTask+0x50>)
 800a32e:	f7f7 f925 	bl	800157c <HAL_TIM_Base_Start_IT>
    osDelay(1);
 800a332:	2001      	movs	r0, #1
 800a334:	f7f7 fc91 	bl	8001c5a <osDelay>
 800a338:	e7fb      	b.n	800a332 <StartDefaultTask+0x36>
 800a33a:	bf00      	nop
 800a33c:	20010ee8 	.word	0x20010ee8
 800a340:	0800d9d5 	.word	0x0800d9d5
 800a344:	20010eec 	.word	0x20010eec
 800a348:	0800d849 	.word	0x0800d849
 800a34c:	200112d8 	.word	0x200112d8

0800a350 <SystemClock_Config>:
{
 800a350:	b530      	push	{r4, r5, lr}
 800a352:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a354:	2230      	movs	r2, #48	; 0x30
 800a356:	2100      	movs	r1, #0
 800a358:	a808      	add	r0, sp, #32
 800a35a:	f000 faff 	bl	800a95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a35e:	2100      	movs	r1, #0
 800a360:	2214      	movs	r2, #20
 800a362:	a803      	add	r0, sp, #12
 800a364:	f000 fafa 	bl	800a95c <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800a368:	2400      	movs	r4, #0
 800a36a:	4b1d      	ldr	r3, [pc, #116]	; (800a3e0 <SystemClock_Config+0x90>)
 800a36c:	9401      	str	r4, [sp, #4]
 800a36e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a370:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a374:	641a      	str	r2, [r3, #64]	; 0x40
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a37c:	9301      	str	r3, [sp, #4]
 800a37e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a380:	4b18      	ldr	r3, [pc, #96]	; (800a3e4 <SystemClock_Config+0x94>)
 800a382:	9402      	str	r4, [sp, #8]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a38a:	601a      	str	r2, [r3, #0]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a392:	9302      	str	r3, [sp, #8]
 800a394:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a396:	2301      	movs	r3, #1
 800a398:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a39a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a39e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a3a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a3a4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a3a6:	2308      	movs	r3, #8
 800a3a8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a3aa:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3ae:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a3b0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3b2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a3b4:	2307      	movs	r3, #7
 800a3b6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a3b8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a3ba:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a3bc:	f7f6 fe2a 	bl	8001014 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a3c0:	230f      	movs	r3, #15
 800a3c2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a3c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a3c8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a3ca:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a3cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a3d0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a3d2:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a3d4:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a3d6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a3d8:	f7f6 fff0 	bl	80013bc <HAL_RCC_ClockConfig>
}
 800a3dc:	b015      	add	sp, #84	; 0x54
 800a3de:	bd30      	pop	{r4, r5, pc}
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	40007000 	.word	0x40007000

0800a3e8 <main>:
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b094      	sub	sp, #80	; 0x50
  HAL_Init();
 800a3ec:	f7f6 f8e0 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 800a3f0:	f7ff ffae 	bl	800a350 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3f4:	2214      	movs	r2, #20
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	a80d      	add	r0, sp, #52	; 0x34
 800a3fa:	f000 faaf 	bl	800a95c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a3fe:	2400      	movs	r4, #0
 800a400:	4b5e      	ldr	r3, [pc, #376]	; (800a57c <main+0x194>)
 800a402:	9401      	str	r4, [sp, #4]
 800a404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800a406:	485e      	ldr	r0, [pc, #376]	; (800a580 <main+0x198>)
  htim2.Instance = TIM2;
 800a408:	4d5e      	ldr	r5, [pc, #376]	; (800a584 <main+0x19c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a40a:	f042 0204 	orr.w	r2, r2, #4
 800a40e:	631a      	str	r2, [r3, #48]	; 0x30
 800a410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a412:	f002 0204 	and.w	r2, r2, #4
 800a416:	9201      	str	r2, [sp, #4]
 800a418:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a41a:	9402      	str	r4, [sp, #8]
 800a41c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a41e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a422:	631a      	str	r2, [r3, #48]	; 0x30
 800a424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a426:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800a42a:	9202      	str	r2, [sp, #8]
 800a42c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a42e:	9403      	str	r4, [sp, #12]
 800a430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	631a      	str	r2, [r3, #48]	; 0x30
 800a438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a43a:	f002 0201 	and.w	r2, r2, #1
 800a43e:	9203      	str	r2, [sp, #12]
 800a440:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a442:	9404      	str	r4, [sp, #16]
 800a444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a446:	f042 0202 	orr.w	r2, r2, #2
 800a44a:	631a      	str	r2, [r3, #48]	; 0x30
 800a44c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a44e:	f002 0202 	and.w	r2, r2, #2
 800a452:	9204      	str	r2, [sp, #16]
 800a454:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a456:	9405      	str	r4, [sp, #20]
 800a458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a45a:	f042 0208 	orr.w	r2, r2, #8
 800a45e:	631a      	str	r2, [r3, #48]	; 0x30
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800a466:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a468:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800a46a:	f24f 0168 	movw	r1, #61544	; 0xf068
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a46e:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800a470:	f7f6 fdca 	bl	8001008 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800a474:	f24f 0368 	movw	r3, #61544	; 0xf068
 800a478:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a47a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a47c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a47e:	4840      	ldr	r0, [pc, #256]	; (800a580 <main+0x198>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a480:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a482:	2610      	movs	r6, #16
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a484:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a486:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a488:	f7f6 fcde 	bl	8000e48 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a48c:	a90d      	add	r1, sp, #52	; 0x34
 800a48e:	483c      	ldr	r0, [pc, #240]	; (800a580 <main+0x198>)
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a490:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a492:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a494:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a496:	f7f6 fcd7 	bl	8000e48 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a49a:	4632      	mov	r2, r6
 800a49c:	4621      	mov	r1, r4
 800a49e:	a80d      	add	r0, sp, #52	; 0x34
 800a4a0:	f000 fa5c 	bl	800a95c <memset>
  htim2.Init.Prescaler = 83;
 800a4a4:	f04f 0953 	mov.w	r9, #83	; 0x53
 800a4a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Period = 999;
 800a4ac:	f240 38e7 	movw	r8, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a4b0:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 83;
 800a4b2:	e885 0208 	stmia.w	r5, {r3, r9}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4b6:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 999;
 800a4b8:	f8c5 800c 	str.w	r8, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4bc:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4be:	61ac      	str	r4, [r5, #24]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4c0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4c4:	9406      	str	r4, [sp, #24]
 800a4c6:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a4c8:	f7f7 f974 	bl	80017b4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a4cc:	a90d      	add	r1, sp, #52	; 0x34
 800a4ce:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4d0:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a4d2:	f7f7 f993 	bl	80017fc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a4d6:	a906      	add	r1, sp, #24
 800a4d8:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4da:	9406      	str	r4, [sp, #24]
  htim3.Instance = TIM3;
 800a4dc:	4d2a      	ldr	r5, [pc, #168]	; (800a588 <main+0x1a0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4de:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a4e0:	f7f7 fa20 	bl	8001924 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	a80d      	add	r0, sp, #52	; 0x34
 800a4ea:	f000 fa37 	bl	800a95c <memset>
  htim3.Instance = TIM3;
 800a4ee:	4b27      	ldr	r3, [pc, #156]	; (800a58c <main+0x1a4>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4f0:	60ac      	str	r4, [r5, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a4f2:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 83;
 800a4f4:	e885 0208 	stmia.w	r5, {r3, r9}
  htim3.Init.Period = 999;
 800a4f8:	f8c5 800c 	str.w	r8, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4fc:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4fe:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a500:	9406      	str	r4, [sp, #24]
 800a502:	9407      	str	r4, [sp, #28]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800a504:	f7f7 f956 	bl	80017b4 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a508:	a90d      	add	r1, sp, #52	; 0x34
 800a50a:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a50c:	970d      	str	r7, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a50e:	f7f7 f975 	bl	80017fc <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a512:	a906      	add	r1, sp, #24
 800a514:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a516:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a518:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a51a:	f7f7 fa03 	bl	8001924 <HAL_TIMEx_MasterConfigSynchronization>
  huart3.Instance = USART3;
 800a51e:	481c      	ldr	r0, [pc, #112]	; (800a590 <main+0x1a8>)
  huart3.Init.BaudRate = 115200;
 800a520:	4a1c      	ldr	r2, [pc, #112]	; (800a594 <main+0x1ac>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, (3*1024));
 800a522:	4d1d      	ldr	r5, [pc, #116]	; (800a598 <main+0x1b0>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a524:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 800a526:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800a52a:	e880 000c 	stmia.w	r0, {r2, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a52e:	230c      	movs	r3, #12
 800a530:	6143      	str	r3, [r0, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a532:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a534:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a536:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a538:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a53a:	f7f7 facd 	bl	8001ad8 <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, (3*1024));
 800a53e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a540:	ae06      	add	r6, sp, #24
 800a542:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a548:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a54c:	4621      	mov	r1, r4
 800a54e:	a806      	add	r0, sp, #24
 800a550:	f7f7 fb5b 	bl	8001c0a <osThreadCreate>
 800a554:	4b11      	ldr	r3, [pc, #68]	; (800a59c <main+0x1b4>)
  osThreadDef(DHT22, StartDHT22, osPriorityIdle, 0, 128);
 800a556:	350c      	adds	r5, #12
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a558:	6018      	str	r0, [r3, #0]
  osThreadDef(DHT22, StartDHT22, osPriorityIdle, 0, 128);
 800a55a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a55c:	ae0d      	add	r6, sp, #52	; 0x34
 800a55e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a564:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  DHT22Handle = osThreadCreate(osThread(DHT22), NULL);
 800a568:	4621      	mov	r1, r4
 800a56a:	a80d      	add	r0, sp, #52	; 0x34
 800a56c:	f7f7 fb4d 	bl	8001c0a <osThreadCreate>
 800a570:	4b0b      	ldr	r3, [pc, #44]	; (800a5a0 <main+0x1b8>)
 800a572:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800a574:	f7f7 fb3d 	bl	8001bf2 <osKernelStart>
 800a578:	e7fe      	b.n	800a578 <main+0x190>
 800a57a:	bf00      	nop
 800a57c:	40023800 	.word	0x40023800
 800a580:	40020c00 	.word	0x40020c00
 800a584:	200112d8 	.word	0x200112d8
 800a588:	20010ea8 	.word	0x20010ea8
 800a58c:	40000400 	.word	0x40000400
 800a590:	20010e64 	.word	0x20010e64
 800a594:	40004800 	.word	0x40004800
 800a598:	0800bb1c 	.word	0x0800bb1c
 800a59c:	20010e60 	.word	0x20010e60
 800a5a0:	20010ea4 	.word	0x20010ea4

0800a5a4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800a5a4:	6802      	ldr	r2, [r0, #0]
 800a5a6:	4b15      	ldr	r3, [pc, #84]	; (800a5fc <HAL_TIM_PeriodElapsedCallback+0x58>)
 800a5a8:	429a      	cmp	r2, r3
{
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	4604      	mov	r4, r0
  if (htim->Instance == TIM4) {
 800a5ae:	d101      	bne.n	800a5b4 <HAL_TIM_PeriodElapsedCallback+0x10>
    HAL_IncTick();
 800a5b0:	f7f6 f818 	bl	80005e4 <HAL_IncTick>
  }
  if (htim->Instance == TIM2) {
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5ba:	d11d      	bne.n	800a5f8 <HAL_TIM_PeriodElapsedCallback+0x54>
	  count++;
 800a5bc:	4a10      	ldr	r2, [pc, #64]	; (800a600 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800a5be:	6813      	ldr	r3, [r2, #0]
 800a5c0:	3301      	adds	r3, #1
	  if(count>199){
 800a5c2:	2bc7      	cmp	r3, #199	; 0xc7
 800a5c4:	d801      	bhi.n	800a5ca <HAL_TIM_PeriodElapsedCallback+0x26>
	  count++;
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	bd10      	pop	{r4, pc}
		  count=0;
	  if(client != NULL) {
 800a5ca:	4c0e      	ldr	r4, [pc, #56]	; (800a604 <HAL_TIM_PeriodElapsedCallback+0x60>)
		  count=0;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	6013      	str	r3, [r2, #0]
	  if(client != NULL) {
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	b18b      	cbz	r3, 800a5f8 <HAL_TIM_PeriodElapsedCallback+0x54>
		num++;
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <HAL_TIM_PeriodElapsedCallback+0x64>)
	sprintf(pacote,"hello Timer:%d",num);
 800a5d6:	490d      	ldr	r1, [pc, #52]	; (800a60c <HAL_TIM_PeriodElapsedCallback+0x68>)
		num++;
 800a5d8:	681a      	ldr	r2, [r3, #0]
	sprintf(pacote,"hello Timer:%d",num);
 800a5da:	480d      	ldr	r0, [pc, #52]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x6c>)
		num++;
 800a5dc:	3201      	adds	r2, #1
 800a5de:	601a      	str	r2, [r3, #0]
	sprintf(pacote,"hello Timer:%d",num);
 800a5e0:	f000 f9dc 	bl	800a99c <siprintf>
	    example_do_connect(client, "hello_world");
 800a5e4:	6820      	ldr	r0, [r4, #0]
 800a5e6:	490b      	ldr	r1, [pc, #44]	; (800a614 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800a5e8:	f7ff fdbe 	bl	800a168 <example_do_connect>
	    example_publish(client, pacote);
 800a5ec:	6820      	ldr	r0, [r4, #0]
 800a5ee:	4908      	ldr	r1, [pc, #32]	; (800a610 <HAL_TIM_PeriodElapsedCallback+0x6c>)
  }
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    example_publish(client, pacote);
 800a5f4:	f7ff be4a 	b.w	800a28c <example_publish>
 800a5f8:	bd10      	pop	{r4, pc}
 800a5fa:	bf00      	nop
 800a5fc:	40000800 	.word	0x40000800
 800a600:	200112d4 	.word	0x200112d4
 800a604:	20010ee8 	.word	0x20010ee8
 800a608:	200055d4 	.word	0x200055d4
 800a60c:	0800d9c6 	.word	0x0800d9c6
 800a610:	20010eec 	.word	0x20010eec
 800a614:	0800d849 	.word	0x0800d849

0800a618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a618:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a61a:	4b0f      	ldr	r3, [pc, #60]	; (800a658 <HAL_MspInit+0x40>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	9200      	str	r2, [sp, #0]
 800a620:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a622:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a626:	6459      	str	r1, [r3, #68]	; 0x44
 800a628:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a62a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800a62e:	9100      	str	r1, [sp, #0]
 800a630:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a632:	9201      	str	r2, [sp, #4]
 800a634:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a636:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800a63a:	6419      	str	r1, [r3, #64]	; 0x40
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a642:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a644:	210f      	movs	r1, #15
 800a646:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800a64a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a64c:	f7f6 f802 	bl	8000654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a650:	b003      	add	sp, #12
 800a652:	f85d fb04 	ldr.w	pc, [sp], #4
 800a656:	bf00      	nop
 800a658:	40023800 	.word	0x40023800

0800a65c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800a65c:	6803      	ldr	r3, [r0, #0]
 800a65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800a662:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800a664:	d116      	bne.n	800a694 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a666:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800a66a:	2200      	movs	r2, #0
 800a66c:	9200      	str	r2, [sp, #0]
 800a66e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a670:	f041 0101 	orr.w	r1, r1, #1
 800a674:	6419      	str	r1, [r3, #64]	; 0x40
 800a676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a67e:	201c      	movs	r0, #28
 800a680:	2105      	movs	r1, #5
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a682:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a684:	f7f5 ffe6 	bl	8000654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a688:	201c      	movs	r0, #28
  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a68a:	f7f6 f817 	bl	80006bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800a68e:	b003      	add	sp, #12
 800a690:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 800a694:	4a0a      	ldr	r2, [pc, #40]	; (800a6c0 <HAL_TIM_Base_MspInit+0x64>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d1f9      	bne.n	800a68e <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a69a:	4b0a      	ldr	r3, [pc, #40]	; (800a6c4 <HAL_TIM_Base_MspInit+0x68>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	9201      	str	r2, [sp, #4]
 800a6a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a6a2:	f041 0102 	orr.w	r1, r1, #2
 800a6a6:	6419      	str	r1, [r3, #64]	; 0x40
 800a6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6aa:	f003 0302 	and.w	r3, r3, #2
 800a6ae:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a6b0:	201d      	movs	r0, #29
 800a6b2:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a6b4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800a6b6:	f7f5 ffcd 	bl	8000654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a6ba:	201d      	movs	r0, #29
 800a6bc:	e7e5      	b.n	800a68a <HAL_TIM_Base_MspInit+0x2e>
 800a6be:	bf00      	nop
 800a6c0:	40000400 	.word	0x40000400
 800a6c4:	40023800 	.word	0x40023800

0800a6c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a6c8:	b510      	push	{r4, lr}
 800a6ca:	4604      	mov	r4, r0
 800a6cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a6ce:	2214      	movs	r2, #20
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	a803      	add	r0, sp, #12
 800a6d4:	f000 f942 	bl	800a95c <memset>
  if(huart->Instance==USART3)
 800a6d8:	6822      	ldr	r2, [r4, #0]
 800a6da:	4b14      	ldr	r3, [pc, #80]	; (800a72c <HAL_UART_MspInit+0x64>)
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d123      	bne.n	800a728 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800a6e0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	9101      	str	r1, [sp, #4]
 800a6e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6ea:	4811      	ldr	r0, [pc, #68]	; (800a730 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800a6ec:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a6f0:	641a      	str	r2, [r3, #64]	; 0x40
 800a6f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6f4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800a6f8:	9201      	str	r2, [sp, #4]
 800a6fa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a6fc:	9102      	str	r1, [sp, #8]
 800a6fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a700:	f042 0208 	orr.w	r2, r2, #8
 800a704:	631a      	str	r2, [r3, #48]	; 0x30
 800a706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a708:	f003 0308 	and.w	r3, r3, #8
 800a70c:	9302      	str	r3, [sp, #8]
 800a70e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800a710:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a714:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a716:	2302      	movs	r3, #2
 800a718:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a71a:	2303      	movs	r3, #3
 800a71c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a71e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a720:	2307      	movs	r3, #7
 800a722:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a724:	f7f6 fb90 	bl	8000e48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800a728:	b008      	add	sp, #32
 800a72a:	bd10      	pop	{r4, pc}
 800a72c:	40004800 	.word	0x40004800
 800a730:	40020c00 	.word	0x40020c00

0800a734 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a734:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800a736:	4601      	mov	r1, r0
{
 800a738:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800a73a:	2200      	movs	r2, #0
 800a73c:	201e      	movs	r0, #30
 800a73e:	f7f5 ff89 	bl	8000654 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800a742:	201e      	movs	r0, #30
 800a744:	f7f5 ffba 	bl	80006bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800a748:	2500      	movs	r5, #0
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <HAL_InitTick+0x6c>)
 800a74c:	9502      	str	r5, [sp, #8]
 800a74e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800a750:	4c14      	ldr	r4, [pc, #80]	; (800a7a4 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 800a752:	f042 0204 	orr.w	r2, r2, #4
 800a756:	641a      	str	r2, [r3, #64]	; 0x40
 800a758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75a:	f003 0304 	and.w	r3, r3, #4
 800a75e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a760:	a901      	add	r1, sp, #4
 800a762:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 800a764:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a766:	f7f6 feeb 	bl	8001540 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a76a:	f7f6 fec9 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 800a76e:	4b0e      	ldr	r3, [pc, #56]	; (800a7a8 <HAL_InitTick+0x74>)
 800a770:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800a772:	f240 33e7 	movw	r3, #999	; 0x3e7
 800a776:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800a778:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800a77a:	4b0c      	ldr	r3, [pc, #48]	; (800a7ac <HAL_InitTick+0x78>)
 800a77c:	fbb0 f0f3 	udiv	r0, r0, r3
 800a780:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 800a782:	6060      	str	r0, [r4, #4]
  htim4.Init.ClockDivision = 0;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800a784:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 800a786:	6125      	str	r5, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a788:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800a78a:	f7f7 f813 	bl	80017b4 <HAL_TIM_Base_Init>
 800a78e:	b920      	cbnz	r0, 800a79a <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800a790:	4620      	mov	r0, r4
 800a792:	f7f6 fef3 	bl	800157c <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800a796:	b009      	add	sp, #36	; 0x24
 800a798:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 800a79a:	2001      	movs	r0, #1
 800a79c:	e7fb      	b.n	800a796 <HAL_InitTick+0x62>
 800a79e:	bf00      	nop
 800a7a0:	40023800 	.word	0x40023800
 800a7a4:	20011318 	.word	0x20011318
 800a7a8:	40000800 	.word	0x40000800
 800a7ac:	000f4240 	.word	0x000f4240

0800a7b0 <NMI_Handler>:
 800a7b0:	4770      	bx	lr

0800a7b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a7b2:	e7fe      	b.n	800a7b2 <HardFault_Handler>

0800a7b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a7b4:	e7fe      	b.n	800a7b4 <MemManage_Handler>

0800a7b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a7b6:	e7fe      	b.n	800a7b6 <BusFault_Handler>

0800a7b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a7b8:	e7fe      	b.n	800a7b8 <UsageFault_Handler>

0800a7ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a7ba:	4770      	bx	lr

0800a7bc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a7bc:	4801      	ldr	r0, [pc, #4]	; (800a7c4 <TIM2_IRQHandler+0x8>)
 800a7be:	f7f6 bef1 	b.w	80015a4 <HAL_TIM_IRQHandler>
 800a7c2:	bf00      	nop
 800a7c4:	200112d8 	.word	0x200112d8

0800a7c8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a7c8:	4801      	ldr	r0, [pc, #4]	; (800a7d0 <TIM3_IRQHandler+0x8>)
 800a7ca:	f7f6 beeb 	b.w	80015a4 <HAL_TIM_IRQHandler>
 800a7ce:	bf00      	nop
 800a7d0:	20010ea8 	.word	0x20010ea8

0800a7d4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a7d4:	4801      	ldr	r0, [pc, #4]	; (800a7dc <TIM4_IRQHandler+0x8>)
 800a7d6:	f7f6 bee5 	b.w	80015a4 <HAL_TIM_IRQHandler>
 800a7da:	bf00      	nop
 800a7dc:	20011318 	.word	0x20011318

0800a7e0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800a7e0:	4801      	ldr	r0, [pc, #4]	; (800a7e8 <ETH_IRQHandler+0x8>)
 800a7e2:	f7f6 b950 	b.w	8000a86 <HAL_ETH_IRQHandler>
 800a7e6:	bf00      	nop
 800a7e8:	2000f218 	.word	0x2000f218

0800a7ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a7ec:	b570      	push	{r4, r5, r6, lr}
 800a7ee:	460e      	mov	r6, r1
 800a7f0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	1ba3      	subs	r3, r4, r6
 800a7f6:	429d      	cmp	r5, r3
 800a7f8:	dc01      	bgt.n	800a7fe <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800a7fe:	f3af 8000 	nop.w
 800a802:	f804 0b01 	strb.w	r0, [r4], #1
 800a806:	e7f5      	b.n	800a7f4 <_read+0x8>

0800a808 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	460e      	mov	r6, r1
 800a80c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a80e:	460c      	mov	r4, r1
 800a810:	1ba3      	subs	r3, r4, r6
 800a812:	429d      	cmp	r5, r3
 800a814:	dc01      	bgt.n	800a81a <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800a816:	4628      	mov	r0, r5
 800a818:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800a81a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a81e:	f3af 8000 	nop.w
 800a822:	e7f5      	b.n	800a810 <_write+0x8>

0800a824 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a824:	4b09      	ldr	r3, [pc, #36]	; (800a84c <_sbrk+0x28>)
 800a826:	6819      	ldr	r1, [r3, #0]
{
 800a828:	4602      	mov	r2, r0
	if (heap_end == 0)
 800a82a:	b909      	cbnz	r1, 800a830 <_sbrk+0xc>
		heap_end = &end;
 800a82c:	4908      	ldr	r1, [pc, #32]	; (800a850 <_sbrk+0x2c>)
 800a82e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 800a830:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800a832:	4669      	mov	r1, sp
 800a834:	4402      	add	r2, r0
 800a836:	428a      	cmp	r2, r1
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a838:	bf89      	itett	hi
 800a83a:	4b06      	ldrhi	r3, [pc, #24]	; (800a854 <_sbrk+0x30>)
		return (caddr_t) -1;
	}

	heap_end += incr;
 800a83c:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800a83e:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 800a840:	f04f 30ff 	movhi.w	r0, #4294967295
		errno = ENOMEM;
 800a844:	bf88      	it	hi
 800a846:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	200055d8 	.word	0x200055d8
 800a850:	20011358 	.word	0x20011358
 800a854:	2000d940 	.word	0x2000d940

0800a858 <_close>:

int _close(int file)
{
	return -1;
}
 800a858:	f04f 30ff 	mov.w	r0, #4294967295
 800a85c:	4770      	bx	lr

0800a85e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800a85e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a862:	604b      	str	r3, [r1, #4]
	return 0;
}
 800a864:	2000      	movs	r0, #0
 800a866:	4770      	bx	lr

0800a868 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800a868:	2001      	movs	r0, #1
 800a86a:	4770      	bx	lr

0800a86c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800a86c:	2000      	movs	r0, #0
 800a86e:	4770      	bx	lr

0800a870 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a870:	4b05      	ldr	r3, [pc, #20]	; (800a888 <SystemInit+0x18>)
 800a872:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a876:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a87a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a87e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a882:	609a      	str	r2, [r3, #8]
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	e000ed00 	.word	0xe000ed00

0800a88c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a88c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a8c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a890:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a892:	e003      	b.n	800a89c <LoopCopyDataInit>

0800a894 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a894:	4b0c      	ldr	r3, [pc, #48]	; (800a8c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a896:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a898:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a89a:	3104      	adds	r1, #4

0800a89c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a89c:	480b      	ldr	r0, [pc, #44]	; (800a8cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a89e:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a8a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a8a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a8a4:	d3f6      	bcc.n	800a894 <CopyDataInit>
  ldr  r2, =_sbss
 800a8a6:	4a0b      	ldr	r2, [pc, #44]	; (800a8d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a8a8:	e002      	b.n	800a8b0 <LoopFillZerobss>

0800a8aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a8aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a8ac:	f842 3b04 	str.w	r3, [r2], #4

0800a8b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a8b0:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a8b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a8b4:	d3f9      	bcc.n	800a8aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a8b6:	f7ff ffdb 	bl	800a870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a8ba:	f000 f811 	bl	800a8e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a8be:	f7ff fd93 	bl	800a3e8 <main>
  bx  lr    
 800a8c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a8c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800a8c8:	0800dab8 	.word	0x0800dab8
  ldr  r0, =_sdata
 800a8cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a8d0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 800a8d4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800a8d8:	20011358 	.word	0x20011358

0800a8dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a8dc:	e7fe      	b.n	800a8dc <ADC_IRQHandler>
	...

0800a8e0 <__libc_init_array>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4e0d      	ldr	r6, [pc, #52]	; (800a918 <__libc_init_array+0x38>)
 800a8e4:	4c0d      	ldr	r4, [pc, #52]	; (800a91c <__libc_init_array+0x3c>)
 800a8e6:	1ba4      	subs	r4, r4, r6
 800a8e8:	10a4      	asrs	r4, r4, #2
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	42a5      	cmp	r5, r4
 800a8ee:	d109      	bne.n	800a904 <__libc_init_array+0x24>
 800a8f0:	4e0b      	ldr	r6, [pc, #44]	; (800a920 <__libc_init_array+0x40>)
 800a8f2:	4c0c      	ldr	r4, [pc, #48]	; (800a924 <__libc_init_array+0x44>)
 800a8f4:	f001 f8f8 	bl	800bae8 <_init>
 800a8f8:	1ba4      	subs	r4, r4, r6
 800a8fa:	10a4      	asrs	r4, r4, #2
 800a8fc:	2500      	movs	r5, #0
 800a8fe:	42a5      	cmp	r5, r4
 800a900:	d105      	bne.n	800a90e <__libc_init_array+0x2e>
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a908:	4798      	blx	r3
 800a90a:	3501      	adds	r5, #1
 800a90c:	e7ee      	b.n	800a8ec <__libc_init_array+0xc>
 800a90e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a912:	4798      	blx	r3
 800a914:	3501      	adds	r5, #1
 800a916:	e7f2      	b.n	800a8fe <__libc_init_array+0x1e>
 800a918:	0800dab0 	.word	0x0800dab0
 800a91c:	0800dab0 	.word	0x0800dab0
 800a920:	0800dab0 	.word	0x0800dab0
 800a924:	0800dab4 	.word	0x0800dab4

0800a928 <memcmp>:
 800a928:	b510      	push	{r4, lr}
 800a92a:	3901      	subs	r1, #1
 800a92c:	4402      	add	r2, r0
 800a92e:	4290      	cmp	r0, r2
 800a930:	d101      	bne.n	800a936 <memcmp+0xe>
 800a932:	2000      	movs	r0, #0
 800a934:	bd10      	pop	{r4, pc}
 800a936:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a93a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a93e:	42a3      	cmp	r3, r4
 800a940:	d0f5      	beq.n	800a92e <memcmp+0x6>
 800a942:	1b18      	subs	r0, r3, r4
 800a944:	bd10      	pop	{r4, pc}

0800a946 <memcpy>:
 800a946:	b510      	push	{r4, lr}
 800a948:	1e43      	subs	r3, r0, #1
 800a94a:	440a      	add	r2, r1
 800a94c:	4291      	cmp	r1, r2
 800a94e:	d100      	bne.n	800a952 <memcpy+0xc>
 800a950:	bd10      	pop	{r4, pc}
 800a952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a95a:	e7f7      	b.n	800a94c <memcpy+0x6>

0800a95c <memset>:
 800a95c:	4402      	add	r2, r0
 800a95e:	4603      	mov	r3, r0
 800a960:	4293      	cmp	r3, r2
 800a962:	d100      	bne.n	800a966 <memset+0xa>
 800a964:	4770      	bx	lr
 800a966:	f803 1b01 	strb.w	r1, [r3], #1
 800a96a:	e7f9      	b.n	800a960 <memset+0x4>

0800a96c <iprintf>:
 800a96c:	b40f      	push	{r0, r1, r2, r3}
 800a96e:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <iprintf+0x2c>)
 800a970:	b513      	push	{r0, r1, r4, lr}
 800a972:	681c      	ldr	r4, [r3, #0]
 800a974:	b124      	cbz	r4, 800a980 <iprintf+0x14>
 800a976:	69a3      	ldr	r3, [r4, #24]
 800a978:	b913      	cbnz	r3, 800a980 <iprintf+0x14>
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 f87a 	bl	800aa74 <__sinit>
 800a980:	ab05      	add	r3, sp, #20
 800a982:	9a04      	ldr	r2, [sp, #16]
 800a984:	68a1      	ldr	r1, [r4, #8]
 800a986:	9301      	str	r3, [sp, #4]
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fad5 	bl	800af38 <_vfiprintf_r>
 800a98e:	b002      	add	sp, #8
 800a990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a994:	b004      	add	sp, #16
 800a996:	4770      	bx	lr
 800a998:	20000018 	.word	0x20000018

0800a99c <siprintf>:
 800a99c:	b40e      	push	{r1, r2, r3}
 800a99e:	b500      	push	{lr}
 800a9a0:	b09c      	sub	sp, #112	; 0x70
 800a9a2:	f44f 7102 	mov.w	r1, #520	; 0x208
 800a9a6:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a8:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a9ac:	9002      	str	r0, [sp, #8]
 800a9ae:	9006      	str	r0, [sp, #24]
 800a9b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9b4:	480a      	ldr	r0, [pc, #40]	; (800a9e0 <siprintf+0x44>)
 800a9b6:	9104      	str	r1, [sp, #16]
 800a9b8:	9107      	str	r1, [sp, #28]
 800a9ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9c2:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a9c6:	6800      	ldr	r0, [r0, #0]
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	a902      	add	r1, sp, #8
 800a9cc:	f000 f996 	bl	800acfc <_svfiprintf_r>
 800a9d0:	9b02      	ldr	r3, [sp, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	b01c      	add	sp, #112	; 0x70
 800a9d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9dc:	b003      	add	sp, #12
 800a9de:	4770      	bx	lr
 800a9e0:	20000018 	.word	0x20000018

0800a9e4 <strcpy>:
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ea:	f803 2b01 	strb.w	r2, [r3], #1
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	d1f9      	bne.n	800a9e6 <strcpy+0x2>
 800a9f2:	4770      	bx	lr

0800a9f4 <_cleanup_r>:
 800a9f4:	4901      	ldr	r1, [pc, #4]	; (800a9fc <_cleanup_r+0x8>)
 800a9f6:	f000 b8a9 	b.w	800ab4c <_fwalk_reent>
 800a9fa:	bf00      	nop
 800a9fc:	0800b80d 	.word	0x0800b80d

0800aa00 <std.isra.0>:
 800aa00:	2300      	movs	r3, #0
 800aa02:	b510      	push	{r4, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	6003      	str	r3, [r0, #0]
 800aa08:	6043      	str	r3, [r0, #4]
 800aa0a:	6083      	str	r3, [r0, #8]
 800aa0c:	8181      	strh	r1, [r0, #12]
 800aa0e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa10:	81c2      	strh	r2, [r0, #14]
 800aa12:	6103      	str	r3, [r0, #16]
 800aa14:	6143      	str	r3, [r0, #20]
 800aa16:	6183      	str	r3, [r0, #24]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	305c      	adds	r0, #92	; 0x5c
 800aa1e:	f7ff ff9d 	bl	800a95c <memset>
 800aa22:	4b05      	ldr	r3, [pc, #20]	; (800aa38 <std.isra.0+0x38>)
 800aa24:	6263      	str	r3, [r4, #36]	; 0x24
 800aa26:	4b05      	ldr	r3, [pc, #20]	; (800aa3c <std.isra.0+0x3c>)
 800aa28:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <std.isra.0+0x40>)
 800aa2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa2e:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <std.isra.0+0x44>)
 800aa30:	6224      	str	r4, [r4, #32]
 800aa32:	6323      	str	r3, [r4, #48]	; 0x30
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	bf00      	nop
 800aa38:	0800b4b1 	.word	0x0800b4b1
 800aa3c:	0800b4d3 	.word	0x0800b4d3
 800aa40:	0800b50b 	.word	0x0800b50b
 800aa44:	0800b52f 	.word	0x0800b52f

0800aa48 <__sfmoreglue>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	1e4a      	subs	r2, r1, #1
 800aa4c:	2568      	movs	r5, #104	; 0x68
 800aa4e:	4355      	muls	r5, r2
 800aa50:	460e      	mov	r6, r1
 800aa52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aa56:	f000 f897 	bl	800ab88 <_malloc_r>
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	b140      	cbz	r0, 800aa70 <__sfmoreglue+0x28>
 800aa5e:	2100      	movs	r1, #0
 800aa60:	e880 0042 	stmia.w	r0, {r1, r6}
 800aa64:	300c      	adds	r0, #12
 800aa66:	60a0      	str	r0, [r4, #8]
 800aa68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa6c:	f7ff ff76 	bl	800a95c <memset>
 800aa70:	4620      	mov	r0, r4
 800aa72:	bd70      	pop	{r4, r5, r6, pc}

0800aa74 <__sinit>:
 800aa74:	6983      	ldr	r3, [r0, #24]
 800aa76:	b510      	push	{r4, lr}
 800aa78:	4604      	mov	r4, r0
 800aa7a:	bb33      	cbnz	r3, 800aaca <__sinit+0x56>
 800aa7c:	6483      	str	r3, [r0, #72]	; 0x48
 800aa7e:	64c3      	str	r3, [r0, #76]	; 0x4c
 800aa80:	6503      	str	r3, [r0, #80]	; 0x50
 800aa82:	4b12      	ldr	r3, [pc, #72]	; (800aacc <__sinit+0x58>)
 800aa84:	4a12      	ldr	r2, [pc, #72]	; (800aad0 <__sinit+0x5c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	6282      	str	r2, [r0, #40]	; 0x28
 800aa8a:	4298      	cmp	r0, r3
 800aa8c:	bf04      	itt	eq
 800aa8e:	2301      	moveq	r3, #1
 800aa90:	6183      	streq	r3, [r0, #24]
 800aa92:	f000 f81f 	bl	800aad4 <__sfp>
 800aa96:	6060      	str	r0, [r4, #4]
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 f81b 	bl	800aad4 <__sfp>
 800aa9e:	60a0      	str	r0, [r4, #8]
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 f817 	bl	800aad4 <__sfp>
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	60e0      	str	r0, [r4, #12]
 800aaaa:	2104      	movs	r1, #4
 800aaac:	6860      	ldr	r0, [r4, #4]
 800aaae:	f7ff ffa7 	bl	800aa00 <std.isra.0>
 800aab2:	2201      	movs	r2, #1
 800aab4:	2109      	movs	r1, #9
 800aab6:	68a0      	ldr	r0, [r4, #8]
 800aab8:	f7ff ffa2 	bl	800aa00 <std.isra.0>
 800aabc:	2202      	movs	r2, #2
 800aabe:	2112      	movs	r1, #18
 800aac0:	68e0      	ldr	r0, [r4, #12]
 800aac2:	f7ff ff9d 	bl	800aa00 <std.isra.0>
 800aac6:	2301      	movs	r3, #1
 800aac8:	61a3      	str	r3, [r4, #24]
 800aaca:	bd10      	pop	{r4, pc}
 800aacc:	0800da70 	.word	0x0800da70
 800aad0:	0800a9f5 	.word	0x0800a9f5

0800aad4 <__sfp>:
 800aad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad6:	4b1c      	ldr	r3, [pc, #112]	; (800ab48 <__sfp+0x74>)
 800aad8:	681e      	ldr	r6, [r3, #0]
 800aada:	69b3      	ldr	r3, [r6, #24]
 800aadc:	4607      	mov	r7, r0
 800aade:	b913      	cbnz	r3, 800aae6 <__sfp+0x12>
 800aae0:	4630      	mov	r0, r6
 800aae2:	f7ff ffc7 	bl	800aa74 <__sinit>
 800aae6:	3648      	adds	r6, #72	; 0x48
 800aae8:	68b4      	ldr	r4, [r6, #8]
 800aaea:	6873      	ldr	r3, [r6, #4]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	d503      	bpl.n	800aaf8 <__sfp+0x24>
 800aaf0:	6833      	ldr	r3, [r6, #0]
 800aaf2:	b133      	cbz	r3, 800ab02 <__sfp+0x2e>
 800aaf4:	6836      	ldr	r6, [r6, #0]
 800aaf6:	e7f7      	b.n	800aae8 <__sfp+0x14>
 800aaf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aafc:	b16d      	cbz	r5, 800ab1a <__sfp+0x46>
 800aafe:	3468      	adds	r4, #104	; 0x68
 800ab00:	e7f4      	b.n	800aaec <__sfp+0x18>
 800ab02:	2104      	movs	r1, #4
 800ab04:	4638      	mov	r0, r7
 800ab06:	f7ff ff9f 	bl	800aa48 <__sfmoreglue>
 800ab0a:	6030      	str	r0, [r6, #0]
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1f1      	bne.n	800aaf4 <__sfp+0x20>
 800ab10:	230c      	movs	r3, #12
 800ab12:	603b      	str	r3, [r7, #0]
 800ab14:	4604      	mov	r4, r0
 800ab16:	4620      	mov	r0, r4
 800ab18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab1e:	81e3      	strh	r3, [r4, #14]
 800ab20:	2301      	movs	r3, #1
 800ab22:	81a3      	strh	r3, [r4, #12]
 800ab24:	6665      	str	r5, [r4, #100]	; 0x64
 800ab26:	6025      	str	r5, [r4, #0]
 800ab28:	60a5      	str	r5, [r4, #8]
 800ab2a:	6065      	str	r5, [r4, #4]
 800ab2c:	6125      	str	r5, [r4, #16]
 800ab2e:	6165      	str	r5, [r4, #20]
 800ab30:	61a5      	str	r5, [r4, #24]
 800ab32:	2208      	movs	r2, #8
 800ab34:	4629      	mov	r1, r5
 800ab36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ab3a:	f7ff ff0f 	bl	800a95c <memset>
 800ab3e:	6365      	str	r5, [r4, #52]	; 0x34
 800ab40:	63a5      	str	r5, [r4, #56]	; 0x38
 800ab42:	64a5      	str	r5, [r4, #72]	; 0x48
 800ab44:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ab46:	e7e6      	b.n	800ab16 <__sfp+0x42>
 800ab48:	0800da70 	.word	0x0800da70

0800ab4c <_fwalk_reent>:
 800ab4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab50:	4680      	mov	r8, r0
 800ab52:	4689      	mov	r9, r1
 800ab54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab58:	2600      	movs	r6, #0
 800ab5a:	b914      	cbnz	r4, 800ab62 <_fwalk_reent+0x16>
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab62:	68a5      	ldr	r5, [r4, #8]
 800ab64:	6867      	ldr	r7, [r4, #4]
 800ab66:	3f01      	subs	r7, #1
 800ab68:	d501      	bpl.n	800ab6e <_fwalk_reent+0x22>
 800ab6a:	6824      	ldr	r4, [r4, #0]
 800ab6c:	e7f5      	b.n	800ab5a <_fwalk_reent+0xe>
 800ab6e:	89ab      	ldrh	r3, [r5, #12]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d907      	bls.n	800ab84 <_fwalk_reent+0x38>
 800ab74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	d003      	beq.n	800ab84 <_fwalk_reent+0x38>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	4640      	mov	r0, r8
 800ab80:	47c8      	blx	r9
 800ab82:	4306      	orrs	r6, r0
 800ab84:	3568      	adds	r5, #104	; 0x68
 800ab86:	e7ee      	b.n	800ab66 <_fwalk_reent+0x1a>

0800ab88 <_malloc_r>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	1ccd      	adds	r5, r1, #3
 800ab8c:	f025 0503 	bic.w	r5, r5, #3
 800ab90:	3508      	adds	r5, #8
 800ab92:	2d0c      	cmp	r5, #12
 800ab94:	bf38      	it	cc
 800ab96:	250c      	movcc	r5, #12
 800ab98:	2d00      	cmp	r5, #0
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	db01      	blt.n	800aba2 <_malloc_r+0x1a>
 800ab9e:	42a9      	cmp	r1, r5
 800aba0:	d903      	bls.n	800abaa <_malloc_r+0x22>
 800aba2:	230c      	movs	r3, #12
 800aba4:	6033      	str	r3, [r6, #0]
 800aba6:	2000      	movs	r0, #0
 800aba8:	bd70      	pop	{r4, r5, r6, pc}
 800abaa:	f000 fee9 	bl	800b980 <__malloc_lock>
 800abae:	4a23      	ldr	r2, [pc, #140]	; (800ac3c <_malloc_r+0xb4>)
 800abb0:	6814      	ldr	r4, [r2, #0]
 800abb2:	4621      	mov	r1, r4
 800abb4:	b991      	cbnz	r1, 800abdc <_malloc_r+0x54>
 800abb6:	4c22      	ldr	r4, [pc, #136]	; (800ac40 <_malloc_r+0xb8>)
 800abb8:	6823      	ldr	r3, [r4, #0]
 800abba:	b91b      	cbnz	r3, 800abc4 <_malloc_r+0x3c>
 800abbc:	4630      	mov	r0, r6
 800abbe:	f000 fc67 	bl	800b490 <_sbrk_r>
 800abc2:	6020      	str	r0, [r4, #0]
 800abc4:	4629      	mov	r1, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	f000 fc62 	bl	800b490 <_sbrk_r>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d126      	bne.n	800ac1e <_malloc_r+0x96>
 800abd0:	230c      	movs	r3, #12
 800abd2:	6033      	str	r3, [r6, #0]
 800abd4:	4630      	mov	r0, r6
 800abd6:	f000 fed4 	bl	800b982 <__malloc_unlock>
 800abda:	e7e4      	b.n	800aba6 <_malloc_r+0x1e>
 800abdc:	680b      	ldr	r3, [r1, #0]
 800abde:	1b5b      	subs	r3, r3, r5
 800abe0:	d41a      	bmi.n	800ac18 <_malloc_r+0x90>
 800abe2:	2b0b      	cmp	r3, #11
 800abe4:	d90f      	bls.n	800ac06 <_malloc_r+0x7e>
 800abe6:	600b      	str	r3, [r1, #0]
 800abe8:	50cd      	str	r5, [r1, r3]
 800abea:	18cc      	adds	r4, r1, r3
 800abec:	4630      	mov	r0, r6
 800abee:	f000 fec8 	bl	800b982 <__malloc_unlock>
 800abf2:	f104 000b 	add.w	r0, r4, #11
 800abf6:	1d23      	adds	r3, r4, #4
 800abf8:	f020 0007 	bic.w	r0, r0, #7
 800abfc:	1ac3      	subs	r3, r0, r3
 800abfe:	d01b      	beq.n	800ac38 <_malloc_r+0xb0>
 800ac00:	425a      	negs	r2, r3
 800ac02:	50e2      	str	r2, [r4, r3]
 800ac04:	bd70      	pop	{r4, r5, r6, pc}
 800ac06:	428c      	cmp	r4, r1
 800ac08:	bf0d      	iteet	eq
 800ac0a:	6863      	ldreq	r3, [r4, #4]
 800ac0c:	684b      	ldrne	r3, [r1, #4]
 800ac0e:	6063      	strne	r3, [r4, #4]
 800ac10:	6013      	streq	r3, [r2, #0]
 800ac12:	bf18      	it	ne
 800ac14:	460c      	movne	r4, r1
 800ac16:	e7e9      	b.n	800abec <_malloc_r+0x64>
 800ac18:	460c      	mov	r4, r1
 800ac1a:	6849      	ldr	r1, [r1, #4]
 800ac1c:	e7ca      	b.n	800abb4 <_malloc_r+0x2c>
 800ac1e:	1cc4      	adds	r4, r0, #3
 800ac20:	f024 0403 	bic.w	r4, r4, #3
 800ac24:	42a0      	cmp	r0, r4
 800ac26:	d005      	beq.n	800ac34 <_malloc_r+0xac>
 800ac28:	1a21      	subs	r1, r4, r0
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f000 fc30 	bl	800b490 <_sbrk_r>
 800ac30:	3001      	adds	r0, #1
 800ac32:	d0cd      	beq.n	800abd0 <_malloc_r+0x48>
 800ac34:	6025      	str	r5, [r4, #0]
 800ac36:	e7d9      	b.n	800abec <_malloc_r+0x64>
 800ac38:	bd70      	pop	{r4, r5, r6, pc}
 800ac3a:	bf00      	nop
 800ac3c:	200055dc 	.word	0x200055dc
 800ac40:	200055e0 	.word	0x200055e0

0800ac44 <__ssputs_r>:
 800ac44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	688e      	ldr	r6, [r1, #8]
 800ac4a:	429e      	cmp	r6, r3
 800ac4c:	4682      	mov	sl, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	4691      	mov	r9, r2
 800ac52:	4698      	mov	r8, r3
 800ac54:	d835      	bhi.n	800acc2 <__ssputs_r+0x7e>
 800ac56:	898a      	ldrh	r2, [r1, #12]
 800ac58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac5c:	d031      	beq.n	800acc2 <__ssputs_r+0x7e>
 800ac5e:	6825      	ldr	r5, [r4, #0]
 800ac60:	6909      	ldr	r1, [r1, #16]
 800ac62:	1a6f      	subs	r7, r5, r1
 800ac64:	6965      	ldr	r5, [r4, #20]
 800ac66:	2302      	movs	r3, #2
 800ac68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac6c:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac70:	f108 0301 	add.w	r3, r8, #1
 800ac74:	443b      	add	r3, r7
 800ac76:	429d      	cmp	r5, r3
 800ac78:	bf38      	it	cc
 800ac7a:	461d      	movcc	r5, r3
 800ac7c:	0553      	lsls	r3, r2, #21
 800ac7e:	d531      	bpl.n	800ace4 <__ssputs_r+0xa0>
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7ff ff81 	bl	800ab88 <_malloc_r>
 800ac86:	4606      	mov	r6, r0
 800ac88:	b950      	cbnz	r0, 800aca0 <__ssputs_r+0x5c>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	f8ca 3000 	str.w	r3, [sl]
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca0:	463a      	mov	r2, r7
 800aca2:	6921      	ldr	r1, [r4, #16]
 800aca4:	f7ff fe4f 	bl	800a946 <memcpy>
 800aca8:	89a3      	ldrh	r3, [r4, #12]
 800acaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acb2:	81a3      	strh	r3, [r4, #12]
 800acb4:	6126      	str	r6, [r4, #16]
 800acb6:	6165      	str	r5, [r4, #20]
 800acb8:	443e      	add	r6, r7
 800acba:	1bed      	subs	r5, r5, r7
 800acbc:	6026      	str	r6, [r4, #0]
 800acbe:	60a5      	str	r5, [r4, #8]
 800acc0:	4646      	mov	r6, r8
 800acc2:	4546      	cmp	r6, r8
 800acc4:	bf28      	it	cs
 800acc6:	4646      	movcs	r6, r8
 800acc8:	4632      	mov	r2, r6
 800acca:	4649      	mov	r1, r9
 800accc:	6820      	ldr	r0, [r4, #0]
 800acce:	f000 fe3d 	bl	800b94c <memmove>
 800acd2:	68a3      	ldr	r3, [r4, #8]
 800acd4:	1b9b      	subs	r3, r3, r6
 800acd6:	60a3      	str	r3, [r4, #8]
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	441e      	add	r6, r3
 800acdc:	6026      	str	r6, [r4, #0]
 800acde:	2000      	movs	r0, #0
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	462a      	mov	r2, r5
 800ace6:	f000 fe9b 	bl	800ba20 <_realloc_r>
 800acea:	4606      	mov	r6, r0
 800acec:	2800      	cmp	r0, #0
 800acee:	d1e1      	bne.n	800acb4 <__ssputs_r+0x70>
 800acf0:	6921      	ldr	r1, [r4, #16]
 800acf2:	4650      	mov	r0, sl
 800acf4:	f000 fe46 	bl	800b984 <_free_r>
 800acf8:	e7c7      	b.n	800ac8a <__ssputs_r+0x46>
	...

0800acfc <_svfiprintf_r>:
 800acfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad00:	b09d      	sub	sp, #116	; 0x74
 800ad02:	4680      	mov	r8, r0
 800ad04:	9303      	str	r3, [sp, #12]
 800ad06:	898b      	ldrh	r3, [r1, #12]
 800ad08:	061c      	lsls	r4, r3, #24
 800ad0a:	460d      	mov	r5, r1
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	d50f      	bpl.n	800ad30 <_svfiprintf_r+0x34>
 800ad10:	690b      	ldr	r3, [r1, #16]
 800ad12:	b96b      	cbnz	r3, 800ad30 <_svfiprintf_r+0x34>
 800ad14:	2140      	movs	r1, #64	; 0x40
 800ad16:	f7ff ff37 	bl	800ab88 <_malloc_r>
 800ad1a:	6028      	str	r0, [r5, #0]
 800ad1c:	6128      	str	r0, [r5, #16]
 800ad1e:	b928      	cbnz	r0, 800ad2c <_svfiprintf_r+0x30>
 800ad20:	230c      	movs	r3, #12
 800ad22:	f8c8 3000 	str.w	r3, [r8]
 800ad26:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2a:	e0c5      	b.n	800aeb8 <_svfiprintf_r+0x1bc>
 800ad2c:	2340      	movs	r3, #64	; 0x40
 800ad2e:	616b      	str	r3, [r5, #20]
 800ad30:	2300      	movs	r3, #0
 800ad32:	9309      	str	r3, [sp, #36]	; 0x24
 800ad34:	2320      	movs	r3, #32
 800ad36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad3a:	2330      	movs	r3, #48	; 0x30
 800ad3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad40:	f04f 0b01 	mov.w	fp, #1
 800ad44:	4637      	mov	r7, r6
 800ad46:	463c      	mov	r4, r7
 800ad48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d13c      	bne.n	800adca <_svfiprintf_r+0xce>
 800ad50:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad54:	d00b      	beq.n	800ad6e <_svfiprintf_r+0x72>
 800ad56:	4653      	mov	r3, sl
 800ad58:	4632      	mov	r2, r6
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	f7ff ff71 	bl	800ac44 <__ssputs_r>
 800ad62:	3001      	adds	r0, #1
 800ad64:	f000 80a3 	beq.w	800aeae <_svfiprintf_r+0x1b2>
 800ad68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6a:	4453      	add	r3, sl
 800ad6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6e:	783b      	ldrb	r3, [r7, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 809c 	beq.w	800aeae <_svfiprintf_r+0x1b2>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	9307      	str	r3, [sp, #28]
 800ad80:	9205      	str	r2, [sp, #20]
 800ad82:	9306      	str	r3, [sp, #24]
 800ad84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad88:	931a      	str	r3, [sp, #104]	; 0x68
 800ad8a:	2205      	movs	r2, #5
 800ad8c:	7821      	ldrb	r1, [r4, #0]
 800ad8e:	4850      	ldr	r0, [pc, #320]	; (800aed0 <_svfiprintf_r+0x1d4>)
 800ad90:	f7f5 fa36 	bl	8000200 <memchr>
 800ad94:	1c67      	adds	r7, r4, #1
 800ad96:	9b04      	ldr	r3, [sp, #16]
 800ad98:	b9d8      	cbnz	r0, 800add2 <_svfiprintf_r+0xd6>
 800ad9a:	06d9      	lsls	r1, r3, #27
 800ad9c:	bf44      	itt	mi
 800ad9e:	2220      	movmi	r2, #32
 800ada0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ada4:	071a      	lsls	r2, r3, #28
 800ada6:	bf44      	itt	mi
 800ada8:	222b      	movmi	r2, #43	; 0x2b
 800adaa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800adae:	7822      	ldrb	r2, [r4, #0]
 800adb0:	2a2a      	cmp	r2, #42	; 0x2a
 800adb2:	d016      	beq.n	800ade2 <_svfiprintf_r+0xe6>
 800adb4:	9a07      	ldr	r2, [sp, #28]
 800adb6:	2100      	movs	r1, #0
 800adb8:	200a      	movs	r0, #10
 800adba:	4627      	mov	r7, r4
 800adbc:	3401      	adds	r4, #1
 800adbe:	783b      	ldrb	r3, [r7, #0]
 800adc0:	3b30      	subs	r3, #48	; 0x30
 800adc2:	2b09      	cmp	r3, #9
 800adc4:	d951      	bls.n	800ae6a <_svfiprintf_r+0x16e>
 800adc6:	b1c9      	cbz	r1, 800adfc <_svfiprintf_r+0x100>
 800adc8:	e011      	b.n	800adee <_svfiprintf_r+0xf2>
 800adca:	2b25      	cmp	r3, #37	; 0x25
 800adcc:	d0c0      	beq.n	800ad50 <_svfiprintf_r+0x54>
 800adce:	4627      	mov	r7, r4
 800add0:	e7b9      	b.n	800ad46 <_svfiprintf_r+0x4a>
 800add2:	4a3f      	ldr	r2, [pc, #252]	; (800aed0 <_svfiprintf_r+0x1d4>)
 800add4:	1a80      	subs	r0, r0, r2
 800add6:	fa0b f000 	lsl.w	r0, fp, r0
 800adda:	4318      	orrs	r0, r3
 800addc:	9004      	str	r0, [sp, #16]
 800adde:	463c      	mov	r4, r7
 800ade0:	e7d3      	b.n	800ad8a <_svfiprintf_r+0x8e>
 800ade2:	9a03      	ldr	r2, [sp, #12]
 800ade4:	1d11      	adds	r1, r2, #4
 800ade6:	6812      	ldr	r2, [r2, #0]
 800ade8:	9103      	str	r1, [sp, #12]
 800adea:	2a00      	cmp	r2, #0
 800adec:	db01      	blt.n	800adf2 <_svfiprintf_r+0xf6>
 800adee:	9207      	str	r2, [sp, #28]
 800adf0:	e004      	b.n	800adfc <_svfiprintf_r+0x100>
 800adf2:	4252      	negs	r2, r2
 800adf4:	f043 0302 	orr.w	r3, r3, #2
 800adf8:	9207      	str	r2, [sp, #28]
 800adfa:	9304      	str	r3, [sp, #16]
 800adfc:	783b      	ldrb	r3, [r7, #0]
 800adfe:	2b2e      	cmp	r3, #46	; 0x2e
 800ae00:	d10e      	bne.n	800ae20 <_svfiprintf_r+0x124>
 800ae02:	787b      	ldrb	r3, [r7, #1]
 800ae04:	2b2a      	cmp	r3, #42	; 0x2a
 800ae06:	f107 0101 	add.w	r1, r7, #1
 800ae0a:	d132      	bne.n	800ae72 <_svfiprintf_r+0x176>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	1d1a      	adds	r2, r3, #4
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	9203      	str	r2, [sp, #12]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bfb8      	it	lt
 800ae18:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae1c:	3702      	adds	r7, #2
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	4c2c      	ldr	r4, [pc, #176]	; (800aed4 <_svfiprintf_r+0x1d8>)
 800ae22:	7839      	ldrb	r1, [r7, #0]
 800ae24:	2203      	movs	r2, #3
 800ae26:	4620      	mov	r0, r4
 800ae28:	f7f5 f9ea 	bl	8000200 <memchr>
 800ae2c:	b138      	cbz	r0, 800ae3e <_svfiprintf_r+0x142>
 800ae2e:	2340      	movs	r3, #64	; 0x40
 800ae30:	1b00      	subs	r0, r0, r4
 800ae32:	fa03 f000 	lsl.w	r0, r3, r0
 800ae36:	9b04      	ldr	r3, [sp, #16]
 800ae38:	4303      	orrs	r3, r0
 800ae3a:	9304      	str	r3, [sp, #16]
 800ae3c:	3701      	adds	r7, #1
 800ae3e:	7839      	ldrb	r1, [r7, #0]
 800ae40:	4825      	ldr	r0, [pc, #148]	; (800aed8 <_svfiprintf_r+0x1dc>)
 800ae42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae46:	2206      	movs	r2, #6
 800ae48:	1c7e      	adds	r6, r7, #1
 800ae4a:	f7f5 f9d9 	bl	8000200 <memchr>
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d035      	beq.n	800aebe <_svfiprintf_r+0x1c2>
 800ae52:	4b22      	ldr	r3, [pc, #136]	; (800aedc <_svfiprintf_r+0x1e0>)
 800ae54:	b9fb      	cbnz	r3, 800ae96 <_svfiprintf_r+0x19a>
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	3307      	adds	r3, #7
 800ae5a:	f023 0307 	bic.w	r3, r3, #7
 800ae5e:	3308      	adds	r3, #8
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae64:	444b      	add	r3, r9
 800ae66:	9309      	str	r3, [sp, #36]	; 0x24
 800ae68:	e76c      	b.n	800ad44 <_svfiprintf_r+0x48>
 800ae6a:	fb00 3202 	mla	r2, r0, r2, r3
 800ae6e:	2101      	movs	r1, #1
 800ae70:	e7a3      	b.n	800adba <_svfiprintf_r+0xbe>
 800ae72:	2300      	movs	r3, #0
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	4618      	mov	r0, r3
 800ae78:	240a      	movs	r4, #10
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	3101      	adds	r1, #1
 800ae7e:	783a      	ldrb	r2, [r7, #0]
 800ae80:	3a30      	subs	r2, #48	; 0x30
 800ae82:	2a09      	cmp	r2, #9
 800ae84:	d903      	bls.n	800ae8e <_svfiprintf_r+0x192>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0ca      	beq.n	800ae20 <_svfiprintf_r+0x124>
 800ae8a:	9005      	str	r0, [sp, #20]
 800ae8c:	e7c8      	b.n	800ae20 <_svfiprintf_r+0x124>
 800ae8e:	fb04 2000 	mla	r0, r4, r0, r2
 800ae92:	2301      	movs	r3, #1
 800ae94:	e7f1      	b.n	800ae7a <_svfiprintf_r+0x17e>
 800ae96:	ab03      	add	r3, sp, #12
 800ae98:	9300      	str	r3, [sp, #0]
 800ae9a:	462a      	mov	r2, r5
 800ae9c:	4b10      	ldr	r3, [pc, #64]	; (800aee0 <_svfiprintf_r+0x1e4>)
 800ae9e:	a904      	add	r1, sp, #16
 800aea0:	4640      	mov	r0, r8
 800aea2:	f3af 8000 	nop.w
 800aea6:	f1b0 3fff 	cmp.w	r0, #4294967295
 800aeaa:	4681      	mov	r9, r0
 800aeac:	d1d9      	bne.n	800ae62 <_svfiprintf_r+0x166>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	065b      	lsls	r3, r3, #25
 800aeb2:	f53f af38 	bmi.w	800ad26 <_svfiprintf_r+0x2a>
 800aeb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeb8:	b01d      	add	sp, #116	; 0x74
 800aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	ab03      	add	r3, sp, #12
 800aec0:	9300      	str	r3, [sp, #0]
 800aec2:	462a      	mov	r2, r5
 800aec4:	4b06      	ldr	r3, [pc, #24]	; (800aee0 <_svfiprintf_r+0x1e4>)
 800aec6:	a904      	add	r1, sp, #16
 800aec8:	4640      	mov	r0, r8
 800aeca:	f000 f9c1 	bl	800b250 <_printf_i>
 800aece:	e7ea      	b.n	800aea6 <_svfiprintf_r+0x1aa>
 800aed0:	0800da74 	.word	0x0800da74
 800aed4:	0800da7a 	.word	0x0800da7a
 800aed8:	0800da7e 	.word	0x0800da7e
 800aedc:	00000000 	.word	0x00000000
 800aee0:	0800ac45 	.word	0x0800ac45

0800aee4 <__sfputc_r>:
 800aee4:	6893      	ldr	r3, [r2, #8]
 800aee6:	3b01      	subs	r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	b410      	push	{r4}
 800aeec:	6093      	str	r3, [r2, #8]
 800aeee:	da09      	bge.n	800af04 <__sfputc_r+0x20>
 800aef0:	6994      	ldr	r4, [r2, #24]
 800aef2:	42a3      	cmp	r3, r4
 800aef4:	db02      	blt.n	800aefc <__sfputc_r+0x18>
 800aef6:	b2cb      	uxtb	r3, r1
 800aef8:	2b0a      	cmp	r3, #10
 800aefa:	d103      	bne.n	800af04 <__sfputc_r+0x20>
 800aefc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af00:	f000 bb1a 	b.w	800b538 <__swbuf_r>
 800af04:	6813      	ldr	r3, [r2, #0]
 800af06:	1c58      	adds	r0, r3, #1
 800af08:	6010      	str	r0, [r2, #0]
 800af0a:	7019      	strb	r1, [r3, #0]
 800af0c:	b2c8      	uxtb	r0, r1
 800af0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <__sfputs_r>:
 800af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af16:	4606      	mov	r6, r0
 800af18:	460f      	mov	r7, r1
 800af1a:	4614      	mov	r4, r2
 800af1c:	18d5      	adds	r5, r2, r3
 800af1e:	42ac      	cmp	r4, r5
 800af20:	d101      	bne.n	800af26 <__sfputs_r+0x12>
 800af22:	2000      	movs	r0, #0
 800af24:	e007      	b.n	800af36 <__sfputs_r+0x22>
 800af26:	463a      	mov	r2, r7
 800af28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7ff ffd9 	bl	800aee4 <__sfputc_r>
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	d1f3      	bne.n	800af1e <__sfputs_r+0xa>
 800af36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800af38 <_vfiprintf_r>:
 800af38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af3c:	b09d      	sub	sp, #116	; 0x74
 800af3e:	460c      	mov	r4, r1
 800af40:	4617      	mov	r7, r2
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	4606      	mov	r6, r0
 800af46:	b118      	cbz	r0, 800af50 <_vfiprintf_r+0x18>
 800af48:	6983      	ldr	r3, [r0, #24]
 800af4a:	b90b      	cbnz	r3, 800af50 <_vfiprintf_r+0x18>
 800af4c:	f7ff fd92 	bl	800aa74 <__sinit>
 800af50:	4b7c      	ldr	r3, [pc, #496]	; (800b144 <_vfiprintf_r+0x20c>)
 800af52:	429c      	cmp	r4, r3
 800af54:	d157      	bne.n	800b006 <_vfiprintf_r+0xce>
 800af56:	6874      	ldr	r4, [r6, #4]
 800af58:	89a3      	ldrh	r3, [r4, #12]
 800af5a:	0718      	lsls	r0, r3, #28
 800af5c:	d55d      	bpl.n	800b01a <_vfiprintf_r+0xe2>
 800af5e:	6923      	ldr	r3, [r4, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d05a      	beq.n	800b01a <_vfiprintf_r+0xe2>
 800af64:	2300      	movs	r3, #0
 800af66:	9309      	str	r3, [sp, #36]	; 0x24
 800af68:	2320      	movs	r3, #32
 800af6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af6e:	2330      	movs	r3, #48	; 0x30
 800af70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af74:	f04f 0b01 	mov.w	fp, #1
 800af78:	46b8      	mov	r8, r7
 800af7a:	4645      	mov	r5, r8
 800af7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800af80:	2b00      	cmp	r3, #0
 800af82:	d155      	bne.n	800b030 <_vfiprintf_r+0xf8>
 800af84:	ebb8 0a07 	subs.w	sl, r8, r7
 800af88:	d00b      	beq.n	800afa2 <_vfiprintf_r+0x6a>
 800af8a:	4653      	mov	r3, sl
 800af8c:	463a      	mov	r2, r7
 800af8e:	4621      	mov	r1, r4
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff ffbf 	bl	800af14 <__sfputs_r>
 800af96:	3001      	adds	r0, #1
 800af98:	f000 80c4 	beq.w	800b124 <_vfiprintf_r+0x1ec>
 800af9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9e:	4453      	add	r3, sl
 800afa0:	9309      	str	r3, [sp, #36]	; 0x24
 800afa2:	f898 3000 	ldrb.w	r3, [r8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80bc 	beq.w	800b124 <_vfiprintf_r+0x1ec>
 800afac:	2300      	movs	r3, #0
 800afae:	f04f 32ff 	mov.w	r2, #4294967295
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	9307      	str	r3, [sp, #28]
 800afb6:	9205      	str	r2, [sp, #20]
 800afb8:	9306      	str	r3, [sp, #24]
 800afba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800afbe:	931a      	str	r3, [sp, #104]	; 0x68
 800afc0:	2205      	movs	r2, #5
 800afc2:	7829      	ldrb	r1, [r5, #0]
 800afc4:	4860      	ldr	r0, [pc, #384]	; (800b148 <_vfiprintf_r+0x210>)
 800afc6:	f7f5 f91b 	bl	8000200 <memchr>
 800afca:	f105 0801 	add.w	r8, r5, #1
 800afce:	9b04      	ldr	r3, [sp, #16]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d131      	bne.n	800b038 <_vfiprintf_r+0x100>
 800afd4:	06d9      	lsls	r1, r3, #27
 800afd6:	bf44      	itt	mi
 800afd8:	2220      	movmi	r2, #32
 800afda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800afde:	071a      	lsls	r2, r3, #28
 800afe0:	bf44      	itt	mi
 800afe2:	222b      	movmi	r2, #43	; 0x2b
 800afe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800afe8:	782a      	ldrb	r2, [r5, #0]
 800afea:	2a2a      	cmp	r2, #42	; 0x2a
 800afec:	d02c      	beq.n	800b048 <_vfiprintf_r+0x110>
 800afee:	9a07      	ldr	r2, [sp, #28]
 800aff0:	2100      	movs	r1, #0
 800aff2:	200a      	movs	r0, #10
 800aff4:	46a8      	mov	r8, r5
 800aff6:	3501      	adds	r5, #1
 800aff8:	f898 3000 	ldrb.w	r3, [r8]
 800affc:	3b30      	subs	r3, #48	; 0x30
 800affe:	2b09      	cmp	r3, #9
 800b000:	d96d      	bls.n	800b0de <_vfiprintf_r+0x1a6>
 800b002:	b371      	cbz	r1, 800b062 <_vfiprintf_r+0x12a>
 800b004:	e026      	b.n	800b054 <_vfiprintf_r+0x11c>
 800b006:	4b51      	ldr	r3, [pc, #324]	; (800b14c <_vfiprintf_r+0x214>)
 800b008:	429c      	cmp	r4, r3
 800b00a:	d101      	bne.n	800b010 <_vfiprintf_r+0xd8>
 800b00c:	68b4      	ldr	r4, [r6, #8]
 800b00e:	e7a3      	b.n	800af58 <_vfiprintf_r+0x20>
 800b010:	4b4f      	ldr	r3, [pc, #316]	; (800b150 <_vfiprintf_r+0x218>)
 800b012:	429c      	cmp	r4, r3
 800b014:	bf08      	it	eq
 800b016:	68f4      	ldreq	r4, [r6, #12]
 800b018:	e79e      	b.n	800af58 <_vfiprintf_r+0x20>
 800b01a:	4621      	mov	r1, r4
 800b01c:	4630      	mov	r0, r6
 800b01e:	f000 faef 	bl	800b600 <__swsetup_r>
 800b022:	2800      	cmp	r0, #0
 800b024:	d09e      	beq.n	800af64 <_vfiprintf_r+0x2c>
 800b026:	f04f 30ff 	mov.w	r0, #4294967295
 800b02a:	b01d      	add	sp, #116	; 0x74
 800b02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b030:	2b25      	cmp	r3, #37	; 0x25
 800b032:	d0a7      	beq.n	800af84 <_vfiprintf_r+0x4c>
 800b034:	46a8      	mov	r8, r5
 800b036:	e7a0      	b.n	800af7a <_vfiprintf_r+0x42>
 800b038:	4a43      	ldr	r2, [pc, #268]	; (800b148 <_vfiprintf_r+0x210>)
 800b03a:	1a80      	subs	r0, r0, r2
 800b03c:	fa0b f000 	lsl.w	r0, fp, r0
 800b040:	4318      	orrs	r0, r3
 800b042:	9004      	str	r0, [sp, #16]
 800b044:	4645      	mov	r5, r8
 800b046:	e7bb      	b.n	800afc0 <_vfiprintf_r+0x88>
 800b048:	9a03      	ldr	r2, [sp, #12]
 800b04a:	1d11      	adds	r1, r2, #4
 800b04c:	6812      	ldr	r2, [r2, #0]
 800b04e:	9103      	str	r1, [sp, #12]
 800b050:	2a00      	cmp	r2, #0
 800b052:	db01      	blt.n	800b058 <_vfiprintf_r+0x120>
 800b054:	9207      	str	r2, [sp, #28]
 800b056:	e004      	b.n	800b062 <_vfiprintf_r+0x12a>
 800b058:	4252      	negs	r2, r2
 800b05a:	f043 0302 	orr.w	r3, r3, #2
 800b05e:	9207      	str	r2, [sp, #28]
 800b060:	9304      	str	r3, [sp, #16]
 800b062:	f898 3000 	ldrb.w	r3, [r8]
 800b066:	2b2e      	cmp	r3, #46	; 0x2e
 800b068:	d110      	bne.n	800b08c <_vfiprintf_r+0x154>
 800b06a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b06e:	2b2a      	cmp	r3, #42	; 0x2a
 800b070:	f108 0101 	add.w	r1, r8, #1
 800b074:	d137      	bne.n	800b0e6 <_vfiprintf_r+0x1ae>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	1d1a      	adds	r2, r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	9203      	str	r2, [sp, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bfb8      	it	lt
 800b082:	f04f 33ff 	movlt.w	r3, #4294967295
 800b086:	f108 0802 	add.w	r8, r8, #2
 800b08a:	9305      	str	r3, [sp, #20]
 800b08c:	4d31      	ldr	r5, [pc, #196]	; (800b154 <_vfiprintf_r+0x21c>)
 800b08e:	f898 1000 	ldrb.w	r1, [r8]
 800b092:	2203      	movs	r2, #3
 800b094:	4628      	mov	r0, r5
 800b096:	f7f5 f8b3 	bl	8000200 <memchr>
 800b09a:	b140      	cbz	r0, 800b0ae <_vfiprintf_r+0x176>
 800b09c:	2340      	movs	r3, #64	; 0x40
 800b09e:	1b40      	subs	r0, r0, r5
 800b0a0:	fa03 f000 	lsl.w	r0, r3, r0
 800b0a4:	9b04      	ldr	r3, [sp, #16]
 800b0a6:	4303      	orrs	r3, r0
 800b0a8:	9304      	str	r3, [sp, #16]
 800b0aa:	f108 0801 	add.w	r8, r8, #1
 800b0ae:	f898 1000 	ldrb.w	r1, [r8]
 800b0b2:	4829      	ldr	r0, [pc, #164]	; (800b158 <_vfiprintf_r+0x220>)
 800b0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0b8:	2206      	movs	r2, #6
 800b0ba:	f108 0701 	add.w	r7, r8, #1
 800b0be:	f7f5 f89f 	bl	8000200 <memchr>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d034      	beq.n	800b130 <_vfiprintf_r+0x1f8>
 800b0c6:	4b25      	ldr	r3, [pc, #148]	; (800b15c <_vfiprintf_r+0x224>)
 800b0c8:	bb03      	cbnz	r3, 800b10c <_vfiprintf_r+0x1d4>
 800b0ca:	9b03      	ldr	r3, [sp, #12]
 800b0cc:	3307      	adds	r3, #7
 800b0ce:	f023 0307 	bic.w	r3, r3, #7
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	9303      	str	r3, [sp, #12]
 800b0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d8:	444b      	add	r3, r9
 800b0da:	9309      	str	r3, [sp, #36]	; 0x24
 800b0dc:	e74c      	b.n	800af78 <_vfiprintf_r+0x40>
 800b0de:	fb00 3202 	mla	r2, r0, r2, r3
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	e786      	b.n	800aff4 <_vfiprintf_r+0xbc>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	250a      	movs	r5, #10
 800b0ee:	4688      	mov	r8, r1
 800b0f0:	3101      	adds	r1, #1
 800b0f2:	f898 2000 	ldrb.w	r2, [r8]
 800b0f6:	3a30      	subs	r2, #48	; 0x30
 800b0f8:	2a09      	cmp	r2, #9
 800b0fa:	d903      	bls.n	800b104 <_vfiprintf_r+0x1cc>
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0c5      	beq.n	800b08c <_vfiprintf_r+0x154>
 800b100:	9005      	str	r0, [sp, #20]
 800b102:	e7c3      	b.n	800b08c <_vfiprintf_r+0x154>
 800b104:	fb05 2000 	mla	r0, r5, r0, r2
 800b108:	2301      	movs	r3, #1
 800b10a:	e7f0      	b.n	800b0ee <_vfiprintf_r+0x1b6>
 800b10c:	ab03      	add	r3, sp, #12
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	4622      	mov	r2, r4
 800b112:	4b13      	ldr	r3, [pc, #76]	; (800b160 <_vfiprintf_r+0x228>)
 800b114:	a904      	add	r1, sp, #16
 800b116:	4630      	mov	r0, r6
 800b118:	f3af 8000 	nop.w
 800b11c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b120:	4681      	mov	r9, r0
 800b122:	d1d8      	bne.n	800b0d6 <_vfiprintf_r+0x19e>
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	065b      	lsls	r3, r3, #25
 800b128:	f53f af7d 	bmi.w	800b026 <_vfiprintf_r+0xee>
 800b12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b12e:	e77c      	b.n	800b02a <_vfiprintf_r+0xf2>
 800b130:	ab03      	add	r3, sp, #12
 800b132:	9300      	str	r3, [sp, #0]
 800b134:	4622      	mov	r2, r4
 800b136:	4b0a      	ldr	r3, [pc, #40]	; (800b160 <_vfiprintf_r+0x228>)
 800b138:	a904      	add	r1, sp, #16
 800b13a:	4630      	mov	r0, r6
 800b13c:	f000 f888 	bl	800b250 <_printf_i>
 800b140:	e7ec      	b.n	800b11c <_vfiprintf_r+0x1e4>
 800b142:	bf00      	nop
 800b144:	0800da30 	.word	0x0800da30
 800b148:	0800da74 	.word	0x0800da74
 800b14c:	0800da50 	.word	0x0800da50
 800b150:	0800da10 	.word	0x0800da10
 800b154:	0800da7a 	.word	0x0800da7a
 800b158:	0800da7e 	.word	0x0800da7e
 800b15c:	00000000 	.word	0x00000000
 800b160:	0800af15 	.word	0x0800af15

0800b164 <_printf_common>:
 800b164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b168:	4691      	mov	r9, r2
 800b16a:	461f      	mov	r7, r3
 800b16c:	688a      	ldr	r2, [r1, #8]
 800b16e:	690b      	ldr	r3, [r1, #16]
 800b170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b174:	4293      	cmp	r3, r2
 800b176:	bfb8      	it	lt
 800b178:	4613      	movlt	r3, r2
 800b17a:	f8c9 3000 	str.w	r3, [r9]
 800b17e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b182:	4606      	mov	r6, r0
 800b184:	460c      	mov	r4, r1
 800b186:	b112      	cbz	r2, 800b18e <_printf_common+0x2a>
 800b188:	3301      	adds	r3, #1
 800b18a:	f8c9 3000 	str.w	r3, [r9]
 800b18e:	6823      	ldr	r3, [r4, #0]
 800b190:	0699      	lsls	r1, r3, #26
 800b192:	bf42      	ittt	mi
 800b194:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b198:	3302      	addmi	r3, #2
 800b19a:	f8c9 3000 	strmi.w	r3, [r9]
 800b19e:	6825      	ldr	r5, [r4, #0]
 800b1a0:	f015 0506 	ands.w	r5, r5, #6
 800b1a4:	d107      	bne.n	800b1b6 <_printf_common+0x52>
 800b1a6:	f104 0a19 	add.w	sl, r4, #25
 800b1aa:	68e3      	ldr	r3, [r4, #12]
 800b1ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b1b0:	1a9b      	subs	r3, r3, r2
 800b1b2:	429d      	cmp	r5, r3
 800b1b4:	db29      	blt.n	800b20a <_printf_common+0xa6>
 800b1b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b1ba:	6822      	ldr	r2, [r4, #0]
 800b1bc:	3300      	adds	r3, #0
 800b1be:	bf18      	it	ne
 800b1c0:	2301      	movne	r3, #1
 800b1c2:	0692      	lsls	r2, r2, #26
 800b1c4:	d42e      	bmi.n	800b224 <_printf_common+0xc0>
 800b1c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	47c0      	blx	r8
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d021      	beq.n	800b218 <_printf_common+0xb4>
 800b1d4:	6823      	ldr	r3, [r4, #0]
 800b1d6:	68e5      	ldr	r5, [r4, #12]
 800b1d8:	f8d9 2000 	ldr.w	r2, [r9]
 800b1dc:	f003 0306 	and.w	r3, r3, #6
 800b1e0:	2b04      	cmp	r3, #4
 800b1e2:	bf08      	it	eq
 800b1e4:	1aad      	subeq	r5, r5, r2
 800b1e6:	68a3      	ldr	r3, [r4, #8]
 800b1e8:	6922      	ldr	r2, [r4, #16]
 800b1ea:	bf0c      	ite	eq
 800b1ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1f0:	2500      	movne	r5, #0
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	bfc4      	itt	gt
 800b1f6:	1a9b      	subgt	r3, r3, r2
 800b1f8:	18ed      	addgt	r5, r5, r3
 800b1fa:	f04f 0900 	mov.w	r9, #0
 800b1fe:	341a      	adds	r4, #26
 800b200:	454d      	cmp	r5, r9
 800b202:	d11b      	bne.n	800b23c <_printf_common+0xd8>
 800b204:	2000      	movs	r0, #0
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20a:	2301      	movs	r3, #1
 800b20c:	4652      	mov	r2, sl
 800b20e:	4639      	mov	r1, r7
 800b210:	4630      	mov	r0, r6
 800b212:	47c0      	blx	r8
 800b214:	3001      	adds	r0, #1
 800b216:	d103      	bne.n	800b220 <_printf_common+0xbc>
 800b218:	f04f 30ff 	mov.w	r0, #4294967295
 800b21c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b220:	3501      	adds	r5, #1
 800b222:	e7c2      	b.n	800b1aa <_printf_common+0x46>
 800b224:	18e1      	adds	r1, r4, r3
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	2030      	movs	r0, #48	; 0x30
 800b22a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b22e:	4422      	add	r2, r4
 800b230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b238:	3302      	adds	r3, #2
 800b23a:	e7c4      	b.n	800b1c6 <_printf_common+0x62>
 800b23c:	2301      	movs	r3, #1
 800b23e:	4622      	mov	r2, r4
 800b240:	4639      	mov	r1, r7
 800b242:	4630      	mov	r0, r6
 800b244:	47c0      	blx	r8
 800b246:	3001      	adds	r0, #1
 800b248:	d0e6      	beq.n	800b218 <_printf_common+0xb4>
 800b24a:	f109 0901 	add.w	r9, r9, #1
 800b24e:	e7d7      	b.n	800b200 <_printf_common+0x9c>

0800b250 <_printf_i>:
 800b250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b254:	4617      	mov	r7, r2
 800b256:	7e0a      	ldrb	r2, [r1, #24]
 800b258:	b085      	sub	sp, #20
 800b25a:	2a6e      	cmp	r2, #110	; 0x6e
 800b25c:	4698      	mov	r8, r3
 800b25e:	4606      	mov	r6, r0
 800b260:	460c      	mov	r4, r1
 800b262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b264:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800b268:	f000 80bc 	beq.w	800b3e4 <_printf_i+0x194>
 800b26c:	d81a      	bhi.n	800b2a4 <_printf_i+0x54>
 800b26e:	2a63      	cmp	r2, #99	; 0x63
 800b270:	d02e      	beq.n	800b2d0 <_printf_i+0x80>
 800b272:	d80a      	bhi.n	800b28a <_printf_i+0x3a>
 800b274:	2a00      	cmp	r2, #0
 800b276:	f000 80c8 	beq.w	800b40a <_printf_i+0x1ba>
 800b27a:	2a58      	cmp	r2, #88	; 0x58
 800b27c:	f000 808a 	beq.w	800b394 <_printf_i+0x144>
 800b280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b284:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b288:	e02a      	b.n	800b2e0 <_printf_i+0x90>
 800b28a:	2a64      	cmp	r2, #100	; 0x64
 800b28c:	d001      	beq.n	800b292 <_printf_i+0x42>
 800b28e:	2a69      	cmp	r2, #105	; 0x69
 800b290:	d1f6      	bne.n	800b280 <_printf_i+0x30>
 800b292:	6821      	ldr	r1, [r4, #0]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b29a:	d023      	beq.n	800b2e4 <_printf_i+0x94>
 800b29c:	1d11      	adds	r1, r2, #4
 800b29e:	6019      	str	r1, [r3, #0]
 800b2a0:	6813      	ldr	r3, [r2, #0]
 800b2a2:	e027      	b.n	800b2f4 <_printf_i+0xa4>
 800b2a4:	2a73      	cmp	r2, #115	; 0x73
 800b2a6:	f000 80b4 	beq.w	800b412 <_printf_i+0x1c2>
 800b2aa:	d808      	bhi.n	800b2be <_printf_i+0x6e>
 800b2ac:	2a6f      	cmp	r2, #111	; 0x6f
 800b2ae:	d02a      	beq.n	800b306 <_printf_i+0xb6>
 800b2b0:	2a70      	cmp	r2, #112	; 0x70
 800b2b2:	d1e5      	bne.n	800b280 <_printf_i+0x30>
 800b2b4:	680a      	ldr	r2, [r1, #0]
 800b2b6:	f042 0220 	orr.w	r2, r2, #32
 800b2ba:	600a      	str	r2, [r1, #0]
 800b2bc:	e003      	b.n	800b2c6 <_printf_i+0x76>
 800b2be:	2a75      	cmp	r2, #117	; 0x75
 800b2c0:	d021      	beq.n	800b306 <_printf_i+0xb6>
 800b2c2:	2a78      	cmp	r2, #120	; 0x78
 800b2c4:	d1dc      	bne.n	800b280 <_printf_i+0x30>
 800b2c6:	2278      	movs	r2, #120	; 0x78
 800b2c8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b2cc:	496e      	ldr	r1, [pc, #440]	; (800b488 <_printf_i+0x238>)
 800b2ce:	e064      	b.n	800b39a <_printf_i+0x14a>
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b2d6:	1d11      	adds	r1, r2, #4
 800b2d8:	6019      	str	r1, [r3, #0]
 800b2da:	6813      	ldr	r3, [r2, #0]
 800b2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e0a3      	b.n	800b42c <_printf_i+0x1dc>
 800b2e4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b2e8:	f102 0104 	add.w	r1, r2, #4
 800b2ec:	6019      	str	r1, [r3, #0]
 800b2ee:	d0d7      	beq.n	800b2a0 <_printf_i+0x50>
 800b2f0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da03      	bge.n	800b300 <_printf_i+0xb0>
 800b2f8:	222d      	movs	r2, #45	; 0x2d
 800b2fa:	425b      	negs	r3, r3
 800b2fc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b300:	4962      	ldr	r1, [pc, #392]	; (800b48c <_printf_i+0x23c>)
 800b302:	220a      	movs	r2, #10
 800b304:	e017      	b.n	800b336 <_printf_i+0xe6>
 800b306:	6820      	ldr	r0, [r4, #0]
 800b308:	6819      	ldr	r1, [r3, #0]
 800b30a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b30e:	d003      	beq.n	800b318 <_printf_i+0xc8>
 800b310:	1d08      	adds	r0, r1, #4
 800b312:	6018      	str	r0, [r3, #0]
 800b314:	680b      	ldr	r3, [r1, #0]
 800b316:	e006      	b.n	800b326 <_printf_i+0xd6>
 800b318:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b31c:	f101 0004 	add.w	r0, r1, #4
 800b320:	6018      	str	r0, [r3, #0]
 800b322:	d0f7      	beq.n	800b314 <_printf_i+0xc4>
 800b324:	880b      	ldrh	r3, [r1, #0]
 800b326:	4959      	ldr	r1, [pc, #356]	; (800b48c <_printf_i+0x23c>)
 800b328:	2a6f      	cmp	r2, #111	; 0x6f
 800b32a:	bf14      	ite	ne
 800b32c:	220a      	movne	r2, #10
 800b32e:	2208      	moveq	r2, #8
 800b330:	2000      	movs	r0, #0
 800b332:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800b336:	6865      	ldr	r5, [r4, #4]
 800b338:	60a5      	str	r5, [r4, #8]
 800b33a:	2d00      	cmp	r5, #0
 800b33c:	f2c0 809c 	blt.w	800b478 <_printf_i+0x228>
 800b340:	6820      	ldr	r0, [r4, #0]
 800b342:	f020 0004 	bic.w	r0, r0, #4
 800b346:	6020      	str	r0, [r4, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d13f      	bne.n	800b3cc <_printf_i+0x17c>
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	f040 8095 	bne.w	800b47c <_printf_i+0x22c>
 800b352:	4675      	mov	r5, lr
 800b354:	2a08      	cmp	r2, #8
 800b356:	d10b      	bne.n	800b370 <_printf_i+0x120>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	07da      	lsls	r2, r3, #31
 800b35c:	d508      	bpl.n	800b370 <_printf_i+0x120>
 800b35e:	6923      	ldr	r3, [r4, #16]
 800b360:	6862      	ldr	r2, [r4, #4]
 800b362:	429a      	cmp	r2, r3
 800b364:	bfde      	ittt	le
 800b366:	2330      	movle	r3, #48	; 0x30
 800b368:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b36c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b370:	ebae 0305 	sub.w	r3, lr, r5
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	f8cd 8000 	str.w	r8, [sp]
 800b37a:	463b      	mov	r3, r7
 800b37c:	aa03      	add	r2, sp, #12
 800b37e:	4621      	mov	r1, r4
 800b380:	4630      	mov	r0, r6
 800b382:	f7ff feef 	bl	800b164 <_printf_common>
 800b386:	3001      	adds	r0, #1
 800b388:	d155      	bne.n	800b436 <_printf_i+0x1e6>
 800b38a:	f04f 30ff 	mov.w	r0, #4294967295
 800b38e:	b005      	add	sp, #20
 800b390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b394:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800b398:	493c      	ldr	r1, [pc, #240]	; (800b48c <_printf_i+0x23c>)
 800b39a:	6822      	ldr	r2, [r4, #0]
 800b39c:	6818      	ldr	r0, [r3, #0]
 800b39e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b3a2:	f100 0504 	add.w	r5, r0, #4
 800b3a6:	601d      	str	r5, [r3, #0]
 800b3a8:	d001      	beq.n	800b3ae <_printf_i+0x15e>
 800b3aa:	6803      	ldr	r3, [r0, #0]
 800b3ac:	e002      	b.n	800b3b4 <_printf_i+0x164>
 800b3ae:	0655      	lsls	r5, r2, #25
 800b3b0:	d5fb      	bpl.n	800b3aa <_printf_i+0x15a>
 800b3b2:	8803      	ldrh	r3, [r0, #0]
 800b3b4:	07d0      	lsls	r0, r2, #31
 800b3b6:	bf44      	itt	mi
 800b3b8:	f042 0220 	orrmi.w	r2, r2, #32
 800b3bc:	6022      	strmi	r2, [r4, #0]
 800b3be:	b91b      	cbnz	r3, 800b3c8 <_printf_i+0x178>
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	f022 0220 	bic.w	r2, r2, #32
 800b3c6:	6022      	str	r2, [r4, #0]
 800b3c8:	2210      	movs	r2, #16
 800b3ca:	e7b1      	b.n	800b330 <_printf_i+0xe0>
 800b3cc:	4675      	mov	r5, lr
 800b3ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800b3d2:	fb02 3310 	mls	r3, r2, r0, r3
 800b3d6:	5ccb      	ldrb	r3, [r1, r3]
 800b3d8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d1f5      	bne.n	800b3ce <_printf_i+0x17e>
 800b3e2:	e7b7      	b.n	800b354 <_printf_i+0x104>
 800b3e4:	6808      	ldr	r0, [r1, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	6949      	ldr	r1, [r1, #20]
 800b3ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b3ee:	d004      	beq.n	800b3fa <_printf_i+0x1aa>
 800b3f0:	1d10      	adds	r0, r2, #4
 800b3f2:	6018      	str	r0, [r3, #0]
 800b3f4:	6813      	ldr	r3, [r2, #0]
 800b3f6:	6019      	str	r1, [r3, #0]
 800b3f8:	e007      	b.n	800b40a <_printf_i+0x1ba>
 800b3fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3fe:	f102 0004 	add.w	r0, r2, #4
 800b402:	6018      	str	r0, [r3, #0]
 800b404:	6813      	ldr	r3, [r2, #0]
 800b406:	d0f6      	beq.n	800b3f6 <_printf_i+0x1a6>
 800b408:	8019      	strh	r1, [r3, #0]
 800b40a:	2300      	movs	r3, #0
 800b40c:	6123      	str	r3, [r4, #16]
 800b40e:	4675      	mov	r5, lr
 800b410:	e7b1      	b.n	800b376 <_printf_i+0x126>
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	1d11      	adds	r1, r2, #4
 800b416:	6019      	str	r1, [r3, #0]
 800b418:	6815      	ldr	r5, [r2, #0]
 800b41a:	6862      	ldr	r2, [r4, #4]
 800b41c:	2100      	movs	r1, #0
 800b41e:	4628      	mov	r0, r5
 800b420:	f7f4 feee 	bl	8000200 <memchr>
 800b424:	b108      	cbz	r0, 800b42a <_printf_i+0x1da>
 800b426:	1b40      	subs	r0, r0, r5
 800b428:	6060      	str	r0, [r4, #4]
 800b42a:	6863      	ldr	r3, [r4, #4]
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	2300      	movs	r3, #0
 800b430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b434:	e79f      	b.n	800b376 <_printf_i+0x126>
 800b436:	6923      	ldr	r3, [r4, #16]
 800b438:	462a      	mov	r2, r5
 800b43a:	4639      	mov	r1, r7
 800b43c:	4630      	mov	r0, r6
 800b43e:	47c0      	blx	r8
 800b440:	3001      	adds	r0, #1
 800b442:	d0a2      	beq.n	800b38a <_printf_i+0x13a>
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	079b      	lsls	r3, r3, #30
 800b448:	d507      	bpl.n	800b45a <_printf_i+0x20a>
 800b44a:	2500      	movs	r5, #0
 800b44c:	f104 0919 	add.w	r9, r4, #25
 800b450:	68e3      	ldr	r3, [r4, #12]
 800b452:	9a03      	ldr	r2, [sp, #12]
 800b454:	1a9b      	subs	r3, r3, r2
 800b456:	429d      	cmp	r5, r3
 800b458:	db05      	blt.n	800b466 <_printf_i+0x216>
 800b45a:	68e0      	ldr	r0, [r4, #12]
 800b45c:	9b03      	ldr	r3, [sp, #12]
 800b45e:	4298      	cmp	r0, r3
 800b460:	bfb8      	it	lt
 800b462:	4618      	movlt	r0, r3
 800b464:	e793      	b.n	800b38e <_printf_i+0x13e>
 800b466:	2301      	movs	r3, #1
 800b468:	464a      	mov	r2, r9
 800b46a:	4639      	mov	r1, r7
 800b46c:	4630      	mov	r0, r6
 800b46e:	47c0      	blx	r8
 800b470:	3001      	adds	r0, #1
 800b472:	d08a      	beq.n	800b38a <_printf_i+0x13a>
 800b474:	3501      	adds	r5, #1
 800b476:	e7eb      	b.n	800b450 <_printf_i+0x200>
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1a7      	bne.n	800b3cc <_printf_i+0x17c>
 800b47c:	780b      	ldrb	r3, [r1, #0]
 800b47e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b482:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b486:	e765      	b.n	800b354 <_printf_i+0x104>
 800b488:	0800da96 	.word	0x0800da96
 800b48c:	0800da85 	.word	0x0800da85

0800b490 <_sbrk_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4c06      	ldr	r4, [pc, #24]	; (800b4ac <_sbrk_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4605      	mov	r5, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	6023      	str	r3, [r4, #0]
 800b49c:	f7ff f9c2 	bl	800a824 <_sbrk>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_sbrk_r+0x1a>
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_sbrk_r+0x1a>
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	2000d940 	.word	0x2000d940

0800b4b0 <__sread>:
 800b4b0:	b510      	push	{r4, lr}
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b8:	f000 fad8 	bl	800ba6c <_read_r>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	bfab      	itete	ge
 800b4c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4c2:	89a3      	ldrhlt	r3, [r4, #12]
 800b4c4:	181b      	addge	r3, r3, r0
 800b4c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4ca:	bfac      	ite	ge
 800b4cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4ce:	81a3      	strhlt	r3, [r4, #12]
 800b4d0:	bd10      	pop	{r4, pc}

0800b4d2 <__swrite>:
 800b4d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d6:	461f      	mov	r7, r3
 800b4d8:	898b      	ldrh	r3, [r1, #12]
 800b4da:	05db      	lsls	r3, r3, #23
 800b4dc:	4605      	mov	r5, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	d505      	bpl.n	800b4f0 <__swrite+0x1e>
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	f000 f9b8 	bl	800b860 <_lseek_r>
 800b4f0:	89a3      	ldrh	r3, [r4, #12]
 800b4f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4fa:	81a3      	strh	r3, [r4, #12]
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	463b      	mov	r3, r7
 800b500:	4628      	mov	r0, r5
 800b502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b506:	f000 b869 	b.w	800b5dc <_write_r>

0800b50a <__sseek>:
 800b50a:	b510      	push	{r4, lr}
 800b50c:	460c      	mov	r4, r1
 800b50e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b512:	f000 f9a5 	bl	800b860 <_lseek_r>
 800b516:	1c43      	adds	r3, r0, #1
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	bf15      	itete	ne
 800b51c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b51e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b526:	81a3      	strheq	r3, [r4, #12]
 800b528:	bf18      	it	ne
 800b52a:	81a3      	strhne	r3, [r4, #12]
 800b52c:	bd10      	pop	{r4, pc}

0800b52e <__sclose>:
 800b52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b532:	f000 b8d3 	b.w	800b6dc <_close_r>
	...

0800b538 <__swbuf_r>:
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53a:	460e      	mov	r6, r1
 800b53c:	4614      	mov	r4, r2
 800b53e:	4605      	mov	r5, r0
 800b540:	b118      	cbz	r0, 800b54a <__swbuf_r+0x12>
 800b542:	6983      	ldr	r3, [r0, #24]
 800b544:	b90b      	cbnz	r3, 800b54a <__swbuf_r+0x12>
 800b546:	f7ff fa95 	bl	800aa74 <__sinit>
 800b54a:	4b21      	ldr	r3, [pc, #132]	; (800b5d0 <__swbuf_r+0x98>)
 800b54c:	429c      	cmp	r4, r3
 800b54e:	d12a      	bne.n	800b5a6 <__swbuf_r+0x6e>
 800b550:	686c      	ldr	r4, [r5, #4]
 800b552:	69a3      	ldr	r3, [r4, #24]
 800b554:	60a3      	str	r3, [r4, #8]
 800b556:	89a3      	ldrh	r3, [r4, #12]
 800b558:	071a      	lsls	r2, r3, #28
 800b55a:	d52e      	bpl.n	800b5ba <__swbuf_r+0x82>
 800b55c:	6923      	ldr	r3, [r4, #16]
 800b55e:	b363      	cbz	r3, 800b5ba <__swbuf_r+0x82>
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	6820      	ldr	r0, [r4, #0]
 800b564:	1ac0      	subs	r0, r0, r3
 800b566:	6963      	ldr	r3, [r4, #20]
 800b568:	b2f6      	uxtb	r6, r6
 800b56a:	4298      	cmp	r0, r3
 800b56c:	4637      	mov	r7, r6
 800b56e:	db04      	blt.n	800b57a <__swbuf_r+0x42>
 800b570:	4621      	mov	r1, r4
 800b572:	4628      	mov	r0, r5
 800b574:	f000 f94a 	bl	800b80c <_fflush_r>
 800b578:	bb28      	cbnz	r0, 800b5c6 <__swbuf_r+0x8e>
 800b57a:	68a3      	ldr	r3, [r4, #8]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	60a3      	str	r3, [r4, #8]
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	1c5a      	adds	r2, r3, #1
 800b584:	6022      	str	r2, [r4, #0]
 800b586:	701e      	strb	r6, [r3, #0]
 800b588:	6963      	ldr	r3, [r4, #20]
 800b58a:	3001      	adds	r0, #1
 800b58c:	4298      	cmp	r0, r3
 800b58e:	d004      	beq.n	800b59a <__swbuf_r+0x62>
 800b590:	89a3      	ldrh	r3, [r4, #12]
 800b592:	07db      	lsls	r3, r3, #31
 800b594:	d519      	bpl.n	800b5ca <__swbuf_r+0x92>
 800b596:	2e0a      	cmp	r6, #10
 800b598:	d117      	bne.n	800b5ca <__swbuf_r+0x92>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4628      	mov	r0, r5
 800b59e:	f000 f935 	bl	800b80c <_fflush_r>
 800b5a2:	b190      	cbz	r0, 800b5ca <__swbuf_r+0x92>
 800b5a4:	e00f      	b.n	800b5c6 <__swbuf_r+0x8e>
 800b5a6:	4b0b      	ldr	r3, [pc, #44]	; (800b5d4 <__swbuf_r+0x9c>)
 800b5a8:	429c      	cmp	r4, r3
 800b5aa:	d101      	bne.n	800b5b0 <__swbuf_r+0x78>
 800b5ac:	68ac      	ldr	r4, [r5, #8]
 800b5ae:	e7d0      	b.n	800b552 <__swbuf_r+0x1a>
 800b5b0:	4b09      	ldr	r3, [pc, #36]	; (800b5d8 <__swbuf_r+0xa0>)
 800b5b2:	429c      	cmp	r4, r3
 800b5b4:	bf08      	it	eq
 800b5b6:	68ec      	ldreq	r4, [r5, #12]
 800b5b8:	e7cb      	b.n	800b552 <__swbuf_r+0x1a>
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	4628      	mov	r0, r5
 800b5be:	f000 f81f 	bl	800b600 <__swsetup_r>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d0cc      	beq.n	800b560 <__swbuf_r+0x28>
 800b5c6:	f04f 37ff 	mov.w	r7, #4294967295
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	0800da30 	.word	0x0800da30
 800b5d4:	0800da50 	.word	0x0800da50
 800b5d8:	0800da10 	.word	0x0800da10

0800b5dc <_write_r>:
 800b5dc:	b538      	push	{r3, r4, r5, lr}
 800b5de:	4c07      	ldr	r4, [pc, #28]	; (800b5fc <_write_r+0x20>)
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	4608      	mov	r0, r1
 800b5e4:	4611      	mov	r1, r2
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	6022      	str	r2, [r4, #0]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f7ff f90c 	bl	800a808 <_write>
 800b5f0:	1c43      	adds	r3, r0, #1
 800b5f2:	d102      	bne.n	800b5fa <_write_r+0x1e>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	b103      	cbz	r3, 800b5fa <_write_r+0x1e>
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	2000d940 	.word	0x2000d940

0800b600 <__swsetup_r>:
 800b600:	4b32      	ldr	r3, [pc, #200]	; (800b6cc <__swsetup_r+0xcc>)
 800b602:	b570      	push	{r4, r5, r6, lr}
 800b604:	681d      	ldr	r5, [r3, #0]
 800b606:	4606      	mov	r6, r0
 800b608:	460c      	mov	r4, r1
 800b60a:	b125      	cbz	r5, 800b616 <__swsetup_r+0x16>
 800b60c:	69ab      	ldr	r3, [r5, #24]
 800b60e:	b913      	cbnz	r3, 800b616 <__swsetup_r+0x16>
 800b610:	4628      	mov	r0, r5
 800b612:	f7ff fa2f 	bl	800aa74 <__sinit>
 800b616:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <__swsetup_r+0xd0>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	d10f      	bne.n	800b63c <__swsetup_r+0x3c>
 800b61c:	686c      	ldr	r4, [r5, #4]
 800b61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b622:	b29a      	uxth	r2, r3
 800b624:	0715      	lsls	r5, r2, #28
 800b626:	d42c      	bmi.n	800b682 <__swsetup_r+0x82>
 800b628:	06d0      	lsls	r0, r2, #27
 800b62a:	d411      	bmi.n	800b650 <__swsetup_r+0x50>
 800b62c:	2209      	movs	r2, #9
 800b62e:	6032      	str	r2, [r6, #0]
 800b630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	bd70      	pop	{r4, r5, r6, pc}
 800b63c:	4b25      	ldr	r3, [pc, #148]	; (800b6d4 <__swsetup_r+0xd4>)
 800b63e:	429c      	cmp	r4, r3
 800b640:	d101      	bne.n	800b646 <__swsetup_r+0x46>
 800b642:	68ac      	ldr	r4, [r5, #8]
 800b644:	e7eb      	b.n	800b61e <__swsetup_r+0x1e>
 800b646:	4b24      	ldr	r3, [pc, #144]	; (800b6d8 <__swsetup_r+0xd8>)
 800b648:	429c      	cmp	r4, r3
 800b64a:	bf08      	it	eq
 800b64c:	68ec      	ldreq	r4, [r5, #12]
 800b64e:	e7e6      	b.n	800b61e <__swsetup_r+0x1e>
 800b650:	0751      	lsls	r1, r2, #29
 800b652:	d512      	bpl.n	800b67a <__swsetup_r+0x7a>
 800b654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b656:	b141      	cbz	r1, 800b66a <__swsetup_r+0x6a>
 800b658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b65c:	4299      	cmp	r1, r3
 800b65e:	d002      	beq.n	800b666 <__swsetup_r+0x66>
 800b660:	4630      	mov	r0, r6
 800b662:	f000 f98f 	bl	800b984 <_free_r>
 800b666:	2300      	movs	r3, #0
 800b668:	6363      	str	r3, [r4, #52]	; 0x34
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b670:	81a3      	strh	r3, [r4, #12]
 800b672:	2300      	movs	r3, #0
 800b674:	6063      	str	r3, [r4, #4]
 800b676:	6923      	ldr	r3, [r4, #16]
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	89a3      	ldrh	r3, [r4, #12]
 800b67c:	f043 0308 	orr.w	r3, r3, #8
 800b680:	81a3      	strh	r3, [r4, #12]
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	b94b      	cbnz	r3, 800b69a <__swsetup_r+0x9a>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b68c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b690:	d003      	beq.n	800b69a <__swsetup_r+0x9a>
 800b692:	4621      	mov	r1, r4
 800b694:	4630      	mov	r0, r6
 800b696:	f000 f919 	bl	800b8cc <__smakebuf_r>
 800b69a:	89a2      	ldrh	r2, [r4, #12]
 800b69c:	f012 0301 	ands.w	r3, r2, #1
 800b6a0:	d00c      	beq.n	800b6bc <__swsetup_r+0xbc>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60a3      	str	r3, [r4, #8]
 800b6a6:	6963      	ldr	r3, [r4, #20]
 800b6a8:	425b      	negs	r3, r3
 800b6aa:	61a3      	str	r3, [r4, #24]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	b953      	cbnz	r3, 800b6c6 <__swsetup_r+0xc6>
 800b6b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800b6b8:	d1ba      	bne.n	800b630 <__swsetup_r+0x30>
 800b6ba:	bd70      	pop	{r4, r5, r6, pc}
 800b6bc:	0792      	lsls	r2, r2, #30
 800b6be:	bf58      	it	pl
 800b6c0:	6963      	ldrpl	r3, [r4, #20]
 800b6c2:	60a3      	str	r3, [r4, #8]
 800b6c4:	e7f2      	b.n	800b6ac <__swsetup_r+0xac>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e7f7      	b.n	800b6ba <__swsetup_r+0xba>
 800b6ca:	bf00      	nop
 800b6cc:	20000018 	.word	0x20000018
 800b6d0:	0800da30 	.word	0x0800da30
 800b6d4:	0800da50 	.word	0x0800da50
 800b6d8:	0800da10 	.word	0x0800da10

0800b6dc <_close_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	4c06      	ldr	r4, [pc, #24]	; (800b6f8 <_close_r+0x1c>)
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	6023      	str	r3, [r4, #0]
 800b6e8:	f7ff f8b6 	bl	800a858 <_close>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_close_r+0x1a>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_close_r+0x1a>
 800b6f4:	602b      	str	r3, [r5, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	2000d940 	.word	0x2000d940

0800b6fc <__sflush_r>:
 800b6fc:	898a      	ldrh	r2, [r1, #12]
 800b6fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b702:	4605      	mov	r5, r0
 800b704:	0710      	lsls	r0, r2, #28
 800b706:	460c      	mov	r4, r1
 800b708:	d45a      	bmi.n	800b7c0 <__sflush_r+0xc4>
 800b70a:	684b      	ldr	r3, [r1, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dc05      	bgt.n	800b71c <__sflush_r+0x20>
 800b710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b712:	2b00      	cmp	r3, #0
 800b714:	dc02      	bgt.n	800b71c <__sflush_r+0x20>
 800b716:	2000      	movs	r0, #0
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b71e:	2e00      	cmp	r6, #0
 800b720:	d0f9      	beq.n	800b716 <__sflush_r+0x1a>
 800b722:	2300      	movs	r3, #0
 800b724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b728:	682f      	ldr	r7, [r5, #0]
 800b72a:	602b      	str	r3, [r5, #0]
 800b72c:	d033      	beq.n	800b796 <__sflush_r+0x9a>
 800b72e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	075a      	lsls	r2, r3, #29
 800b734:	d505      	bpl.n	800b742 <__sflush_r+0x46>
 800b736:	6863      	ldr	r3, [r4, #4]
 800b738:	1ac0      	subs	r0, r0, r3
 800b73a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b73c:	b10b      	cbz	r3, 800b742 <__sflush_r+0x46>
 800b73e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b740:	1ac0      	subs	r0, r0, r3
 800b742:	2300      	movs	r3, #0
 800b744:	4602      	mov	r2, r0
 800b746:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b748:	6a21      	ldr	r1, [r4, #32]
 800b74a:	4628      	mov	r0, r5
 800b74c:	47b0      	blx	r6
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	89a3      	ldrh	r3, [r4, #12]
 800b752:	d106      	bne.n	800b762 <__sflush_r+0x66>
 800b754:	6829      	ldr	r1, [r5, #0]
 800b756:	291d      	cmp	r1, #29
 800b758:	d84b      	bhi.n	800b7f2 <__sflush_r+0xf6>
 800b75a:	4a2b      	ldr	r2, [pc, #172]	; (800b808 <__sflush_r+0x10c>)
 800b75c:	40ca      	lsrs	r2, r1
 800b75e:	07d6      	lsls	r6, r2, #31
 800b760:	d547      	bpl.n	800b7f2 <__sflush_r+0xf6>
 800b762:	2200      	movs	r2, #0
 800b764:	6062      	str	r2, [r4, #4]
 800b766:	04d9      	lsls	r1, r3, #19
 800b768:	6922      	ldr	r2, [r4, #16]
 800b76a:	6022      	str	r2, [r4, #0]
 800b76c:	d504      	bpl.n	800b778 <__sflush_r+0x7c>
 800b76e:	1c42      	adds	r2, r0, #1
 800b770:	d101      	bne.n	800b776 <__sflush_r+0x7a>
 800b772:	682b      	ldr	r3, [r5, #0]
 800b774:	b903      	cbnz	r3, 800b778 <__sflush_r+0x7c>
 800b776:	6560      	str	r0, [r4, #84]	; 0x54
 800b778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b77a:	602f      	str	r7, [r5, #0]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	d0ca      	beq.n	800b716 <__sflush_r+0x1a>
 800b780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b784:	4299      	cmp	r1, r3
 800b786:	d002      	beq.n	800b78e <__sflush_r+0x92>
 800b788:	4628      	mov	r0, r5
 800b78a:	f000 f8fb 	bl	800b984 <_free_r>
 800b78e:	2000      	movs	r0, #0
 800b790:	6360      	str	r0, [r4, #52]	; 0x34
 800b792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b796:	6a21      	ldr	r1, [r4, #32]
 800b798:	2301      	movs	r3, #1
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b0      	blx	r6
 800b79e:	1c41      	adds	r1, r0, #1
 800b7a0:	d1c6      	bne.n	800b730 <__sflush_r+0x34>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d0c3      	beq.n	800b730 <__sflush_r+0x34>
 800b7a8:	2b1d      	cmp	r3, #29
 800b7aa:	d001      	beq.n	800b7b0 <__sflush_r+0xb4>
 800b7ac:	2b16      	cmp	r3, #22
 800b7ae:	d101      	bne.n	800b7b4 <__sflush_r+0xb8>
 800b7b0:	602f      	str	r7, [r5, #0]
 800b7b2:	e7b0      	b.n	800b716 <__sflush_r+0x1a>
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c0:	690f      	ldr	r7, [r1, #16]
 800b7c2:	2f00      	cmp	r7, #0
 800b7c4:	d0a7      	beq.n	800b716 <__sflush_r+0x1a>
 800b7c6:	0793      	lsls	r3, r2, #30
 800b7c8:	680e      	ldr	r6, [r1, #0]
 800b7ca:	bf08      	it	eq
 800b7cc:	694b      	ldreq	r3, [r1, #20]
 800b7ce:	600f      	str	r7, [r1, #0]
 800b7d0:	bf18      	it	ne
 800b7d2:	2300      	movne	r3, #0
 800b7d4:	eba6 0807 	sub.w	r8, r6, r7
 800b7d8:	608b      	str	r3, [r1, #8]
 800b7da:	f1b8 0f00 	cmp.w	r8, #0
 800b7de:	dd9a      	ble.n	800b716 <__sflush_r+0x1a>
 800b7e0:	4643      	mov	r3, r8
 800b7e2:	463a      	mov	r2, r7
 800b7e4:	6a21      	ldr	r1, [r4, #32]
 800b7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b0      	blx	r6
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	dc07      	bgt.n	800b800 <__sflush_r+0x104>
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b800:	4407      	add	r7, r0
 800b802:	eba8 0800 	sub.w	r8, r8, r0
 800b806:	e7e8      	b.n	800b7da <__sflush_r+0xde>
 800b808:	20400001 	.word	0x20400001

0800b80c <_fflush_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	690b      	ldr	r3, [r1, #16]
 800b810:	4605      	mov	r5, r0
 800b812:	460c      	mov	r4, r1
 800b814:	b1db      	cbz	r3, 800b84e <_fflush_r+0x42>
 800b816:	b118      	cbz	r0, 800b820 <_fflush_r+0x14>
 800b818:	6983      	ldr	r3, [r0, #24]
 800b81a:	b90b      	cbnz	r3, 800b820 <_fflush_r+0x14>
 800b81c:	f7ff f92a 	bl	800aa74 <__sinit>
 800b820:	4b0c      	ldr	r3, [pc, #48]	; (800b854 <_fflush_r+0x48>)
 800b822:	429c      	cmp	r4, r3
 800b824:	d109      	bne.n	800b83a <_fflush_r+0x2e>
 800b826:	686c      	ldr	r4, [r5, #4]
 800b828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b82c:	b17b      	cbz	r3, 800b84e <_fflush_r+0x42>
 800b82e:	4621      	mov	r1, r4
 800b830:	4628      	mov	r0, r5
 800b832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b836:	f7ff bf61 	b.w	800b6fc <__sflush_r>
 800b83a:	4b07      	ldr	r3, [pc, #28]	; (800b858 <_fflush_r+0x4c>)
 800b83c:	429c      	cmp	r4, r3
 800b83e:	d101      	bne.n	800b844 <_fflush_r+0x38>
 800b840:	68ac      	ldr	r4, [r5, #8]
 800b842:	e7f1      	b.n	800b828 <_fflush_r+0x1c>
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <_fflush_r+0x50>)
 800b846:	429c      	cmp	r4, r3
 800b848:	bf08      	it	eq
 800b84a:	68ec      	ldreq	r4, [r5, #12]
 800b84c:	e7ec      	b.n	800b828 <_fflush_r+0x1c>
 800b84e:	2000      	movs	r0, #0
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	bf00      	nop
 800b854:	0800da30 	.word	0x0800da30
 800b858:	0800da50 	.word	0x0800da50
 800b85c:	0800da10 	.word	0x0800da10

0800b860 <_lseek_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4c07      	ldr	r4, [pc, #28]	; (800b880 <_lseek_r+0x20>)
 800b864:	4605      	mov	r5, r0
 800b866:	4608      	mov	r0, r1
 800b868:	4611      	mov	r1, r2
 800b86a:	2200      	movs	r2, #0
 800b86c:	6022      	str	r2, [r4, #0]
 800b86e:	461a      	mov	r2, r3
 800b870:	f7fe fffc 	bl	800a86c <_lseek>
 800b874:	1c43      	adds	r3, r0, #1
 800b876:	d102      	bne.n	800b87e <_lseek_r+0x1e>
 800b878:	6823      	ldr	r3, [r4, #0]
 800b87a:	b103      	cbz	r3, 800b87e <_lseek_r+0x1e>
 800b87c:	602b      	str	r3, [r5, #0]
 800b87e:	bd38      	pop	{r3, r4, r5, pc}
 800b880:	2000d940 	.word	0x2000d940

0800b884 <__swhatbuf_r>:
 800b884:	b570      	push	{r4, r5, r6, lr}
 800b886:	460e      	mov	r6, r1
 800b888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88c:	2900      	cmp	r1, #0
 800b88e:	b090      	sub	sp, #64	; 0x40
 800b890:	4614      	mov	r4, r2
 800b892:	461d      	mov	r5, r3
 800b894:	da07      	bge.n	800b8a6 <__swhatbuf_r+0x22>
 800b896:	2300      	movs	r3, #0
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	89b3      	ldrh	r3, [r6, #12]
 800b89c:	061a      	lsls	r2, r3, #24
 800b89e:	d410      	bmi.n	800b8c2 <__swhatbuf_r+0x3e>
 800b8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8a4:	e00e      	b.n	800b8c4 <__swhatbuf_r+0x40>
 800b8a6:	aa01      	add	r2, sp, #4
 800b8a8:	f000 f8f2 	bl	800ba90 <_fstat_r>
 800b8ac:	2800      	cmp	r0, #0
 800b8ae:	dbf2      	blt.n	800b896 <__swhatbuf_r+0x12>
 800b8b0:	9a02      	ldr	r2, [sp, #8]
 800b8b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8ba:	425a      	negs	r2, r3
 800b8bc:	415a      	adcs	r2, r3
 800b8be:	602a      	str	r2, [r5, #0]
 800b8c0:	e7ee      	b.n	800b8a0 <__swhatbuf_r+0x1c>
 800b8c2:	2340      	movs	r3, #64	; 0x40
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	b010      	add	sp, #64	; 0x40
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}

0800b8cc <__smakebuf_r>:
 800b8cc:	898b      	ldrh	r3, [r1, #12]
 800b8ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d0:	079d      	lsls	r5, r3, #30
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460c      	mov	r4, r1
 800b8d6:	d507      	bpl.n	800b8e8 <__smakebuf_r+0x1c>
 800b8d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	6123      	str	r3, [r4, #16]
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	6163      	str	r3, [r4, #20]
 800b8e4:	b002      	add	sp, #8
 800b8e6:	bd70      	pop	{r4, r5, r6, pc}
 800b8e8:	ab01      	add	r3, sp, #4
 800b8ea:	466a      	mov	r2, sp
 800b8ec:	f7ff ffca 	bl	800b884 <__swhatbuf_r>
 800b8f0:	9900      	ldr	r1, [sp, #0]
 800b8f2:	4605      	mov	r5, r0
 800b8f4:	4630      	mov	r0, r6
 800b8f6:	f7ff f947 	bl	800ab88 <_malloc_r>
 800b8fa:	b948      	cbnz	r0, 800b910 <__smakebuf_r+0x44>
 800b8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b900:	059a      	lsls	r2, r3, #22
 800b902:	d4ef      	bmi.n	800b8e4 <__smakebuf_r+0x18>
 800b904:	f023 0303 	bic.w	r3, r3, #3
 800b908:	f043 0302 	orr.w	r3, r3, #2
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	e7e3      	b.n	800b8d8 <__smakebuf_r+0xc>
 800b910:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <__smakebuf_r+0x7c>)
 800b912:	62b3      	str	r3, [r6, #40]	; 0x28
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	6020      	str	r0, [r4, #0]
 800b918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b91c:	81a3      	strh	r3, [r4, #12]
 800b91e:	9b00      	ldr	r3, [sp, #0]
 800b920:	6163      	str	r3, [r4, #20]
 800b922:	9b01      	ldr	r3, [sp, #4]
 800b924:	6120      	str	r0, [r4, #16]
 800b926:	b15b      	cbz	r3, 800b940 <__smakebuf_r+0x74>
 800b928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b92c:	4630      	mov	r0, r6
 800b92e:	f000 f8c1 	bl	800bab4 <_isatty_r>
 800b932:	b128      	cbz	r0, 800b940 <__smakebuf_r+0x74>
 800b934:	89a3      	ldrh	r3, [r4, #12]
 800b936:	f023 0303 	bic.w	r3, r3, #3
 800b93a:	f043 0301 	orr.w	r3, r3, #1
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	431d      	orrs	r5, r3
 800b944:	81a5      	strh	r5, [r4, #12]
 800b946:	e7cd      	b.n	800b8e4 <__smakebuf_r+0x18>
 800b948:	0800a9f5 	.word	0x0800a9f5

0800b94c <memmove>:
 800b94c:	4288      	cmp	r0, r1
 800b94e:	b510      	push	{r4, lr}
 800b950:	eb01 0302 	add.w	r3, r1, r2
 800b954:	d803      	bhi.n	800b95e <memmove+0x12>
 800b956:	1e42      	subs	r2, r0, #1
 800b958:	4299      	cmp	r1, r3
 800b95a:	d10c      	bne.n	800b976 <memmove+0x2a>
 800b95c:	bd10      	pop	{r4, pc}
 800b95e:	4298      	cmp	r0, r3
 800b960:	d2f9      	bcs.n	800b956 <memmove+0xa>
 800b962:	1881      	adds	r1, r0, r2
 800b964:	1ad2      	subs	r2, r2, r3
 800b966:	42d3      	cmn	r3, r2
 800b968:	d100      	bne.n	800b96c <memmove+0x20>
 800b96a:	bd10      	pop	{r4, pc}
 800b96c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b970:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b974:	e7f7      	b.n	800b966 <memmove+0x1a>
 800b976:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b97a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b97e:	e7eb      	b.n	800b958 <memmove+0xc>

0800b980 <__malloc_lock>:
 800b980:	4770      	bx	lr

0800b982 <__malloc_unlock>:
 800b982:	4770      	bx	lr

0800b984 <_free_r>:
 800b984:	b538      	push	{r3, r4, r5, lr}
 800b986:	4605      	mov	r5, r0
 800b988:	2900      	cmp	r1, #0
 800b98a:	d045      	beq.n	800ba18 <_free_r+0x94>
 800b98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b990:	1f0c      	subs	r4, r1, #4
 800b992:	2b00      	cmp	r3, #0
 800b994:	bfb8      	it	lt
 800b996:	18e4      	addlt	r4, r4, r3
 800b998:	f7ff fff2 	bl	800b980 <__malloc_lock>
 800b99c:	4a1f      	ldr	r2, [pc, #124]	; (800ba1c <_free_r+0x98>)
 800b99e:	6813      	ldr	r3, [r2, #0]
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	b933      	cbnz	r3, 800b9b2 <_free_r+0x2e>
 800b9a4:	6063      	str	r3, [r4, #4]
 800b9a6:	6014      	str	r4, [r2, #0]
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9ae:	f7ff bfe8 	b.w	800b982 <__malloc_unlock>
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	d90c      	bls.n	800b9d0 <_free_r+0x4c>
 800b9b6:	6821      	ldr	r1, [r4, #0]
 800b9b8:	1862      	adds	r2, r4, r1
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	bf04      	itt	eq
 800b9be:	681a      	ldreq	r2, [r3, #0]
 800b9c0:	685b      	ldreq	r3, [r3, #4]
 800b9c2:	6063      	str	r3, [r4, #4]
 800b9c4:	bf04      	itt	eq
 800b9c6:	1852      	addeq	r2, r2, r1
 800b9c8:	6022      	streq	r2, [r4, #0]
 800b9ca:	6004      	str	r4, [r0, #0]
 800b9cc:	e7ec      	b.n	800b9a8 <_free_r+0x24>
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	685a      	ldr	r2, [r3, #4]
 800b9d2:	b10a      	cbz	r2, 800b9d8 <_free_r+0x54>
 800b9d4:	42a2      	cmp	r2, r4
 800b9d6:	d9fa      	bls.n	800b9ce <_free_r+0x4a>
 800b9d8:	6819      	ldr	r1, [r3, #0]
 800b9da:	1858      	adds	r0, r3, r1
 800b9dc:	42a0      	cmp	r0, r4
 800b9de:	d10b      	bne.n	800b9f8 <_free_r+0x74>
 800b9e0:	6820      	ldr	r0, [r4, #0]
 800b9e2:	4401      	add	r1, r0
 800b9e4:	1858      	adds	r0, r3, r1
 800b9e6:	4282      	cmp	r2, r0
 800b9e8:	6019      	str	r1, [r3, #0]
 800b9ea:	d1dd      	bne.n	800b9a8 <_free_r+0x24>
 800b9ec:	6810      	ldr	r0, [r2, #0]
 800b9ee:	6852      	ldr	r2, [r2, #4]
 800b9f0:	605a      	str	r2, [r3, #4]
 800b9f2:	4401      	add	r1, r0
 800b9f4:	6019      	str	r1, [r3, #0]
 800b9f6:	e7d7      	b.n	800b9a8 <_free_r+0x24>
 800b9f8:	d902      	bls.n	800ba00 <_free_r+0x7c>
 800b9fa:	230c      	movs	r3, #12
 800b9fc:	602b      	str	r3, [r5, #0]
 800b9fe:	e7d3      	b.n	800b9a8 <_free_r+0x24>
 800ba00:	6820      	ldr	r0, [r4, #0]
 800ba02:	1821      	adds	r1, r4, r0
 800ba04:	428a      	cmp	r2, r1
 800ba06:	bf04      	itt	eq
 800ba08:	6811      	ldreq	r1, [r2, #0]
 800ba0a:	6852      	ldreq	r2, [r2, #4]
 800ba0c:	6062      	str	r2, [r4, #4]
 800ba0e:	bf04      	itt	eq
 800ba10:	1809      	addeq	r1, r1, r0
 800ba12:	6021      	streq	r1, [r4, #0]
 800ba14:	605c      	str	r4, [r3, #4]
 800ba16:	e7c7      	b.n	800b9a8 <_free_r+0x24>
 800ba18:	bd38      	pop	{r3, r4, r5, pc}
 800ba1a:	bf00      	nop
 800ba1c:	200055dc 	.word	0x200055dc

0800ba20 <_realloc_r>:
 800ba20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba22:	4607      	mov	r7, r0
 800ba24:	4614      	mov	r4, r2
 800ba26:	460e      	mov	r6, r1
 800ba28:	b921      	cbnz	r1, 800ba34 <_realloc_r+0x14>
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba30:	f7ff b8aa 	b.w	800ab88 <_malloc_r>
 800ba34:	b922      	cbnz	r2, 800ba40 <_realloc_r+0x20>
 800ba36:	f7ff ffa5 	bl	800b984 <_free_r>
 800ba3a:	4625      	mov	r5, r4
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba40:	f000 f848 	bl	800bad4 <_malloc_usable_size_r>
 800ba44:	4284      	cmp	r4, r0
 800ba46:	d90f      	bls.n	800ba68 <_realloc_r+0x48>
 800ba48:	4621      	mov	r1, r4
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	f7ff f89c 	bl	800ab88 <_malloc_r>
 800ba50:	4605      	mov	r5, r0
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d0f2      	beq.n	800ba3c <_realloc_r+0x1c>
 800ba56:	4631      	mov	r1, r6
 800ba58:	4622      	mov	r2, r4
 800ba5a:	f7fe ff74 	bl	800a946 <memcpy>
 800ba5e:	4631      	mov	r1, r6
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7ff ff8f 	bl	800b984 <_free_r>
 800ba66:	e7e9      	b.n	800ba3c <_realloc_r+0x1c>
 800ba68:	4635      	mov	r5, r6
 800ba6a:	e7e7      	b.n	800ba3c <_realloc_r+0x1c>

0800ba6c <_read_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4c07      	ldr	r4, [pc, #28]	; (800ba8c <_read_r+0x20>)
 800ba70:	4605      	mov	r5, r0
 800ba72:	4608      	mov	r0, r1
 800ba74:	4611      	mov	r1, r2
 800ba76:	2200      	movs	r2, #0
 800ba78:	6022      	str	r2, [r4, #0]
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	f7fe feb6 	bl	800a7ec <_read>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d102      	bne.n	800ba8a <_read_r+0x1e>
 800ba84:	6823      	ldr	r3, [r4, #0]
 800ba86:	b103      	cbz	r3, 800ba8a <_read_r+0x1e>
 800ba88:	602b      	str	r3, [r5, #0]
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	2000d940 	.word	0x2000d940

0800ba90 <_fstat_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4c07      	ldr	r4, [pc, #28]	; (800bab0 <_fstat_r+0x20>)
 800ba94:	2300      	movs	r3, #0
 800ba96:	4605      	mov	r5, r0
 800ba98:	4608      	mov	r0, r1
 800ba9a:	4611      	mov	r1, r2
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	f7fe fede 	bl	800a85e <_fstat>
 800baa2:	1c43      	adds	r3, r0, #1
 800baa4:	d102      	bne.n	800baac <_fstat_r+0x1c>
 800baa6:	6823      	ldr	r3, [r4, #0]
 800baa8:	b103      	cbz	r3, 800baac <_fstat_r+0x1c>
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	bd38      	pop	{r3, r4, r5, pc}
 800baae:	bf00      	nop
 800bab0:	2000d940 	.word	0x2000d940

0800bab4 <_isatty_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4c06      	ldr	r4, [pc, #24]	; (800bad0 <_isatty_r+0x1c>)
 800bab8:	2300      	movs	r3, #0
 800baba:	4605      	mov	r5, r0
 800babc:	4608      	mov	r0, r1
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	f7fe fed2 	bl	800a868 <_isatty>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	d102      	bne.n	800bace <_isatty_r+0x1a>
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	b103      	cbz	r3, 800bace <_isatty_r+0x1a>
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	bd38      	pop	{r3, r4, r5, pc}
 800bad0:	2000d940 	.word	0x2000d940

0800bad4 <_malloc_usable_size_r>:
 800bad4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800bad8:	2800      	cmp	r0, #0
 800bada:	f1a0 0004 	sub.w	r0, r0, #4
 800bade:	bfbc      	itt	lt
 800bae0:	580b      	ldrlt	r3, [r1, r0]
 800bae2:	18c0      	addlt	r0, r0, r3
 800bae4:	4770      	bx	lr
	...

0800bae8 <_init>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr

0800baf4 <_fini>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	bf00      	nop
 800baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafa:	bc08      	pop	{r3}
 800bafc:	469e      	mov	lr, r3
 800bafe:	4770      	bx	lr
